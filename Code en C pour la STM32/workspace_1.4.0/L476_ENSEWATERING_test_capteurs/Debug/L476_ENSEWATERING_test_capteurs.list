
L476_ENSEWATERING_test_capteurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000959c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08009730  08009730  00019730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a58  08009a58  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a58  08009a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a60  08009a60  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a60  08009a60  00019a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a64  08009a64  00019a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001dc  08009c44  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08009c44  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014179  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002445  00000000  00000000  00034385  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  000367d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  00037ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029115  00000000  00000000  00038cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ece7  00000000  00000000  00061ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001076ad  00000000  00000000  00070ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f00  00000000  00000000  001781ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009714 	.word	0x08009714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009714 	.word	0x08009714

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fc3f 	bl	800180e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f852 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 fa06 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f000 f9e6 	bl	8001368 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 f9b4 	bl	8001308 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fa0:	f000 f8d6 	bl	8001150 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f95c 	bl	8001260 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, table, 2);  // table[0]= humidité; table[1]=luminosité
 8000fa8:	2202      	movs	r2, #2
 8000faa:	491b      	ldr	r1, [pc, #108]	; (8001018 <main+0x90>)
 8000fac:	481b      	ldr	r0, [pc, #108]	; (800101c <main+0x94>)
 8000fae:	f000 ffcd 	bl	8001f4c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000fb2:	481b      	ldr	r0, [pc, #108]	; (8001020 <main+0x98>)
 8000fb4:	f003 fe9a 	bl	8004cec <HAL_TIM_Base_Start>

  it_adc = 0;					// on fixe it_adc à 0
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <main+0x9c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

  sprintf(UART_TX_BUFFER,"Starting... \r\n", table[0],table[1]);  //
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <main+0x90>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <main+0x90>)
 8000fc6:	885b      	ldrh	r3, [r3, #2]
 8000fc8:	4917      	ldr	r1, [pc, #92]	; (8001028 <main+0xa0>)
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <main+0xa4>)
 8000fcc:	f005 fcb0 	bl	8006930 <siprintf>
  HAL_UART_Transmit(&huart2, UART_TX_BUFFER, 32, HAL_MAX_DELAY);  //
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	4915      	ldr	r1, [pc, #84]	; (800102c <main+0xa4>)
 8000fd8:	4815      	ldr	r0, [pc, #84]	; (8001030 <main+0xa8>)
 8000fda:	f004 f9b3 	bl	8005344 <HAL_UART_Transmit>



  while (1)
  {
	  if(it_adc){      		// lorsqu'il y a une interruption, it_adc = 1, on exécute la condition
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <main+0x9c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d012      	beq.n	800100c <main+0x84>
		  // Votre code à faire à la réception de données


		  //table[0]= humidite;
		  //table[1]= luminosite;
		  sprintf(UART_TX_BUFFER,"humidite:%d luminosite:%d\r\n", table[0],table[1]); // on affiche les signaux sur la console, utile uniquement pour les tests
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <main+0x90>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <main+0x90>)
 8000fee:	885b      	ldrh	r3, [r3, #2]
 8000ff0:	4910      	ldr	r1, [pc, #64]	; (8001034 <main+0xac>)
 8000ff2:	480e      	ldr	r0, [pc, #56]	; (800102c <main+0xa4>)
 8000ff4:	f005 fc9c 	bl	8006930 <siprintf>
		  HAL_UART_Transmit(&huart2, UART_TX_BUFFER, 32, HAL_MAX_DELAY) 	;      // on envoie les valeurs d'humidité et de luminosité a la raspberry
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	490b      	ldr	r1, [pc, #44]	; (800102c <main+0xa4>)
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <main+0xa8>)
 8001002:	f004 f99f 	bl	8005344 <HAL_UART_Transmit>


		  it_adc = 0;    // on remet it_adc à 0 et on attend la prochaine interruption
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <main+0x9c>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin); //atteste du fonctionnement de la carte
 800100c:	2120      	movs	r1, #32
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f002 fadb 	bl	80035cc <HAL_GPIO_TogglePin>
	  if(it_adc){      		// lorsqu'il y a une interruption, it_adc = 1, on exécute la condition
 8001016:	e7e2      	b.n	8000fde <main+0x56>
 8001018:	20000228 	.word	0x20000228
 800101c:	20000230 	.word	0x20000230
 8001020:	200002e0 	.word	0x200002e0
 8001024:	20000294 	.word	0x20000294
 8001028:	08009730 	.word	0x08009730
 800102c:	20000204 	.word	0x20000204
 8001030:	2000032c 	.word	0x2000032c
 8001034:	08009740 	.word	0x08009740

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0b8      	sub	sp, #224	; 0xe0
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001042:	2244      	movs	r2, #68	; 0x44
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fe26 	bl	8005c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2288      	movs	r2, #136	; 0x88
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fe18 	bl	8005c98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001068:	f002 faca 	bl	8003600 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <SystemClock_Config+0x114>)
 800106e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001072:	4a36      	ldr	r2, [pc, #216]	; (800114c <SystemClock_Config+0x114>)
 8001074:	f023 0318 	bic.w	r3, r3, #24
 8001078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800107c:	2314      	movs	r3, #20
 800107e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001082:	2301      	movs	r3, #1
 8001084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010ac:	2328      	movs	r3, #40	; 0x28
 80010ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 fb0d 	bl	80036e8 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010d4:	f000 f9d2 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2303      	movs	r3, #3
 80010e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010fa:	2104      	movs	r1, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fed9 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001108:	f000 f9b8 	bl	800147c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800110c:	f244 0302 	movw	r3, #16386	; 0x4002
 8001110:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001116:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800111a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4618      	mov	r0, r3
 8001120:	f003 f8cc 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800112a:	f000 f9a7 	bl	800147c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001132:	f002 fa83 	bl	800363c <HAL_PWREx_ControlVoltageScaling>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800113c:	f000 f99e 	bl	800147c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001140:	f003 fba2 	bl	8004888 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001144:	bf00      	nop
 8001146:	37e0      	adds	r7, #224	; 0xe0
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <MX_ADC1_Init+0x100>)
 8001174:	4a37      	ldr	r2, [pc, #220]	; (8001254 <MX_ADC1_Init+0x104>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <MX_ADC1_Init+0x100>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <MX_ADC1_Init+0x100>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MX_ADC1_Init+0x100>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <MX_ADC1_Init+0x100>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <MX_ADC1_Init+0x100>)
 8001192:	2208      	movs	r2, #8
 8001194:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MX_ADC1_Init+0x100>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_ADC1_Init+0x100>)
 800119e:	2200      	movs	r2, #0
 80011a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_ADC1_Init+0x100>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MX_ADC1_Init+0x100>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_ADC1_Init+0x100>)
 80011b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_ADC1_Init+0x100>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_ADC1_Init+0x100>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_ADC1_Init+0x100>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_ADC1_Init+0x100>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d6:	481e      	ldr	r0, [pc, #120]	; (8001250 <MX_ADC1_Init+0x100>)
 80011d8:	f000 fd64 	bl	8001ca4 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 f94b 	bl	800147c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <MX_ADC1_Init+0x100>)
 80011f2:	f001 fc75 	bl	8002ae0 <HAL_ADCEx_MultiModeConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80011fc:	f000 f93e 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_ADC1_Init+0x108>)
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001204:	2306      	movs	r3, #6
 8001206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001208:	2302      	movs	r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120c:	237f      	movs	r3, #127	; 0x7f
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_ADC1_Init+0x100>)
 800121e:	f000 ff5d 	bl	80020dc <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001228:	f000 f928 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_ADC1_Init+0x10c>)
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001230:	230c      	movs	r3, #12
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_ADC1_Init+0x100>)
 800123a:	f000 ff4f 	bl	80020dc <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001244:	f000 f91a 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000230 	.word	0x20000230
 8001254:	50040000 	.word	0x50040000
 8001258:	14f00020 	.word	0x14f00020
 800125c:	19200040 	.word	0x19200040

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001280:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa4>)
 8001282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001286:	f242 720f 	movw	r2, #9999	; 0x270f
 800128a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM1_Init+0xa0>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001294:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001298:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM1_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ac:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012ae:	f003 fcc5 	bl	8004c3c <HAL_TIM_Base_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 f8e0 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4619      	mov	r1, r3
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012ca:	f003 fd77 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012d4:	f000 f8d2 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012d8:	2320      	movs	r3, #32
 80012da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012ea:	f003 ff55 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012f4:	f000 f8c2 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002e0 	.word	0x200002e0
 8001304:	40012c00 	.word	0x40012c00

08001308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <MX_USART2_UART_Init+0x5c>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800134c:	f003 ffac 	bl	80052a8 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 f891 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000032c 	.word	0x2000032c
 8001364:	40004400 	.word	0x40004400

08001368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA_Init+0x38>)
 8001370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <MX_DMA_Init+0x38>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6493      	str	r3, [r2, #72]	; 0x48
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_DMA_Init+0x38>)
 800137c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	200b      	movs	r0, #11
 800138c:	f001 fd2f 	bl	8002dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001390:	200b      	movs	r0, #11
 8001392:	f001 fd48 	bl	8002e26 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_GPIO_Init+0xb0>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <MX_GPIO_Init+0xb0>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_GPIO_Init+0xb0>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_GPIO_Init+0xb0>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <MX_GPIO_Init+0xb0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_GPIO_Init+0xb0>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Electrovanne_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2130      	movs	r1, #48	; 0x30
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f002 f8d3 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <MX_GPIO_Init+0xb4>)
 800140c:	f001 ff1e 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : Electrovanne_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = Electrovanne_Pin|GREEN_LED_Pin;
 8001410:	2330      	movs	r3, #48	; 0x30
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f001 ff0f 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : Temperature_Pin */
  GPIO_InitStruct.Pin = Temperature_Pin;
 800142e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Temperature_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f001 ff01 	bl	800324c <HAL_GPIO_Init>

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	48000800 	.word	0x48000800

0800145c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc1){
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	it_adc = 1;
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000294 	.word	0x20000294

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_MspInit+0x44>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_MspInit+0x44>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6613      	str	r3, [r2, #96]	; 0x60
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_MspInit+0x44>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x44>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x44>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x44>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <HAL_ADC_MspInit+0xcc>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d14f      	bne.n	8001596 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_ADC_MspInit+0xd0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <HAL_ADC_MspInit+0xd0>)
 80014fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_ADC_MspInit+0xd0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_ADC_MspInit+0xd0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <HAL_ADC_MspInit+0xd0>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_ADC_MspInit+0xd0>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Humidit__Pin|Luminosit__Pin;
 8001526:	2303      	movs	r3, #3
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800152a:	230b      	movs	r3, #11
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f001 fe86 	bl	800324c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001542:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_ADC_MspInit+0xd8>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001570:	2220      	movs	r2, #32
 8001572:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 800157c:	f001 fc6e 	bl	8002e5c <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001586:	f7ff ff79 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 800158e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001590:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <HAL_ADC_MspInit+0xd4>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	50040000 	.word	0x50040000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	20000298 	.word	0x20000298
 80015ac:	40020008 	.word	0x40020008

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_TIM_Base_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015cc:	6613      	str	r3, [r2, #96]	; 0x60
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x7c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d128      	bne.n	8001664 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6593      	str	r3, [r2, #88]	; 0x58
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_MspInit+0x80>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001642:	230c      	movs	r3, #12
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001652:	2307      	movs	r3, #7
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f001 fdf4 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004400 	.word	0x40004400
 8001670:	40021000 	.word	0x40021000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c8:	f000 f8f6 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Channel1_IRQHandler+0x10>)
 80016d6:	f001 fcd9 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000298 	.word	0x20000298

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f004 fa96 	bl	8005c44 <__errno>
 8001718:	4602      	mov	r2, r0
 800171a:	230c      	movs	r3, #12
 800171c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20018000 	.word	0x20018000
 8001744:	00000400 	.word	0x00000400
 8001748:	200001f8 	.word	0x200001f8
 800174c:	200003b8 	.word	0x200003b8

08001750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <SystemInit+0x64>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <SystemInit+0x64>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <SystemInit+0x68>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <SystemInit+0x68>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <SystemInit+0x68>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <SystemInit+0x68>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <SystemInit+0x68>)
 800177c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001780:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001784:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <SystemInit+0x68>)
 8001788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <SystemInit+0x68>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <SystemInit+0x68>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <SystemInit+0x68>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SystemInit+0x64>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	609a      	str	r2, [r3, #8]
#endif
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00
 80017b8:	40021000 	.word	0x40021000

080017bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff ffc6 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017c6:	e003      	b.n	80017d0 <LoopCopyDataInit>

080017c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ce:	3104      	adds	r1, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017d0:	480a      	ldr	r0, [pc, #40]	; (80017fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017d8:	d3f6      	bcc.n	80017c8 <CopyDataInit>
	ldr	r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017dc:	e002      	b.n	80017e4 <LoopFillZerobss>

080017de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017e0:	f842 3b04 	str.w	r3, [r2], #4

080017e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <LoopForever+0x16>)
	cmp	r2, r3
 80017e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017e8:	d3f9      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f004 fa31 	bl	8005c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ee:	f7ff fbcb 	bl	8000f88 <main>

080017f2 <LoopForever>:

LoopForever:
    b LoopForever
 80017f2:	e7fe      	b.n	80017f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017f8:	08009a68 	.word	0x08009a68
	ldr	r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001800:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001804:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001808:	200003b4 	.word	0x200003b4

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>

0800180e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f001 fadd 	bl	8002dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f80e 	bl	8001840 <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	e001      	b.n	8001834 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001830:	f7ff fe2c 	bl	800148c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001834:	79fb      	ldrb	r3, [r7, #7]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_InitTick+0x6c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d023      	beq.n	800189c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_InitTick+0x70>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_InitTick+0x6c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fae9 	bl	8002e42 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d809      	bhi.n	8001890 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001884:	f001 fab3 	bl	8002dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_InitTick+0x74>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e007      	b.n	80018a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e004      	b.n	80018a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e001      	b.n	80018a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	200003ac 	.word	0x200003ac

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200003ac 	.word	0x200003ac

080018f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3360      	adds	r3, #96	; 0x60
 8001972:	461a      	mov	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <LL_ADC_SetOffset+0x44>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	4313      	orrs	r3, r2
 8001990:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	03fff000 	.word	0x03fff000

080019a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3360      	adds	r3, #96	; 0x60
 80019b6:	461a      	mov	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3360      	adds	r3, #96	; 0x60
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3330      	adds	r3, #48	; 0x30
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	211f      	movs	r1, #31
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	f003 011f 	and.w	r1, r3, #31
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3314      	adds	r3, #20
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0e5b      	lsrs	r3, r3, #25
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	0d1b      	lsrs	r3, r3, #20
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	0d1b      	lsrs	r3, r3, #20
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	43db      	mvns	r3, r3
 8001afa:	401a      	ands	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0318 	and.w	r3, r3, #24
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b04:	40d9      	lsrs	r1, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	400b      	ands	r3, r1
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	0007ffff 	.word	0x0007ffff

08001b28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 031f 	and.w	r3, r3, #31
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6093      	str	r3, [r2, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ba0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_IsEnabled+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_IsEnabled+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c42:	f043 0204 	orr.w	r2, r3, #4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e134      	b.n	8001f28 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fc01 	bl	80014d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff3f 	bl	8001b68 <LL_ADC_IsDeepPowerDownEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff25 	bl	8001b44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff5a 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d113      	bne.n	8001d32 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff3e 	bl	8001b90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d14:	4b86      	ldr	r3, [pc, #536]	; (8001f30 <HAL_ADC_Init+0x28c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	4a86      	ldr	r2, [pc, #536]	; (8001f34 <HAL_ADC_Init+0x290>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff3e 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff77 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8001d68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 80cf 	bne.w	8001f16 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80cb 	bne.w	8001f16 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d88:	f043 0202 	orr.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff37 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d115      	bne.n	8001dcc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da0:	4865      	ldr	r0, [pc, #404]	; (8001f38 <HAL_ADC_Init+0x294>)
 8001da2:	f7ff ff31 	bl	8001c08 <LL_ADC_IsEnabled>
 8001da6:	4604      	mov	r4, r0
 8001da8:	4864      	ldr	r0, [pc, #400]	; (8001f3c <HAL_ADC_Init+0x298>)
 8001daa:	f7ff ff2d 	bl	8001c08 <LL_ADC_IsEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	431c      	orrs	r4, r3
 8001db2:	4863      	ldr	r0, [pc, #396]	; (8001f40 <HAL_ADC_Init+0x29c>)
 8001db4:	f7ff ff28 	bl	8001c08 <LL_ADC_IsEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4323      	orrs	r3, r4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	485f      	ldr	r0, [pc, #380]	; (8001f44 <HAL_ADC_Init+0x2a0>)
 8001dc8:	f7ff fd96 	bl	80018f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7e5b      	ldrb	r3, [r3, #25]
 8001dd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ddc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001de2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	045b      	lsls	r3, r3, #17
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_ADC_Init+0x2a4>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff0a 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8001e42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff17 	bl	8001c7c <LL_ADC_INJ_IsConversionOngoing>
 8001e4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d13d      	bne.n	8001ed2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d13a      	bne.n	8001ed2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e60:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e68:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e78:	f023 0302 	bic.w	r3, r3, #2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d118      	bne.n	8001ec2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	e007      	b.n	8001ed2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f023 010f 	bic.w	r1, r3, #15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef2:	e007      	b.n	8001f04 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 020f 	bic.w	r2, r2, #15
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f023 0303 	bic.w	r3, r3, #3
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
 8001f14:	e007      	b.n	8001f26 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3724      	adds	r7, #36	; 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	20000000 	.word	0x20000000
 8001f34:	053e2d63 	.word	0x053e2d63
 8001f38:	50040000 	.word	0x50040000
 8001f3c:	50040100 	.word	0x50040100
 8001f40:	50040200 	.word	0x50040200
 8001f44:	50040300 	.word	0x50040300
 8001f48:	fff0c007 	.word	0xfff0c007

08001f4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f58:	4850      	ldr	r0, [pc, #320]	; (800209c <HAL_ADC_Start_DMA+0x150>)
 8001f5a:	f7ff fde5 	bl	8001b28 <LL_ADC_GetMultimode>
 8001f5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe76 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 808e 	bne.w	800208e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_Start_DMA+0x34>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e089      	b.n	8002094 <HAL_ADC_Start_DMA+0x148>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d002      	beq.n	8001f9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b09      	cmp	r3, #9
 8001f98:	d172      	bne.n	8002080 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fc8c 	bl	80028b8 <ADC_Enable>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d165      	bne.n	8002076 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <HAL_ADC_Start_DMA+0x154>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d002      	beq.n	8001fce <HAL_ADC_Start_DMA+0x82>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	e000      	b.n	8001fd0 <HAL_ADC_Start_DMA+0x84>
 8001fce:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_ADC_Start_DMA+0x158>)
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d002      	beq.n	8001fde <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f023 0206 	bic.w	r2, r3, #6
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	659a      	str	r2, [r3, #88]	; 0x58
 8002002:	e002      	b.n	800200a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_ADC_Start_DMA+0x15c>)
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_ADC_Start_DMA+0x160>)
 8002018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <HAL_ADC_Start_DMA+0x164>)
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	221c      	movs	r2, #28
 8002028:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0210 	orr.w	r2, r2, #16
 8002040:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3340      	adds	r3, #64	; 0x40
 800205c:	4619      	mov	r1, r3
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f000 ffb3 	bl	8002fcc <HAL_DMA_Start_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fddd 	bl	8001c2e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002074:	e00d      	b.n	8002092 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800207e:	e008      	b.n	8002092 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800208c:	e001      	b.n	8002092 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	50040300 	.word	0x50040300
 80020a0:	50040100 	.word	0x50040100
 80020a4:	50040000 	.word	0x50040000
 80020a8:	0800296d 	.word	0x0800296d
 80020ac:	08002a45 	.word	0x08002a45
 80020b0:	08002a61 	.word	0x08002a61

080020b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b6      	sub	sp, #216	; 0xd8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x22>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e3c6      	b.n	800288c <HAL_ADC_ConfigChannel+0x7b0>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fda3 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 83a7 	bne.w	8002866 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b05      	cmp	r3, #5
 800211e:	d824      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	3b02      	subs	r3, #2
 8002126:	2b03      	cmp	r3, #3
 8002128:	d81b      	bhi.n	8002162 <HAL_ADC_ConfigChannel+0x86>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_ADC_ConfigChannel+0x54>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002141 	.word	0x08002141
 8002134:	08002149 	.word	0x08002149
 8002138:	08002151 	.word	0x08002151
 800213c:	08002159 	.word	0x08002159
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	220c      	movs	r2, #12
 8002144:	605a      	str	r2, [r3, #4]
          break;
 8002146:	e011      	b.n	800216c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2212      	movs	r2, #18
 800214c:	605a      	str	r2, [r3, #4]
          break;
 800214e:	e00d      	b.n	800216c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2218      	movs	r2, #24
 8002154:	605a      	str	r2, [r3, #4]
          break;
 8002156:	e009      	b.n	800216c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215e:	605a      	str	r2, [r3, #4]
          break;
 8002160:	e004      	b.n	800216c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2206      	movs	r2, #6
 8002166:	605a      	str	r2, [r3, #4]
          break;
 8002168:	e000      	b.n	800216c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800216a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f7ff fc59 	bl	8001a30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fd67 	bl	8001c56 <LL_ADC_REG_IsConversionOngoing>
 8002188:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fd73 	bl	8001c7c <LL_ADC_INJ_IsConversionOngoing>
 8002196:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800219a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 81a6 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 81a1 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f7ff fc64 	bl	8001a88 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d00a      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6919      	ldr	r1, [r3, #16]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021f2:	f7ff fbb5 	bl	8001960 <LL_ADC_SetOffset>
 80021f6:	e17b      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fbd2 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x148>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fbc7 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	e01e      	b.n	8002262 <HAL_ADC_ConfigChannel+0x186>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fbbc 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800224a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002252:	2320      	movs	r3, #32
 8002254:	e004      	b.n	8002260 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADC_ConfigChannel+0x19e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	e018      	b.n	80022ac <HAL_ADC_ConfigChannel+0x1d0>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800228e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e004      	b.n	80022ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80022a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d106      	bne.n	80022be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fb8b 	bl	80019d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2101      	movs	r1, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fb6f 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x20e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fb64 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	e01e      	b.n	8002328 <HAL_ADC_ConfigChannel+0x24c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fb59 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800230c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800231c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x264>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	e018      	b.n	8002372 <HAL_ADC_ConfigChannel+0x296>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800235c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e004      	b.n	8002372 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002372:	429a      	cmp	r2, r3
 8002374:	d106      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fb28 	bl	80019d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2102      	movs	r1, #2
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fb0c 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x2d4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2102      	movs	r1, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fb01 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	e01e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x312>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2102      	movs	r1, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff faf6 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x32a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	e016      	b.n	8002434 <HAL_ADC_ConfigChannel+0x358>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800241a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800241e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e004      	b.n	8002434 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800242a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fac7 	bl	80019d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2103      	movs	r1, #3
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff faab 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x396>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2103      	movs	r1, #3
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff faa0 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	e017      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x3c6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2103      	movs	r1, #3
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fa95 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800248a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800248c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800248e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x3de>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	e011      	b.n	80024de <HAL_ADC_ConfigChannel+0x402>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80024d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024de:	429a      	cmp	r2, r3
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2103      	movs	r1, #3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fa72 	bl	80019d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fb87 	bl	8001c08 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 813f 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f7ff fae6 	bl	8001ae0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a8e      	ldr	r2, [pc, #568]	; (8002754 <HAL_ADC_ConfigChannel+0x678>)
 800251a:	4293      	cmp	r3, r2
 800251c:	f040 8130 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x46c>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b09      	cmp	r3, #9
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e019      	b.n	800257c <HAL_ADC_ConfigChannel+0x4a0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002558:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800255a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b09      	cmp	r3, #9
 8002574:	bf94      	ite	ls
 8002576:	2301      	movls	r3, #1
 8002578:	2300      	movhi	r3, #0
 800257a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257c:	2b00      	cmp	r3, #0
 800257e:	d079      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_ADC_ConfigChannel+0x4c0>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259a:	e015      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x4ec>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x50c>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	e017      	b.n	8002618 <HAL_ADC_ConfigChannel+0x53c>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	ea42 0103 	orr.w	r1, r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <HAL_ADC_ConfigChannel+0x562>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	051b      	lsls	r3, r3, #20
 800263c:	e018      	b.n	8002670 <HAL_ADC_ConfigChannel+0x594>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	430b      	orrs	r3, r1
 8002672:	e080      	b.n	8002776 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5b4>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268e:	e015      	b.n	80026bc <HAL_ADC_ConfigChannel+0x5e0>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x600>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	e017      	b.n	800270c <HAL_ADC_ConfigChannel+0x630>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	61fb      	str	r3, [r7, #28]
  return result;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	ea42 0103 	orr.w	r1, r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x65c>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	3b1e      	subs	r3, #30
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002736:	e01d      	b.n	8002774 <HAL_ADC_ConfigChannel+0x698>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	613b      	str	r3, [r7, #16]
  return result;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e005      	b.n	8002760 <HAL_ADC_ConfigChannel+0x684>
 8002754:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	3b1e      	subs	r3, #30
 800276e:	051b      	lsls	r3, r3, #20
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	430b      	orrs	r3, r1
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	6892      	ldr	r2, [r2, #8]
 800277a:	4619      	mov	r1, r3
 800277c:	f7ff f984 	bl	8001a88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_ADC_ConfigChannel+0x7b8>)
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d079      	beq.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800278c:	4842      	ldr	r0, [pc, #264]	; (8002898 <HAL_ADC_ConfigChannel+0x7bc>)
 800278e:	f7ff f8d9 	bl	8001944 <LL_ADC_GetCommonPathInternalCh>
 8002792:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_ADC_ConfigChannel+0x7c0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d12b      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d125      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a3b      	ldr	r2, [pc, #236]	; (80028a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x6e4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a3a      	ldr	r2, [pc, #232]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d15c      	bne.n	800287a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c8:	4619      	mov	r1, r3
 80027ca:	4833      	ldr	r0, [pc, #204]	; (8002898 <HAL_ADC_ConfigChannel+0x7bc>)
 80027cc:	f7ff f8a7 	bl	800191e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027d0:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	4a35      	ldr	r2, [pc, #212]	; (80028ac <HAL_ADC_ConfigChannel+0x7d0>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099a      	lsrs	r2, r3, #6
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027e8:	e002      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f9      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f6:	e040      	b.n	800287a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a2c      	ldr	r2, [pc, #176]	; (80028b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d118      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x758>
 8002802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d112      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x746>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_ADC_ConfigChannel+0x7c8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d12d      	bne.n	800287e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282a:	4619      	mov	r1, r3
 800282c:	481a      	ldr	r0, [pc, #104]	; (8002898 <HAL_ADC_ConfigChannel+0x7bc>)
 800282e:	f7ff f876 	bl	800191e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002832:	e024      	b.n	800287e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d120      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11a      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d115      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800285c:	4619      	mov	r1, r3
 800285e:	480e      	ldr	r0, [pc, #56]	; (8002898 <HAL_ADC_ConfigChannel+0x7bc>)
 8002860:	f7ff f85d 	bl	800191e <LL_ADC_SetCommonPathInternalCh>
 8002864:	e00c      	b.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002878:	e002      	b.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800287e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002888:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800288c:	4618      	mov	r0, r3
 800288e:	37d8      	adds	r7, #216	; 0xd8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	80080000 	.word	0x80080000
 8002898:	50040300 	.word	0x50040300
 800289c:	c7520000 	.word	0xc7520000
 80028a0:	50040000 	.word	0x50040000
 80028a4:	50040200 	.word	0x50040200
 80028a8:	20000000 	.word	0x20000000
 80028ac:	053e2d63 	.word	0x053e2d63
 80028b0:	cb840000 	.word	0xcb840000
 80028b4:	80000001 	.word	0x80000001

080028b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f99f 	bl	8001c08 <LL_ADC_IsEnabled>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d146      	bne.n	800295e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <ADC_Enable+0xb0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e032      	b.n	8002960 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f96e 	bl	8001be0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002904:	f7fe ffec 	bl	80018e0 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800290a:	e021      	b.n	8002950 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f979 	bl	8001c08 <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff f95d 	bl	8001be0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002926:	f7fe ffdb 	bl	80018e0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d90d      	bls.n	8002950 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f043 0210 	orr.w	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e007      	b.n	8002960 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d1d6      	bne.n	800290c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	8000003f 	.word	0x8000003f

0800296c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d14b      	bne.n	8002a1e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d021      	beq.n	80029e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f830 	bl	8001a0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d032      	beq.n	8002a16 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d12b      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11f      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
 80029e2:	e018      	b.n	8002a16 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d111      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7fe fd20 	bl	800145c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a1c:	e00e      	b.n	8002a3c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff fb4c 	bl	80020c8 <HAL_ADC_ErrorCallback>
}
 8002a30:	e004      	b.n	8002a3c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7ff fb2e 	bl	80020b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff fb1e 	bl	80020c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <LL_ADC_IsEnabled>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsEnabled+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsEnabled+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_REG_IsConversionOngoing>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b09f      	sub	sp, #124	; 0x7c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e08f      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a47      	ldr	r2, [pc, #284]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d102      	bne.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	e001      	b.n	8002b1a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e072      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ffbd 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002b40:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ffb7 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d154      	bne.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d151      	bne.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02c      	beq.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b76:	035b      	lsls	r3, r3, #13
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b80:	4829      	ldr	r0, [pc, #164]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002b82:	f7ff ff87 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b86:	4604      	mov	r4, r0
 8002b88:	4828      	ldr	r0, [pc, #160]	; (8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002b8a:	f7ff ff83 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	431c      	orrs	r4, r3
 8002b92:	4828      	ldr	r0, [pc, #160]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b94:	f7ff ff7e 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4323      	orrs	r3, r4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d137      	bne.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ba8:	f023 030f 	bic.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	6811      	ldr	r1, [r2, #0]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbc:	e028      	b.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bca:	4817      	ldr	r0, [pc, #92]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002bcc:	f7ff ff62 	bl	8002a94 <LL_ADC_IsEnabled>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	4816      	ldr	r0, [pc, #88]	; (8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002bd4:	f7ff ff5e 	bl	8002a94 <LL_ADC_IsEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	431c      	orrs	r4, r3
 8002bdc:	4815      	ldr	r0, [pc, #84]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bde:	f7ff ff59 	bl	8002a94 <LL_ADC_IsEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4323      	orrs	r3, r4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d112      	bne.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bf2:	f023 030f 	bic.w	r3, r3, #15
 8002bf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bf8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bfa:	e009      	b.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c0e:	e000      	b.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	377c      	adds	r7, #124	; 0x7c
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	50040000 	.word	0x50040000
 8002c2c:	50040100 	.word	0x50040100
 8002c30:	50040300 	.word	0x50040300
 8002c34:	50040200 	.word	0x50040200

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db0b      	blt.n	8002cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <__NVIC_EnableIRQ+0x38>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da4:	d301      	bcc.n	8002daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00f      	b.n	8002dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <SysTick_Config+0x40>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db2:	210f      	movs	r1, #15
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db8:	f7ff ff8e 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <SysTick_Config+0x40>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <SysTick_Config+0x40>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	e000e010 	.word	0xe000e010

08002dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff29 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e00:	f7ff ff3e 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	6978      	ldr	r0, [r7, #20]
 8002e0c:	f7ff ff8e 	bl	8002d2c <NVIC_EncodePriority>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff5d 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff31 	bl	8002c9c <__NVIC_EnableIRQ>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ffa2 	bl	8002d94 <SysTick_Config>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e098      	b.n	8002fa0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_DMA_Init+0x150>)
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d80f      	bhi.n	8002e9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_DMA_Init+0x154>)
 8002e82:	4413      	add	r3, r2
 8002e84:	4a4b      	ldr	r2, [pc, #300]	; (8002fb4 <HAL_DMA_Init+0x158>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	009a      	lsls	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a48      	ldr	r2, [pc, #288]	; (8002fb8 <HAL_DMA_Init+0x15c>)
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
 8002e98:	e00e      	b.n	8002eb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_DMA_Init+0x160>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_DMA_Init+0x158>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_DMA_Init+0x164>)
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f12:	d039      	beq.n	8002f88 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_DMA_Init+0x15c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11a      	bne.n	8002f54 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_DMA_Init+0x168>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f003 031c 	and.w	r3, r3, #28
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4924      	ldr	r1, [pc, #144]	; (8002fc4 <HAL_DMA_Init+0x168>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_DMA_Init+0x168>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f003 031c 	and.w	r3, r3, #28
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	491d      	ldr	r1, [pc, #116]	; (8002fc4 <HAL_DMA_Init+0x168>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
 8002f52:	e019      	b.n	8002f88 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_DMA_Init+0x16c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f003 031c 	and.w	r3, r3, #28
 8002f60:	210f      	movs	r1, #15
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	4917      	ldr	r1, [pc, #92]	; (8002fc8 <HAL_DMA_Init+0x16c>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_DMA_Init+0x16c>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	4911      	ldr	r1, [pc, #68]	; (8002fc8 <HAL_DMA_Init+0x16c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40020407 	.word	0x40020407
 8002fb0:	bffdfff8 	.word	0xbffdfff8
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	bffdfbf8 	.word	0xbffdfbf8
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	400200a8 	.word	0x400200a8
 8002fc8:	400204a8 	.word	0x400204a8

08002fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Start_IT+0x20>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e04b      	b.n	8003084 <HAL_DMA_Start_IT+0xb8>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d13a      	bne.n	8003076 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f8e0 	bl	80031ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 020e 	orr.w	r2, r2, #14
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e00f      	b.n	8003064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 020a 	orr.w	r2, r2, #10
 8003062:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e005      	b.n	8003082 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f003 031c 	and.w	r3, r3, #28
 80030ac:	2204      	movs	r2, #4
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d026      	beq.n	8003106 <HAL_DMA_IRQHandler+0x7a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d021      	beq.n	8003106 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f003 021c 	and.w	r2, r3, #28
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2104      	movs	r1, #4
 80030ee:	fa01 f202 	lsl.w	r2, r1, r2
 80030f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d071      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003104:	e06c      	b.n	80031e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f003 031c 	and.w	r3, r3, #28
 800310e:	2202      	movs	r2, #2
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02e      	beq.n	8003178 <HAL_DMA_IRQHandler+0xec>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d029      	beq.n	8003178 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020a 	bic.w	r2, r2, #10
 8003140:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 021c 	and.w	r2, r3, #28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2102      	movs	r1, #2
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d038      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003176:	e033      	b.n	80031e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	f003 031c 	and.w	r3, r3, #28
 8003180:	2208      	movs	r2, #8
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02a      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x156>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d025      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 020e 	bic.w	r2, r2, #14
 80031a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f003 021c 	and.w	r2, r3, #28
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
}
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	f003 021c 	and.w	r2, r3, #28
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b10      	cmp	r3, #16
 800321a:	d108      	bne.n	800322e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800322c:	e007      	b.n	800323e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	60da      	str	r2, [r3, #12]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	e17f      	b.n	800355c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8171 	beq.w	8003556 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d00b      	beq.n	8003294 <HAL_GPIO_Init+0x48>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d007      	beq.n	8003294 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003288:	2b11      	cmp	r3, #17
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d130      	bne.n	80032f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ca:	2201      	movs	r2, #1
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0201 	and.w	r2, r3, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d118      	bne.n	8003334 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003308:	2201      	movs	r2, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f003 0201 	and.w	r2, r3, #1
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x128>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b12      	cmp	r3, #18
 8003372:	d123      	bne.n	80033bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	08da      	lsrs	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3208      	adds	r2, #8
 80033b6:	6939      	ldr	r1, [r7, #16]
 80033b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0203 	and.w	r2, r3, #3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80ac 	beq.w	8003556 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_GPIO_Init+0x32c>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	4a5d      	ldr	r2, [pc, #372]	; (8003578 <HAL_GPIO_Init+0x32c>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6613      	str	r3, [r2, #96]	; 0x60
 800340a:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_GPIO_Init+0x32c>)
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003416:	4a59      	ldr	r2, [pc, #356]	; (800357c <HAL_GPIO_Init+0x330>)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003440:	d025      	beq.n	800348e <HAL_GPIO_Init+0x242>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01f      	beq.n	800348a <HAL_GPIO_Init+0x23e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4d      	ldr	r2, [pc, #308]	; (8003584 <HAL_GPIO_Init+0x338>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d019      	beq.n	8003486 <HAL_GPIO_Init+0x23a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <HAL_GPIO_Init+0x33c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_GPIO_Init+0x236>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_GPIO_Init+0x340>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00d      	beq.n	800347e <HAL_GPIO_Init+0x232>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4a      	ldr	r2, [pc, #296]	; (8003590 <HAL_GPIO_Init+0x344>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <HAL_GPIO_Init+0x22e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a49      	ldr	r2, [pc, #292]	; (8003594 <HAL_GPIO_Init+0x348>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_GPIO_Init+0x22a>
 8003472:	2306      	movs	r3, #6
 8003474:	e00c      	b.n	8003490 <HAL_GPIO_Init+0x244>
 8003476:	2307      	movs	r3, #7
 8003478:	e00a      	b.n	8003490 <HAL_GPIO_Init+0x244>
 800347a:	2305      	movs	r3, #5
 800347c:	e008      	b.n	8003490 <HAL_GPIO_Init+0x244>
 800347e:	2304      	movs	r3, #4
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x244>
 8003482:	2303      	movs	r3, #3
 8003484:	e004      	b.n	8003490 <HAL_GPIO_Init+0x244>
 8003486:	2302      	movs	r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_Init+0x244>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_GPIO_Init+0x244>
 800348e:	2300      	movs	r3, #0
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	f002 0203 	and.w	r2, r2, #3
 8003496:	0092      	lsls	r2, r2, #2
 8003498:	4093      	lsls	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034a0:	4936      	ldr	r1, [pc, #216]	; (800357c <HAL_GPIO_Init+0x330>)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034ae:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <HAL_GPIO_Init+0x34c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d2:	4a31      	ldr	r2, [pc, #196]	; (8003598 <HAL_GPIO_Init+0x34c>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034d8:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_GPIO_Init+0x34c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_GPIO_Init+0x34c>)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003502:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_GPIO_Init+0x34c>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003526:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_GPIO_Init+0x34c>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800352c:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_GPIO_Init+0x34c>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003550:	4a11      	ldr	r2, [pc, #68]	; (8003598 <HAL_GPIO_Init+0x34c>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3301      	adds	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa22 f303 	lsr.w	r3, r2, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	f47f ae78 	bne.w	800325c <HAL_GPIO_Init+0x10>
  }
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	48001400 	.word	0x48001400
 8003594:	48001800 	.word	0x48001800
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43d9      	mvns	r1, r3
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	400b      	ands	r3, r1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40007000 	.word	0x40007000

08003620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_PWREx_GetVoltageRange+0x18>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40007000 	.word	0x40007000

0800363c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364a:	d130      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d038      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2232      	movs	r2, #50	; 0x32
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	3301      	adds	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003680:	e002      	b.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3b01      	subs	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d102      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f2      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d110      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e00f      	b.n	80036ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d007      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000
 80036e0:	20000000 	.word	0x20000000
 80036e4:	431bde83 	.word	0x431bde83

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e3d4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fa:	4ba1      	ldr	r3, [pc, #644]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003704:	4b9e      	ldr	r3, [pc, #632]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80e4 	beq.w	80038e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_RCC_OscConfig+0x4a>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b0c      	cmp	r3, #12
 8003726:	f040 808b 	bne.w	8003840 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 8087 	bne.w	8003840 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003732:	4b93      	ldr	r3, [pc, #588]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e3ac      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_RCC_OscConfig+0x7c>
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003762:	e005      	b.n	8003770 <HAL_RCC_OscConfig+0x88>
 8003764:	4b86      	ldr	r3, [pc, #536]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	4293      	cmp	r3, r2
 8003772:	d223      	bcs.n	80037bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fd3f 	bl	80041fc <RCC_SetFlashLatencyFromMSIRange>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e38d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003788:	4b7d      	ldr	r3, [pc, #500]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7c      	ldr	r2, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800378e:	f043 0308 	orr.w	r3, r3, #8
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4977      	ldr	r1, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	4972      	ldr	r1, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
 80037ba:	e025      	b.n	8003808 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037bc:	4b70      	ldr	r3, [pc, #448]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6f      	ldr	r2, [pc, #444]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b6d      	ldr	r3, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	496a      	ldr	r1, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037da:	4b69      	ldr	r3, [pc, #420]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	4965      	ldr	r1, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fcff 	bl	80041fc <RCC_SetFlashLatencyFromMSIRange>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e34d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003808:	f000 fc36 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800380c:	4601      	mov	r1, r0
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	4a5a      	ldr	r2, [pc, #360]	; (8003984 <HAL_RCC_OscConfig+0x29c>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa21 f303 	lsr.w	r3, r1, r3
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x2a0>)
 8003826:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_RCC_OscConfig+0x2a4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe f807 	bl	8001840 <HAL_InitTick>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d052      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	e331      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d032      	beq.n	80038ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003848:	4b4d      	ldr	r3, [pc, #308]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4c      	ldr	r2, [pc, #304]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003854:	f7fe f844 	bl	80018e0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800385c:	f7fe f840 	bl	80018e0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e31a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800386e:	4b44      	ldr	r3, [pc, #272]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a40      	ldr	r2, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	493b      	ldr	r1, [pc, #236]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4936      	ldr	r1, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
 80038ac:	e01a      	b.n	80038e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ba:	f7fe f811 	bl	80018e0 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c2:	f7fe f80d 	bl	80018e0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e2e7      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x1da>
 80038e0:	e000      	b.n	80038e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d074      	beq.n	80039da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x21a>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d10e      	bne.n	800391a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d064      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d160      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e2c4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x24a>
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e01d      	b.n	800396e <HAL_RCC_OscConfig+0x286>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x26e>
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x286>
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a06      	ldr	r2, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fd ffb3 	bl	80018e0 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397c:	e011      	b.n	80039a2 <HAL_RCC_OscConfig+0x2ba>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	0800975c 	.word	0x0800975c
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd ffa6 	bl	80018e0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e280      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4baf      	ldr	r3, [pc, #700]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x2a8>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd ff96 	bl	80018e0 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd ff92 	bl	80018e0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e26c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	4ba5      	ldr	r3, [pc, #660]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2d0>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d060      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x310>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d119      	bne.n	8003a26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d116      	bne.n	8003a26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	4b99      	ldr	r3, [pc, #612]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x328>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e249      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b93      	ldr	r3, [pc, #588]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	4990      	ldr	r1, [pc, #576]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	e040      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2e:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a8b      	ldr	r2, [pc, #556]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fd ff51 	bl	80018e0 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fd ff4d 	bl	80018e0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e227      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a54:	4b82      	ldr	r3, [pc, #520]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	497c      	ldr	r1, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e018      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b7a      	ldr	r3, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd ff2d 	bl	80018e0 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fd ff29 	bl	80018e0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e203      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a9c:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac2:	4a67      	ldr	r2, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd ff08 	bl	80018e0 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fd ff04 	bl	80018e0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1de      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae6:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x3ec>
 8003af4:	e01b      	b.n	8003b2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af6:	4b5a      	ldr	r3, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fd feeb 	bl	80018e0 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7fd fee7 	bl	80018e0 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1c1      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b20:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ef      	bne.n	8003b0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a6 	beq.w	8003c88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b40:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	4a43      	ldr	r2, [pc, #268]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6593      	str	r3, [r2, #88]	; 0x58
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d118      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b74:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3a      	ldr	r2, [pc, #232]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b80:	f7fd feae 	bl	80018e0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd feaa 	bl	80018e0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e184      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9a:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4d8>
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbe:	e024      	b.n	8003c0a <HAL_RCC_OscConfig+0x522>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d110      	bne.n	8003bea <HAL_RCC_OscConfig+0x502>
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be8:	e00f      	b.n	8003c0a <HAL_RCC_OscConfig+0x522>
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fd fe65 	bl	80018e0 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fe61 	bl	80018e0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e139      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ed      	beq.n	8003c1a <HAL_RCC_OscConfig+0x532>
 8003c3e:	e01a      	b.n	8003c76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd fe4e 	bl	80018e0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c46:	e00f      	b.n	8003c68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fd fe4a 	bl	80018e0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d906      	bls.n	8003c68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e122      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c68:	4b90      	ldr	r3, [pc, #576]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e8      	bne.n	8003c48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b8b      	ldr	r3, [pc, #556]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a8a      	ldr	r2, [pc, #552]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8108 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	f040 80d0 	bne.w	8003e3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c9c:	4b83      	ldr	r3, [pc, #524]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d130      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d127      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cdc:	2a07      	cmp	r2, #7
 8003cde:	bf14      	ite	ne
 8003ce0:	2201      	movne	r2, #1
 8003ce2:	2200      	moveq	r2, #0
 8003ce4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d113      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d06e      	beq.n	8003df0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d069      	beq.n	8003dec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d18:	4b64      	ldr	r3, [pc, #400]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b7      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d34:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5c      	ldr	r2, [pc, #368]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d40:	f7fd fdce 	bl	80018e0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd fdca 	bl	80018e0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0a4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5a:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <HAL_RCC_OscConfig+0x7c8>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d76:	3a01      	subs	r2, #1
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d80:	0212      	lsls	r2, r2, #8
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d88:	0852      	lsrs	r2, r2, #1
 8003d8a:	3a01      	subs	r2, #1
 8003d8c:	0552      	lsls	r2, r2, #21
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d94:	0852      	lsrs	r2, r2, #1
 8003d96:	3a01      	subs	r2, #1
 8003d98:	0652      	lsls	r2, r2, #25
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da0:	0912      	lsrs	r2, r2, #4
 8003da2:	0452      	lsls	r2, r2, #17
 8003da4:	430a      	orrs	r2, r1
 8003da6:	4941      	ldr	r1, [pc, #260]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dac:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3e      	ldr	r2, [pc, #248]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db8:	4b3c      	ldr	r3, [pc, #240]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a3b      	ldr	r2, [pc, #236]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dc4:	f7fd fd8c 	bl	80018e0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd fd88 	bl	80018e0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e062      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dea:	e05a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e059      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d152      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e14:	f7fd fd64 	bl	80018e0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd fd60 	bl	80018e0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e03a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x734>
 8003e3a:	e032      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d02d      	beq.n	8003e9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e60:	f023 0303 	bic.w	r3, r3, #3
 8003e64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fd fd33 	bl	80018e0 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd fd2f 	bl	80018e0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x796>
 8003e9c:	e001      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	f99d808c 	.word	0xf99d808c

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0c8      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b66      	ldr	r3, [pc, #408]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b63      	ldr	r3, [pc, #396]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 0207 	bic.w	r2, r3, #7
 8003ede:	4961      	ldr	r1, [pc, #388]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b0      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d04c      	beq.n	8003f9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0c:	4b56      	ldr	r3, [pc, #344]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d121      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e09e      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f24:	4b50      	ldr	r3, [pc, #320]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d115      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e092      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e086      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e07e      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 0203 	bic.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	493f      	ldr	r1, [pc, #252]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fd fcb7 	bl	80018e0 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f76:	f7fd fcb3 	bl	80018e0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e066      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8c:	4b36      	ldr	r3, [pc, #216]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 020c 	and.w	r2, r3, #12
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d1eb      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003faa:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	492c      	ldr	r1, [pc, #176]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d210      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e036      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4918      	ldr	r1, [pc, #96]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4910      	ldr	r1, [pc, #64]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800402a:	f000 f825 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800402e:	4601      	mov	r1, r0
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	4a0c      	ldr	r2, [pc, #48]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	fa21 f303 	lsr.w	r3, r1, r3
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fbf6 	bl	8001840 <HAL_InitTick>
 8004054:	4603      	mov	r3, r0
 8004056:	72fb      	strb	r3, [r7, #11]

  return status;
 8004058:	7afb      	ldrb	r3, [r7, #11]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40022000 	.word	0x40022000
 8004068:	40021000 	.word	0x40021000
 800406c:	0800975c 	.word	0x0800975c
 8004070:	20000000 	.word	0x20000000
 8004074:	20000004 	.word	0x20000004

08004078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	4b3d      	ldr	r3, [pc, #244]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004090:	4b3a      	ldr	r3, [pc, #232]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x34>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d121      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d11e      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040ac:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040b8:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e005      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040d4:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10d      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d102      	bne.n	80040f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e004      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040fc:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_GetSysClockFreq+0x110>)
 80040fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d133      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0xa4>
 8004116:	2b03      	cmp	r3, #3
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0xaa>
 800411a:	e005      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_GetSysClockFreq+0x10c>)
 800411e:	617b      	str	r3, [r7, #20]
      break;
 8004120:	e005      	b.n	800412e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_GetSysClockFreq+0x110>)
 8004124:	617b      	str	r3, [r7, #20]
      break;
 8004126:	e002      	b.n	800412e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	617b      	str	r3, [r7, #20]
      break;
 800412c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	3301      	adds	r3, #1
 800413a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	fb02 f203 	mul.w	r2, r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_GetSysClockFreq+0x104>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	0e5b      	lsrs	r3, r3, #25
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	3301      	adds	r3, #1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800416e:	69bb      	ldr	r3, [r7, #24]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3724      	adds	r7, #36	; 0x24
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40021000 	.word	0x40021000
 8004180:	08009774 	.word	0x08009774
 8004184:	00f42400 	.word	0x00f42400
 8004188:	007a1200 	.word	0x007a1200

0800418c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000000 	.word	0x20000000

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041a8:	f7ff fff0 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041ac:	4601      	mov	r1, r0
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ba:	5cd3      	ldrb	r3, [r2, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000
 80041cc:	0800976c 	.word	0x0800976c

080041d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041d4:	f7ff ffda 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041d8:	4601      	mov	r1, r0
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	0adb      	lsrs	r3, r3, #11
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041e6:	5cd3      	ldrb	r3, [r2, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	0800976c 	.word	0x0800976c

080041fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004208:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004214:	f7ff fa04 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 8004218:	6178      	str	r0, [r7, #20]
 800421a:	e014      	b.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6593      	str	r3, [r2, #88]	; 0x58
 8004228:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004234:	f7ff f9f4 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 8004238:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800423a:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004244:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d10b      	bne.n	8004266 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d919      	bls.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2ba0      	cmp	r3, #160	; 0xa0
 8004258:	d902      	bls.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800425a:	2302      	movs	r3, #2
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	e013      	b.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004260:	2301      	movs	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	e010      	b.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d902      	bls.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800426c:	2303      	movs	r3, #3
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	e00a      	b.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d102      	bne.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004278:	2302      	movs	r3, #2
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	e004      	b.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b70      	cmp	r3, #112	; 0x70
 8004282:	d101      	bne.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004284:	2301      	movs	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 0207 	bic.w	r2, r3, #7
 8004290:	4909      	ldr	r1, [pc, #36]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40022000 	.word	0x40022000

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c8:	2300      	movs	r3, #0
 80042ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d03f      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e0:	d01c      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e6:	d802      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80042ec:	e01f      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80042ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80042f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042f8:	d01c      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80042fa:	e018      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042fc:	4b85      	ldr	r3, [pc, #532]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a84      	ldr	r2, [pc, #528]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004306:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004308:	e015      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fac9 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800431a:	e00c      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3320      	adds	r3, #32
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fbb0 	bl	8004a88 <RCCEx_PLLSAI2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	74fb      	strb	r3, [r7, #19]
      break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800433c:	4b75      	ldr	r3, [pc, #468]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434a:	4972      	ldr	r1, [pc, #456]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800436c:	d01c      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800436e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004372:	d802      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004378:	e01f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800437a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800437e:	d003      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004380:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004384:	d01c      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004386:	e018      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004388:	4b62      	ldr	r3, [pc, #392]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a61      	ldr	r2, [pc, #388]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004394:	e015      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fa83 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a6:	e00c      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3320      	adds	r3, #32
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fb6a 	bl	8004a88 <RCCEx_PLLSAI2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b8:	e003      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	74fb      	strb	r3, [r7, #19]
      break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80043c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c8:	4b52      	ldr	r3, [pc, #328]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d6:	494f      	ldr	r1, [pc, #316]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80a0 	beq.w	8004532 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043f6:	4b47      	ldr	r3, [pc, #284]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00d      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440c:	4b41      	ldr	r3, [pc, #260]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	4a40      	ldr	r2, [pc, #256]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6593      	str	r3, [r2, #88]	; 0x58
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004424:	2301      	movs	r3, #1
 8004426:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004428:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a3a      	ldr	r2, [pc, #232]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800442e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004434:	f7fd fa54 	bl	80018e0 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800443a:	e009      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443c:	f7fd fa50 	bl	80018e0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d902      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	74fb      	strb	r3, [r7, #19]
        break;
 800444e:	e005      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004450:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ef      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d15c      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004462:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01f      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	429a      	cmp	r2, r3
 800447e:	d019      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004480:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a20      	ldr	r2, [pc, #128]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd fa0f 	bl	80018e0 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c4:	e00b      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fd fa0b 	bl	80018e0 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d902      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	74fb      	strb	r3, [r7, #19]
            break;
 80044dc:	e006      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ec      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004502:	4904      	ldr	r1, [pc, #16]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800450a:	e009      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
 8004510:	e006      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004520:	7c7b      	ldrb	r3, [r7, #17]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004526:	4b9e      	ldr	r3, [pc, #632]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	4a9d      	ldr	r2, [pc, #628]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004530:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800453e:	4b98      	ldr	r3, [pc, #608]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f023 0203 	bic.w	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	4994      	ldr	r1, [pc, #592]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004560:	4b8f      	ldr	r3, [pc, #572]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f023 020c 	bic.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	498c      	ldr	r1, [pc, #560]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004582:	4b87      	ldr	r3, [pc, #540]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	4983      	ldr	r1, [pc, #524]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045a4:	4b7e      	ldr	r3, [pc, #504]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	497b      	ldr	r1, [pc, #492]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	4972      	ldr	r1, [pc, #456]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e8:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	496a      	ldr	r1, [pc, #424]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800460a:	4b65      	ldr	r3, [pc, #404]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	4961      	ldr	r1, [pc, #388]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800462c:	4b5c      	ldr	r3, [pc, #368]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	4959      	ldr	r1, [pc, #356]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800464e:	4b54      	ldr	r3, [pc, #336]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	4950      	ldr	r1, [pc, #320]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004670:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	4948      	ldr	r1, [pc, #288]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004692:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	493f      	ldr	r1, [pc, #252]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d028      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046b4:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c2:	4937      	ldr	r1, [pc, #220]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d2:	d106      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a31      	ldr	r2, [pc, #196]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
 80046e0:	e011      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ea:	d10c      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f8d8 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d028      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	491f      	ldr	r1, [pc, #124]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004730:	d106      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473c:	60d3      	str	r3, [r2, #12]
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004748:	d10c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f8a9 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477e:	4908      	ldr	r1, [pc, #32]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478e:	d109      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a02      	ldr	r2, [pc, #8]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479a:	60d3      	str	r3, [r2, #12]
 800479c:	e014      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f877 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02f      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e2:	4928      	ldr	r1, [pc, #160]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047f2:	d10d      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f854 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d014      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	74bb      	strb	r3, [r7, #18]
 800480e:	e011      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3320      	adds	r3, #32
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f931 	bl	8004a88 <RCCEx_PLLSAI2_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800482a:	7cfb      	ldrb	r3, [r7, #19]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004840:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484e:	490d      	ldr	r1, [pc, #52]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800487a:	7cbb      	ldrb	r3, [r7, #18]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000

08004888 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000

080048a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048b6:	4b73      	ldr	r3, [pc, #460]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d018      	beq.n	80048f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048c2:	4b70      	ldr	r3, [pc, #448]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0203 	and.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d10d      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
       ||
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048da:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
       ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d044      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e041      	b.n	8004978 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d00c      	beq.n	8004916 <RCCEx_PLLSAI1_Config+0x6e>
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d013      	beq.n	8004928 <RCCEx_PLLSAI1_Config+0x80>
 8004900:	2b01      	cmp	r3, #1
 8004902:	d120      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004904:	4b5f      	ldr	r3, [pc, #380]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11d      	bne.n	800494c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004914:	e01a      	b.n	800494c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004916:	4b5b      	ldr	r3, [pc, #364]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004926:	e013      	b.n	8004950 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004928:	4b56      	ldr	r3, [pc, #344]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10f      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004934:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004944:	e006      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
      break;
 800494a:	e004      	b.n	8004956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800494c:	bf00      	nop
 800494e:	e002      	b.n	8004956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004954:	bf00      	nop
    }

    if(status == HAL_OK)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10d      	bne.n	8004978 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800495c:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	3b01      	subs	r3, #1
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	430b      	orrs	r3, r1
 8004972:	4944      	ldr	r1, [pc, #272]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d17d      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800497e:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fc ffa9 	bl	80018e0 <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004990:	e009      	b.n	80049a6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004992:	f7fc ffa5 	bl	80018e0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d902      	bls.n	80049a6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	73fb      	strb	r3, [r7, #15]
        break;
 80049a4:	e005      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d160      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d111      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049be:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6892      	ldr	r2, [r2, #8]
 80049ce:	0211      	lsls	r1, r2, #8
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68d2      	ldr	r2, [r2, #12]
 80049d4:	0912      	lsrs	r2, r2, #4
 80049d6:	0452      	lsls	r2, r2, #17
 80049d8:	430a      	orrs	r2, r1
 80049da:	492a      	ldr	r1, [pc, #168]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	610b      	str	r3, [r1, #16]
 80049e0:	e027      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d112      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e8:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6892      	ldr	r2, [r2, #8]
 80049f8:	0211      	lsls	r1, r2, #8
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6912      	ldr	r2, [r2, #16]
 80049fe:	0852      	lsrs	r2, r2, #1
 8004a00:	3a01      	subs	r2, #1
 8004a02:	0552      	lsls	r2, r2, #21
 8004a04:	430a      	orrs	r2, r1
 8004a06:	491f      	ldr	r1, [pc, #124]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	610b      	str	r3, [r1, #16]
 8004a0c:	e011      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0e:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	0211      	lsls	r1, r2, #8
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6952      	ldr	r2, [r2, #20]
 8004a24:	0852      	lsrs	r2, r2, #1
 8004a26:	3a01      	subs	r2, #1
 8004a28:	0652      	lsls	r2, r2, #25
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	4915      	ldr	r1, [pc, #84]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3e:	f7fc ff4f 	bl	80018e0 <HAL_GetTick>
 8004a42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a44:	e009      	b.n	8004a5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a46:	f7fc ff4b 	bl	80018e0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d902      	bls.n	8004a5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	73fb      	strb	r3, [r7, #15]
          break;
 8004a58:	e005      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0ef      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000

08004a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a96:	4b68      	ldr	r3, [pc, #416]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d018      	beq.n	8004ad4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0203 	and.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d10d      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aba:	4b5f      	ldr	r3, [pc, #380]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d044      	beq.n	8004b58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e041      	b.n	8004b58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d00c      	beq.n	8004af6 <RCCEx_PLLSAI2_Config+0x6e>
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d013      	beq.n	8004b08 <RCCEx_PLLSAI2_Config+0x80>
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d120      	bne.n	8004b26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae4:	4b54      	ldr	r3, [pc, #336]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e01a      	b.n	8004b2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af6:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b06:	e013      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b14:	4b48      	ldr	r3, [pc, #288]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b24:	e006      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2a:	e004      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b34:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	430b      	orrs	r3, r1
 8004b52:	4939      	ldr	r1, [pc, #228]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d167      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b5e:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fc feb9 	bl	80018e0 <HAL_GetTick>
 8004b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b70:	e009      	b.n	8004b86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b72:	f7fc feb5 	bl	80018e0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d902      	bls.n	8004b86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	73fb      	strb	r3, [r7, #15]
        break;
 8004b84:	e005      	b.n	8004b92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ef      	bne.n	8004b72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d14a      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d111      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6892      	ldr	r2, [r2, #8]
 8004bae:	0211      	lsls	r1, r2, #8
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68d2      	ldr	r2, [r2, #12]
 8004bb4:	0912      	lsrs	r2, r2, #4
 8004bb6:	0452      	lsls	r2, r2, #17
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	491f      	ldr	r1, [pc, #124]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	614b      	str	r3, [r1, #20]
 8004bc0:	e011      	b.n	8004be6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6892      	ldr	r2, [r2, #8]
 8004bd2:	0211      	lsls	r1, r2, #8
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6912      	ldr	r2, [r2, #16]
 8004bd8:	0852      	lsrs	r2, r2, #1
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	0652      	lsls	r2, r2, #25
 8004bde:	430a      	orrs	r2, r1
 8004be0:	4915      	ldr	r1, [pc, #84]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fc fe75 	bl	80018e0 <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf8:	e009      	b.n	8004c0e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bfa:	f7fc fe71 	bl	80018e0 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d902      	bls.n	8004c0e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	73fb      	strb	r3, [r7, #15]
          break;
 8004c0c:	e005      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ef      	beq.n	8004bfa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000

08004c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e049      	b.n	8004ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fca4 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 f958 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d001      	beq.n	8004d04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e047      	b.n	8004d94 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a23      	ldr	r2, [pc, #140]	; (8004da0 <HAL_TIM_Base_Start+0xb4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_TIM_Base_Start+0x66>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1e:	d018      	beq.n	8004d52 <HAL_TIM_Base_Start+0x66>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <HAL_TIM_Base_Start+0xb8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_TIM_Base_Start+0x66>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <HAL_TIM_Base_Start+0xbc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_TIM_Base_Start+0x66>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_TIM_Base_Start+0xc0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_TIM_Base_Start+0x66>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <HAL_TIM_Base_Start+0xc4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_TIM_Base_Start+0x66>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_TIM_Base_Start+0xc8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d115      	bne.n	8004d7e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_TIM_Base_Start+0xcc>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b06      	cmp	r3, #6
 8004d62:	d015      	beq.n	8004d90 <HAL_TIM_Base_Start+0xa4>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6a:	d011      	beq.n	8004d90 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	e008      	b.n	8004d90 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e000      	b.n	8004d92 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	00010007 	.word	0x00010007

08004dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_ConfigClockSource+0x18>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0a8      	b.n	8004f26 <HAL_TIM_ConfigClockSource+0x16a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d067      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x124>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d80b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x70>
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d073      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0x144>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d802      	bhi.n	8004e22 <HAL_TIM_ConfigClockSource+0x66>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d06f      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e20:	e078      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d06c      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0x144>
 8004e26:	2b30      	cmp	r3, #48	; 0x30
 8004e28:	d06a      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004e2a:	e073      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004e2c:	2b70      	cmp	r3, #112	; 0x70
 8004e2e:	d00d      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0x90>
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d804      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x82>
 8004e34:	2b50      	cmp	r3, #80	; 0x50
 8004e36:	d033      	beq.n	8004ea0 <HAL_TIM_ConfigClockSource+0xe4>
 8004e38:	2b60      	cmp	r3, #96	; 0x60
 8004e3a:	d041      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004e3c:	e06a      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d066      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x156>
 8004e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e48:	d017      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004e4a:	e063      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f000 f97c 	bl	8005158 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e04c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6899      	ldr	r1, [r3, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f000 f965 	bl	8005158 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e9c:	609a      	str	r2, [r3, #8]
      break;
 8004e9e:	e039      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	461a      	mov	r2, r3
 8004eae:	f000 f8d9 	bl	8005064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2150      	movs	r1, #80	; 0x50
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f932 	bl	8005122 <TIM_ITRx_SetConfig>
      break;
 8004ebe:	e029      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f000 f8f8 	bl	80050c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2160      	movs	r1, #96	; 0x60
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f922 	bl	8005122 <TIM_ITRx_SetConfig>
      break;
 8004ede:	e019      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	461a      	mov	r2, r3
 8004eee:	f000 f8b9 	bl	8005064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2140      	movs	r1, #64	; 0x40
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f912 	bl	8005122 <TIM_ITRx_SetConfig>
      break;
 8004efe:	e009      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f000 f909 	bl	8005122 <TIM_ITRx_SetConfig>
        break;
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a40      	ldr	r2, [pc, #256]	; (8005044 <TIM_Base_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d00f      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a3d      	ldr	r2, [pc, #244]	; (8005048 <TIM_Base_SetConfig+0x118>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a3c      	ldr	r2, [pc, #240]	; (800504c <TIM_Base_SetConfig+0x11c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a3b      	ldr	r2, [pc, #236]	; (8005050 <TIM_Base_SetConfig+0x120>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a3a      	ldr	r2, [pc, #232]	; (8005054 <TIM_Base_SetConfig+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d108      	bne.n	8004f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <TIM_Base_SetConfig+0x114>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	; (8005048 <TIM_Base_SetConfig+0x118>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	; (800504c <TIM_Base_SetConfig+0x11c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <TIM_Base_SetConfig+0x120>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a29      	ldr	r2, [pc, #164]	; (8005054 <TIM_Base_SetConfig+0x124>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a28      	ldr	r2, [pc, #160]	; (8005058 <TIM_Base_SetConfig+0x128>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a27      	ldr	r2, [pc, #156]	; (800505c <TIM_Base_SetConfig+0x12c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0x9a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <TIM_Base_SetConfig+0x130>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <TIM_Base_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00f      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a11      	ldr	r2, [pc, #68]	; (8005058 <TIM_Base_SetConfig+0x128>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a10      	ldr	r2, [pc, #64]	; (800505c <TIM_Base_SetConfig+0x12c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_Base_SetConfig+0xf8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <TIM_Base_SetConfig+0x130>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	615a      	str	r2, [r3, #20]
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40013400 	.word	0x40013400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 030a 	bic.w	r3, r3, #10
 80050a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b087      	sub	sp, #28
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0210 	bic.w	r2, r3, #16
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	031b      	lsls	r3, r3, #12
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	f043 0307 	orr.w	r3, r3, #7
 8005144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	431a      	orrs	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e068      	b.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2e      	ldr	r2, [pc, #184]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2d      	ldr	r2, [pc, #180]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d018      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40014000 	.word	0x40014000

080052a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e040      	b.n	800533c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc f990 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8c0 	bl	800546c <UART_SetConfig>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e022      	b.n	800533c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fb3e 	bl	8005980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fbc5 	bl	8005ac4 <UART_CheckIdleState>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005358:	2b20      	cmp	r3, #32
 800535a:	f040 8081 	bne.w	8005460 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Transmit+0x26>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e079      	b.n	8005462 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x38>
 8005378:	2302      	movs	r3, #2
 800537a:	e072      	b.n	8005462 <HAL_UART_Transmit+0x11e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2221      	movs	r2, #33	; 0x21
 800538e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005390:	f7fc faa6 	bl	80018e0 <HAL_GetTick>
 8005394:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d108      	bne.n	80053c2 <HAL_UART_Transmit+0x7e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e003      	b.n	80053ca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80053d2:	e02d      	b.n	8005430 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fbb5 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e039      	b.n	8005462 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005400:	b292      	uxth	r2, r2
 8005402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	3302      	adds	r3, #2
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e008      	b.n	800541e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b292      	uxth	r2, r2
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1cb      	bne.n	80053d4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fb81 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e005      	b.n	8005462 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005470:	b088      	sub	sp, #32
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	4313      	orrs	r3, r2
 8005490:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4bac      	ldr	r3, [pc, #688]	; (800574c <UART_SetConfig+0x2e0>)
 800549a:	4013      	ands	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	69f9      	ldr	r1, [r7, #28]
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4aa2      	ldr	r2, [pc, #648]	; (8005750 <UART_SetConfig+0x2e4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a99      	ldr	r2, [pc, #612]	; (8005754 <UART_SetConfig+0x2e8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d121      	bne.n	8005538 <UART_SetConfig+0xcc>
 80054f4:	4b98      	ldr	r3, [pc, #608]	; (8005758 <UART_SetConfig+0x2ec>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d816      	bhi.n	8005530 <UART_SetConfig+0xc4>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0x9c>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005519 	.word	0x08005519
 800550c:	08005525 	.word	0x08005525
 8005510:	0800551f 	.word	0x0800551f
 8005514:	0800552b 	.word	0x0800552b
 8005518:	2301      	movs	r3, #1
 800551a:	76fb      	strb	r3, [r7, #27]
 800551c:	e0e8      	b.n	80056f0 <UART_SetConfig+0x284>
 800551e:	2302      	movs	r3, #2
 8005520:	76fb      	strb	r3, [r7, #27]
 8005522:	e0e5      	b.n	80056f0 <UART_SetConfig+0x284>
 8005524:	2304      	movs	r3, #4
 8005526:	76fb      	strb	r3, [r7, #27]
 8005528:	e0e2      	b.n	80056f0 <UART_SetConfig+0x284>
 800552a:	2308      	movs	r3, #8
 800552c:	76fb      	strb	r3, [r7, #27]
 800552e:	e0df      	b.n	80056f0 <UART_SetConfig+0x284>
 8005530:	2310      	movs	r3, #16
 8005532:	76fb      	strb	r3, [r7, #27]
 8005534:	bf00      	nop
 8005536:	e0db      	b.n	80056f0 <UART_SetConfig+0x284>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a87      	ldr	r2, [pc, #540]	; (800575c <UART_SetConfig+0x2f0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d134      	bne.n	80055ac <UART_SetConfig+0x140>
 8005542:	4b85      	ldr	r3, [pc, #532]	; (8005758 <UART_SetConfig+0x2ec>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f003 030c 	and.w	r3, r3, #12
 800554c:	2b0c      	cmp	r3, #12
 800554e:	d829      	bhi.n	80055a4 <UART_SetConfig+0x138>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0xec>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800558d 	.word	0x0800558d
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	08005599 	.word	0x08005599
 800556c:	080055a5 	.word	0x080055a5
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055a5 	.word	0x080055a5
 8005578:	08005593 	.word	0x08005593
 800557c:	080055a5 	.word	0x080055a5
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055a5 	.word	0x080055a5
 8005588:	0800559f 	.word	0x0800559f
 800558c:	2300      	movs	r3, #0
 800558e:	76fb      	strb	r3, [r7, #27]
 8005590:	e0ae      	b.n	80056f0 <UART_SetConfig+0x284>
 8005592:	2302      	movs	r3, #2
 8005594:	76fb      	strb	r3, [r7, #27]
 8005596:	e0ab      	b.n	80056f0 <UART_SetConfig+0x284>
 8005598:	2304      	movs	r3, #4
 800559a:	76fb      	strb	r3, [r7, #27]
 800559c:	e0a8      	b.n	80056f0 <UART_SetConfig+0x284>
 800559e:	2308      	movs	r3, #8
 80055a0:	76fb      	strb	r3, [r7, #27]
 80055a2:	e0a5      	b.n	80056f0 <UART_SetConfig+0x284>
 80055a4:	2310      	movs	r3, #16
 80055a6:	76fb      	strb	r3, [r7, #27]
 80055a8:	bf00      	nop
 80055aa:	e0a1      	b.n	80056f0 <UART_SetConfig+0x284>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6b      	ldr	r2, [pc, #428]	; (8005760 <UART_SetConfig+0x2f4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d120      	bne.n	80055f8 <UART_SetConfig+0x18c>
 80055b6:	4b68      	ldr	r3, [pc, #416]	; (8005758 <UART_SetConfig+0x2ec>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d00f      	beq.n	80055e4 <UART_SetConfig+0x178>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d802      	bhi.n	80055ce <UART_SetConfig+0x162>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <UART_SetConfig+0x16c>
 80055cc:	e010      	b.n	80055f0 <UART_SetConfig+0x184>
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d005      	beq.n	80055de <UART_SetConfig+0x172>
 80055d2:	2b30      	cmp	r3, #48	; 0x30
 80055d4:	d009      	beq.n	80055ea <UART_SetConfig+0x17e>
 80055d6:	e00b      	b.n	80055f0 <UART_SetConfig+0x184>
 80055d8:	2300      	movs	r3, #0
 80055da:	76fb      	strb	r3, [r7, #27]
 80055dc:	e088      	b.n	80056f0 <UART_SetConfig+0x284>
 80055de:	2302      	movs	r3, #2
 80055e0:	76fb      	strb	r3, [r7, #27]
 80055e2:	e085      	b.n	80056f0 <UART_SetConfig+0x284>
 80055e4:	2304      	movs	r3, #4
 80055e6:	76fb      	strb	r3, [r7, #27]
 80055e8:	e082      	b.n	80056f0 <UART_SetConfig+0x284>
 80055ea:	2308      	movs	r3, #8
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e07f      	b.n	80056f0 <UART_SetConfig+0x284>
 80055f0:	2310      	movs	r3, #16
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	bf00      	nop
 80055f6:	e07b      	b.n	80056f0 <UART_SetConfig+0x284>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a59      	ldr	r2, [pc, #356]	; (8005764 <UART_SetConfig+0x2f8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d120      	bne.n	8005644 <UART_SetConfig+0x1d8>
 8005602:	4b55      	ldr	r3, [pc, #340]	; (8005758 <UART_SetConfig+0x2ec>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005608:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d00f      	beq.n	8005630 <UART_SetConfig+0x1c4>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d802      	bhi.n	800561a <UART_SetConfig+0x1ae>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <UART_SetConfig+0x1b8>
 8005618:	e010      	b.n	800563c <UART_SetConfig+0x1d0>
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d005      	beq.n	800562a <UART_SetConfig+0x1be>
 800561e:	2bc0      	cmp	r3, #192	; 0xc0
 8005620:	d009      	beq.n	8005636 <UART_SetConfig+0x1ca>
 8005622:	e00b      	b.n	800563c <UART_SetConfig+0x1d0>
 8005624:	2300      	movs	r3, #0
 8005626:	76fb      	strb	r3, [r7, #27]
 8005628:	e062      	b.n	80056f0 <UART_SetConfig+0x284>
 800562a:	2302      	movs	r3, #2
 800562c:	76fb      	strb	r3, [r7, #27]
 800562e:	e05f      	b.n	80056f0 <UART_SetConfig+0x284>
 8005630:	2304      	movs	r3, #4
 8005632:	76fb      	strb	r3, [r7, #27]
 8005634:	e05c      	b.n	80056f0 <UART_SetConfig+0x284>
 8005636:	2308      	movs	r3, #8
 8005638:	76fb      	strb	r3, [r7, #27]
 800563a:	e059      	b.n	80056f0 <UART_SetConfig+0x284>
 800563c:	2310      	movs	r3, #16
 800563e:	76fb      	strb	r3, [r7, #27]
 8005640:	bf00      	nop
 8005642:	e055      	b.n	80056f0 <UART_SetConfig+0x284>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a47      	ldr	r2, [pc, #284]	; (8005768 <UART_SetConfig+0x2fc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d124      	bne.n	8005698 <UART_SetConfig+0x22c>
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <UART_SetConfig+0x2ec>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565c:	d012      	beq.n	8005684 <UART_SetConfig+0x218>
 800565e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005662:	d802      	bhi.n	800566a <UART_SetConfig+0x1fe>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <UART_SetConfig+0x20c>
 8005668:	e012      	b.n	8005690 <UART_SetConfig+0x224>
 800566a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566e:	d006      	beq.n	800567e <UART_SetConfig+0x212>
 8005670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005674:	d009      	beq.n	800568a <UART_SetConfig+0x21e>
 8005676:	e00b      	b.n	8005690 <UART_SetConfig+0x224>
 8005678:	2300      	movs	r3, #0
 800567a:	76fb      	strb	r3, [r7, #27]
 800567c:	e038      	b.n	80056f0 <UART_SetConfig+0x284>
 800567e:	2302      	movs	r3, #2
 8005680:	76fb      	strb	r3, [r7, #27]
 8005682:	e035      	b.n	80056f0 <UART_SetConfig+0x284>
 8005684:	2304      	movs	r3, #4
 8005686:	76fb      	strb	r3, [r7, #27]
 8005688:	e032      	b.n	80056f0 <UART_SetConfig+0x284>
 800568a:	2308      	movs	r3, #8
 800568c:	76fb      	strb	r3, [r7, #27]
 800568e:	e02f      	b.n	80056f0 <UART_SetConfig+0x284>
 8005690:	2310      	movs	r3, #16
 8005692:	76fb      	strb	r3, [r7, #27]
 8005694:	bf00      	nop
 8005696:	e02b      	b.n	80056f0 <UART_SetConfig+0x284>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a2c      	ldr	r2, [pc, #176]	; (8005750 <UART_SetConfig+0x2e4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d124      	bne.n	80056ec <UART_SetConfig+0x280>
 80056a2:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <UART_SetConfig+0x2ec>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b0:	d012      	beq.n	80056d8 <UART_SetConfig+0x26c>
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b6:	d802      	bhi.n	80056be <UART_SetConfig+0x252>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <UART_SetConfig+0x260>
 80056bc:	e012      	b.n	80056e4 <UART_SetConfig+0x278>
 80056be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c2:	d006      	beq.n	80056d2 <UART_SetConfig+0x266>
 80056c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056c8:	d009      	beq.n	80056de <UART_SetConfig+0x272>
 80056ca:	e00b      	b.n	80056e4 <UART_SetConfig+0x278>
 80056cc:	2300      	movs	r3, #0
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	e00e      	b.n	80056f0 <UART_SetConfig+0x284>
 80056d2:	2302      	movs	r3, #2
 80056d4:	76fb      	strb	r3, [r7, #27]
 80056d6:	e00b      	b.n	80056f0 <UART_SetConfig+0x284>
 80056d8:	2304      	movs	r3, #4
 80056da:	76fb      	strb	r3, [r7, #27]
 80056dc:	e008      	b.n	80056f0 <UART_SetConfig+0x284>
 80056de:	2308      	movs	r3, #8
 80056e0:	76fb      	strb	r3, [r7, #27]
 80056e2:	e005      	b.n	80056f0 <UART_SetConfig+0x284>
 80056e4:	2310      	movs	r3, #16
 80056e6:	76fb      	strb	r3, [r7, #27]
 80056e8:	bf00      	nop
 80056ea:	e001      	b.n	80056f0 <UART_SetConfig+0x284>
 80056ec:	2310      	movs	r3, #16
 80056ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a16      	ldr	r2, [pc, #88]	; (8005750 <UART_SetConfig+0x2e4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f040 8087 	bne.w	800580a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056fc:	7efb      	ldrb	r3, [r7, #27]
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d836      	bhi.n	8005770 <UART_SetConfig+0x304>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x29c>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	0800572d 	.word	0x0800572d
 800570c:	08005771 	.word	0x08005771
 8005710:	08005735 	.word	0x08005735
 8005714:	08005771 	.word	0x08005771
 8005718:	0800573b 	.word	0x0800573b
 800571c:	08005771 	.word	0x08005771
 8005720:	08005771 	.word	0x08005771
 8005724:	08005771 	.word	0x08005771
 8005728:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7fe fd3a 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8005730:	6178      	str	r0, [r7, #20]
        break;
 8005732:	e022      	b.n	800577a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b0d      	ldr	r3, [pc, #52]	; (800576c <UART_SetConfig+0x300>)
 8005736:	617b      	str	r3, [r7, #20]
        break;
 8005738:	e01f      	b.n	800577a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fe fc9d 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800573e:	6178      	str	r0, [r7, #20]
        break;
 8005740:	e01b      	b.n	800577a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	617b      	str	r3, [r7, #20]
        break;
 8005748:	e017      	b.n	800577a <UART_SetConfig+0x30e>
 800574a:	bf00      	nop
 800574c:	efff69f3 	.word	0xefff69f3
 8005750:	40008000 	.word	0x40008000
 8005754:	40013800 	.word	0x40013800
 8005758:	40021000 	.word	0x40021000
 800575c:	40004400 	.word	0x40004400
 8005760:	40004800 	.word	0x40004800
 8005764:	40004c00 	.word	0x40004c00
 8005768:	40005000 	.word	0x40005000
 800576c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	76bb      	strb	r3, [r7, #26]
        break;
 8005778:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80f1 	beq.w	8005964 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	429a      	cmp	r2, r3
 8005790:	d305      	bcc.n	800579e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	429a      	cmp	r2, r3
 800579c:	d902      	bls.n	80057a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	76bb      	strb	r3, [r7, #26]
 80057a2:	e0df      	b.n	8005964 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4619      	mov	r1, r3
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	f04f 0400 	mov.w	r4, #0
 80057b4:	0214      	lsls	r4, r2, #8
 80057b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057ba:	020b      	lsls	r3, r1, #8
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6852      	ldr	r2, [r2, #4]
 80057c0:	0852      	lsrs	r2, r2, #1
 80057c2:	4611      	mov	r1, r2
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	eb13 0b01 	adds.w	fp, r3, r1
 80057cc:	eb44 0c02 	adc.w	ip, r4, r2
 80057d0:	4658      	mov	r0, fp
 80057d2:	4661      	mov	r1, ip
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f04f 0400 	mov.w	r4, #0
 80057dc:	461a      	mov	r2, r3
 80057de:	4623      	mov	r3, r4
 80057e0:	f7fb fa52 	bl	8000c88 <__aeabi_uldivmod>
 80057e4:	4603      	mov	r3, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f0:	d308      	bcc.n	8005804 <UART_SetConfig+0x398>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f8:	d204      	bcs.n	8005804 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	e0af      	b.n	8005964 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	76bb      	strb	r3, [r7, #26]
 8005808:	e0ac      	b.n	8005964 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005812:	d15b      	bne.n	80058cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005814:	7efb      	ldrb	r3, [r7, #27]
 8005816:	2b08      	cmp	r3, #8
 8005818:	d827      	bhi.n	800586a <UART_SetConfig+0x3fe>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x3b4>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005855 	.word	0x08005855
 800582c:	0800586b 	.word	0x0800586b
 8005830:	0800585b 	.word	0x0800585b
 8005834:	0800586b 	.word	0x0800586b
 8005838:	0800586b 	.word	0x0800586b
 800583c:	0800586b 	.word	0x0800586b
 8005840:	08005863 	.word	0x08005863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe fcae 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8005848:	6178      	str	r0, [r7, #20]
        break;
 800584a:	e013      	b.n	8005874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe fcc0 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8005850:	6178      	str	r0, [r7, #20]
        break;
 8005852:	e00f      	b.n	8005874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005854:	4b49      	ldr	r3, [pc, #292]	; (800597c <UART_SetConfig+0x510>)
 8005856:	617b      	str	r3, [r7, #20]
        break;
 8005858:	e00c      	b.n	8005874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585a:	f7fe fc0d 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800585e:	6178      	str	r0, [r7, #20]
        break;
 8005860:	e008      	b.n	8005874 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	617b      	str	r3, [r7, #20]
        break;
 8005868:	e004      	b.n	8005874 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	76bb      	strb	r3, [r7, #26]
        break;
 8005872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d074      	beq.n	8005964 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	005a      	lsls	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b0f      	cmp	r3, #15
 8005896:	d916      	bls.n	80058c6 <UART_SetConfig+0x45a>
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589e:	d212      	bcs.n	80058c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f023 030f 	bic.w	r3, r3, #15
 80058a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	89fb      	ldrh	r3, [r7, #14]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	89fa      	ldrh	r2, [r7, #14]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	e04e      	b.n	8005964 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	76bb      	strb	r3, [r7, #26]
 80058ca:	e04b      	b.n	8005964 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058cc:	7efb      	ldrb	r3, [r7, #27]
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d827      	bhi.n	8005922 <UART_SetConfig+0x4b6>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <UART_SetConfig+0x46c>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800590d 	.word	0x0800590d
 80058e4:	08005923 	.word	0x08005923
 80058e8:	08005913 	.word	0x08005913
 80058ec:	08005923 	.word	0x08005923
 80058f0:	08005923 	.word	0x08005923
 80058f4:	08005923 	.word	0x08005923
 80058f8:	0800591b 	.word	0x0800591b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7fe fc52 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8005900:	6178      	str	r0, [r7, #20]
        break;
 8005902:	e013      	b.n	800592c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005904:	f7fe fc64 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8005908:	6178      	str	r0, [r7, #20]
        break;
 800590a:	e00f      	b.n	800592c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800590c:	4b1b      	ldr	r3, [pc, #108]	; (800597c <UART_SetConfig+0x510>)
 800590e:	617b      	str	r3, [r7, #20]
        break;
 8005910:	e00c      	b.n	800592c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005912:	f7fe fbb1 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005916:	6178      	str	r0, [r7, #20]
        break;
 8005918:	e008      	b.n	800592c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591e:	617b      	str	r3, [r7, #20]
        break;
 8005920:	e004      	b.n	800592c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	76bb      	strb	r3, [r7, #26]
        break;
 800592a:	bf00      	nop
    }

    if (pclk != 0U)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d018      	beq.n	8005964 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	085a      	lsrs	r2, r3, #1
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	441a      	add	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	b29b      	uxth	r3, r3
 8005946:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b0f      	cmp	r3, #15
 800594c:	d908      	bls.n	8005960 <UART_SetConfig+0x4f4>
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d204      	bcs.n	8005960 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	e001      	b.n	8005964 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005970:	7ebb      	ldrb	r3, [r7, #26]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800597c:	00f42400 	.word	0x00f42400

08005980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d10a      	bne.n	8005a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ad2:	f7fb ff05 	bl	80018e0 <HAL_GetTick>
 8005ad6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d10e      	bne.n	8005b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f82a 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e020      	b.n	8005b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d10e      	bne.n	8005b30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f814 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e00a      	b.n	8005b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	e05d      	b.n	8005c1c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b66:	d059      	beq.n	8005c1c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b68:	f7fb feba 	bl	80018e0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11b      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e042      	b.n	8005c3c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02b      	beq.n	8005c1c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd2:	d123      	bne.n	8005c1c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e00f      	b.n	8005c3c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4013      	ands	r3, r2
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d092      	beq.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <__errno>:
 8005c44:	4b01      	ldr	r3, [pc, #4]	; (8005c4c <__errno+0x8>)
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	2000000c 	.word	0x2000000c

08005c50 <__libc_init_array>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4e0d      	ldr	r6, [pc, #52]	; (8005c88 <__libc_init_array+0x38>)
 8005c54:	4c0d      	ldr	r4, [pc, #52]	; (8005c8c <__libc_init_array+0x3c>)
 8005c56:	1ba4      	subs	r4, r4, r6
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	2500      	movs	r5, #0
 8005c5c:	42a5      	cmp	r5, r4
 8005c5e:	d109      	bne.n	8005c74 <__libc_init_array+0x24>
 8005c60:	4e0b      	ldr	r6, [pc, #44]	; (8005c90 <__libc_init_array+0x40>)
 8005c62:	4c0c      	ldr	r4, [pc, #48]	; (8005c94 <__libc_init_array+0x44>)
 8005c64:	f003 fd56 	bl	8009714 <_init>
 8005c68:	1ba4      	subs	r4, r4, r6
 8005c6a:	10a4      	asrs	r4, r4, #2
 8005c6c:	2500      	movs	r5, #0
 8005c6e:	42a5      	cmp	r5, r4
 8005c70:	d105      	bne.n	8005c7e <__libc_init_array+0x2e>
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c78:	4798      	blx	r3
 8005c7a:	3501      	adds	r5, #1
 8005c7c:	e7ee      	b.n	8005c5c <__libc_init_array+0xc>
 8005c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c82:	4798      	blx	r3
 8005c84:	3501      	adds	r5, #1
 8005c86:	e7f2      	b.n	8005c6e <__libc_init_array+0x1e>
 8005c88:	08009a60 	.word	0x08009a60
 8005c8c:	08009a60 	.word	0x08009a60
 8005c90:	08009a60 	.word	0x08009a60
 8005c94:	08009a64 	.word	0x08009a64

08005c98 <memset>:
 8005c98:	4402      	add	r2, r0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d100      	bne.n	8005ca2 <memset+0xa>
 8005ca0:	4770      	bx	lr
 8005ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca6:	e7f9      	b.n	8005c9c <memset+0x4>

08005ca8 <__cvt>:
 8005ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	ec55 4b10 	vmov	r4, r5, d0
 8005cb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005cb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	460e      	mov	r6, r1
 8005cba:	4691      	mov	r9, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	bfb8      	it	lt
 8005cc0:	4622      	movlt	r2, r4
 8005cc2:	462b      	mov	r3, r5
 8005cc4:	f027 0720 	bic.w	r7, r7, #32
 8005cc8:	bfbb      	ittet	lt
 8005cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cce:	461d      	movlt	r5, r3
 8005cd0:	2300      	movge	r3, #0
 8005cd2:	232d      	movlt	r3, #45	; 0x2d
 8005cd4:	bfb8      	it	lt
 8005cd6:	4614      	movlt	r4, r2
 8005cd8:	2f46      	cmp	r7, #70	; 0x46
 8005cda:	700b      	strb	r3, [r1, #0]
 8005cdc:	d004      	beq.n	8005ce8 <__cvt+0x40>
 8005cde:	2f45      	cmp	r7, #69	; 0x45
 8005ce0:	d100      	bne.n	8005ce4 <__cvt+0x3c>
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	2102      	movs	r1, #2
 8005ce6:	e000      	b.n	8005cea <__cvt+0x42>
 8005ce8:	2103      	movs	r1, #3
 8005cea:	ab03      	add	r3, sp, #12
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	ab02      	add	r3, sp, #8
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4653      	mov	r3, sl
 8005cf6:	ec45 4b10 	vmov	d0, r4, r5
 8005cfa:	f001 fd75 	bl	80077e8 <_dtoa_r>
 8005cfe:	2f47      	cmp	r7, #71	; 0x47
 8005d00:	4680      	mov	r8, r0
 8005d02:	d102      	bne.n	8005d0a <__cvt+0x62>
 8005d04:	f019 0f01 	tst.w	r9, #1
 8005d08:	d026      	beq.n	8005d58 <__cvt+0xb0>
 8005d0a:	2f46      	cmp	r7, #70	; 0x46
 8005d0c:	eb08 0906 	add.w	r9, r8, r6
 8005d10:	d111      	bne.n	8005d36 <__cvt+0x8e>
 8005d12:	f898 3000 	ldrb.w	r3, [r8]
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d10a      	bne.n	8005d30 <__cvt+0x88>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f7fa fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d26:	b918      	cbnz	r0, 8005d30 <__cvt+0x88>
 8005d28:	f1c6 0601 	rsb	r6, r6, #1
 8005d2c:	f8ca 6000 	str.w	r6, [sl]
 8005d30:	f8da 3000 	ldr.w	r3, [sl]
 8005d34:	4499      	add	r9, r3
 8005d36:	2200      	movs	r2, #0
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7fa fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d42:	b938      	cbnz	r0, 8005d54 <__cvt+0xac>
 8005d44:	2230      	movs	r2, #48	; 0x30
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	454b      	cmp	r3, r9
 8005d4a:	d205      	bcs.n	8005d58 <__cvt+0xb0>
 8005d4c:	1c59      	adds	r1, r3, #1
 8005d4e:	9103      	str	r1, [sp, #12]
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e7f8      	b.n	8005d46 <__cvt+0x9e>
 8005d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d5c:	eba3 0308 	sub.w	r3, r3, r8
 8005d60:	4640      	mov	r0, r8
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	b004      	add	sp, #16
 8005d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d6a <__exponent>:
 8005d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	bfba      	itte	lt
 8005d72:	4249      	neglt	r1, r1
 8005d74:	232d      	movlt	r3, #45	; 0x2d
 8005d76:	232b      	movge	r3, #43	; 0x2b
 8005d78:	2909      	cmp	r1, #9
 8005d7a:	f804 2b02 	strb.w	r2, [r4], #2
 8005d7e:	7043      	strb	r3, [r0, #1]
 8005d80:	dd20      	ble.n	8005dc4 <__exponent+0x5a>
 8005d82:	f10d 0307 	add.w	r3, sp, #7
 8005d86:	461f      	mov	r7, r3
 8005d88:	260a      	movs	r6, #10
 8005d8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d8e:	fb06 1115 	mls	r1, r6, r5, r1
 8005d92:	3130      	adds	r1, #48	; 0x30
 8005d94:	2d09      	cmp	r5, #9
 8005d96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d9a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005d9e:	4629      	mov	r1, r5
 8005da0:	dc09      	bgt.n	8005db6 <__exponent+0x4c>
 8005da2:	3130      	adds	r1, #48	; 0x30
 8005da4:	3b02      	subs	r3, #2
 8005da6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005daa:	42bb      	cmp	r3, r7
 8005dac:	4622      	mov	r2, r4
 8005dae:	d304      	bcc.n	8005dba <__exponent+0x50>
 8005db0:	1a10      	subs	r0, r2, r0
 8005db2:	b003      	add	sp, #12
 8005db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db6:	4613      	mov	r3, r2
 8005db8:	e7e7      	b.n	8005d8a <__exponent+0x20>
 8005dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dbe:	f804 2b01 	strb.w	r2, [r4], #1
 8005dc2:	e7f2      	b.n	8005daa <__exponent+0x40>
 8005dc4:	2330      	movs	r3, #48	; 0x30
 8005dc6:	4419      	add	r1, r3
 8005dc8:	7083      	strb	r3, [r0, #2]
 8005dca:	1d02      	adds	r2, r0, #4
 8005dcc:	70c1      	strb	r1, [r0, #3]
 8005dce:	e7ef      	b.n	8005db0 <__exponent+0x46>

08005dd0 <_printf_float>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	b08d      	sub	sp, #52	; 0x34
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005ddc:	4616      	mov	r6, r2
 8005dde:	461f      	mov	r7, r3
 8005de0:	4605      	mov	r5, r0
 8005de2:	f002 fde5 	bl	80089b0 <_localeconv_r>
 8005de6:	6803      	ldr	r3, [r0, #0]
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fa f9f0 	bl	80001d0 <strlen>
 8005df0:	2300      	movs	r3, #0
 8005df2:	930a      	str	r3, [sp, #40]	; 0x28
 8005df4:	f8d8 3000 	ldr.w	r3, [r8]
 8005df8:	9005      	str	r0, [sp, #20]
 8005dfa:	3307      	adds	r3, #7
 8005dfc:	f023 0307 	bic.w	r3, r3, #7
 8005e00:	f103 0208 	add.w	r2, r3, #8
 8005e04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e08:	f8d4 b000 	ldr.w	fp, [r4]
 8005e0c:	f8c8 2000 	str.w	r2, [r8]
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e20:	9307      	str	r3, [sp, #28]
 8005e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e2a:	4ba7      	ldr	r3, [pc, #668]	; (80060c8 <_printf_float+0x2f8>)
 8005e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e30:	f7fa fe7c 	bl	8000b2c <__aeabi_dcmpun>
 8005e34:	bb70      	cbnz	r0, 8005e94 <_printf_float+0xc4>
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e3a:	4ba3      	ldr	r3, [pc, #652]	; (80060c8 <_printf_float+0x2f8>)
 8005e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e40:	f7fa fe56 	bl	8000af0 <__aeabi_dcmple>
 8005e44:	bb30      	cbnz	r0, 8005e94 <_printf_float+0xc4>
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa fe45 	bl	8000adc <__aeabi_dcmplt>
 8005e52:	b110      	cbz	r0, 8005e5a <_printf_float+0x8a>
 8005e54:	232d      	movs	r3, #45	; 0x2d
 8005e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5a:	4a9c      	ldr	r2, [pc, #624]	; (80060cc <_printf_float+0x2fc>)
 8005e5c:	4b9c      	ldr	r3, [pc, #624]	; (80060d0 <_printf_float+0x300>)
 8005e5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005e62:	bf8c      	ite	hi
 8005e64:	4690      	movhi	r8, r2
 8005e66:	4698      	movls	r8, r3
 8005e68:	2303      	movs	r3, #3
 8005e6a:	f02b 0204 	bic.w	r2, fp, #4
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	6022      	str	r2, [r4, #0]
 8005e72:	f04f 0900 	mov.w	r9, #0
 8005e76:	9700      	str	r7, [sp, #0]
 8005e78:	4633      	mov	r3, r6
 8005e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 f9e6 	bl	8006250 <_printf_common>
 8005e84:	3001      	adds	r0, #1
 8005e86:	f040 808d 	bne.w	8005fa4 <_printf_float+0x1d4>
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e8e:	b00d      	add	sp, #52	; 0x34
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	4642      	mov	r2, r8
 8005e96:	464b      	mov	r3, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa fe46 	bl	8000b2c <__aeabi_dcmpun>
 8005ea0:	b110      	cbz	r0, 8005ea8 <_printf_float+0xd8>
 8005ea2:	4a8c      	ldr	r2, [pc, #560]	; (80060d4 <_printf_float+0x304>)
 8005ea4:	4b8c      	ldr	r3, [pc, #560]	; (80060d8 <_printf_float+0x308>)
 8005ea6:	e7da      	b.n	8005e5e <_printf_float+0x8e>
 8005ea8:	6861      	ldr	r1, [r4, #4]
 8005eaa:	1c4b      	adds	r3, r1, #1
 8005eac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005eb0:	a80a      	add	r0, sp, #40	; 0x28
 8005eb2:	d13e      	bne.n	8005f32 <_printf_float+0x162>
 8005eb4:	2306      	movs	r3, #6
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ebe:	ab09      	add	r3, sp, #36	; 0x24
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	ec49 8b10 	vmov	d0, r8, r9
 8005ec6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005eca:	6022      	str	r2, [r4, #0]
 8005ecc:	f8cd a004 	str.w	sl, [sp, #4]
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff fee8 	bl	8005ca8 <__cvt>
 8005ed8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005edc:	2b47      	cmp	r3, #71	; 0x47
 8005ede:	4680      	mov	r8, r0
 8005ee0:	d109      	bne.n	8005ef6 <_printf_float+0x126>
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	1cd8      	adds	r0, r3, #3
 8005ee6:	db02      	blt.n	8005eee <_printf_float+0x11e>
 8005ee8:	6862      	ldr	r2, [r4, #4]
 8005eea:	4293      	cmp	r3, r2
 8005eec:	dd47      	ble.n	8005f7e <_printf_float+0x1ae>
 8005eee:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ef2:	fa5f fa8a 	uxtb.w	sl, sl
 8005ef6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005efc:	d824      	bhi.n	8005f48 <_printf_float+0x178>
 8005efe:	3901      	subs	r1, #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f06:	9109      	str	r1, [sp, #36]	; 0x24
 8005f08:	f7ff ff2f 	bl	8005d6a <__exponent>
 8005f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f0e:	1813      	adds	r3, r2, r0
 8005f10:	2a01      	cmp	r2, #1
 8005f12:	4681      	mov	r9, r0
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	dc02      	bgt.n	8005f1e <_printf_float+0x14e>
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	07d1      	lsls	r1, r2, #31
 8005f1c:	d501      	bpl.n	8005f22 <_printf_float+0x152>
 8005f1e:	3301      	adds	r3, #1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0a5      	beq.n	8005e76 <_printf_float+0xa6>
 8005f2a:	232d      	movs	r3, #45	; 0x2d
 8005f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f30:	e7a1      	b.n	8005e76 <_printf_float+0xa6>
 8005f32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005f36:	f000 8177 	beq.w	8006228 <_printf_float+0x458>
 8005f3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005f3e:	d1bb      	bne.n	8005eb8 <_printf_float+0xe8>
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d1b9      	bne.n	8005eb8 <_printf_float+0xe8>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e7b6      	b.n	8005eb6 <_printf_float+0xe6>
 8005f48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005f4c:	d119      	bne.n	8005f82 <_printf_float+0x1b2>
 8005f4e:	2900      	cmp	r1, #0
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	dd0c      	ble.n	8005f6e <_printf_float+0x19e>
 8005f54:	6121      	str	r1, [r4, #16]
 8005f56:	b913      	cbnz	r3, 8005f5e <_printf_float+0x18e>
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	07d2      	lsls	r2, r2, #31
 8005f5c:	d502      	bpl.n	8005f64 <_printf_float+0x194>
 8005f5e:	3301      	adds	r3, #1
 8005f60:	440b      	add	r3, r1
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f66:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f68:	f04f 0900 	mov.w	r9, #0
 8005f6c:	e7d9      	b.n	8005f22 <_printf_float+0x152>
 8005f6e:	b913      	cbnz	r3, 8005f76 <_printf_float+0x1a6>
 8005f70:	6822      	ldr	r2, [r4, #0]
 8005f72:	07d0      	lsls	r0, r2, #31
 8005f74:	d501      	bpl.n	8005f7a <_printf_float+0x1aa>
 8005f76:	3302      	adds	r3, #2
 8005f78:	e7f3      	b.n	8005f62 <_printf_float+0x192>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e7f1      	b.n	8005f62 <_printf_float+0x192>
 8005f7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005f82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f86:	4293      	cmp	r3, r2
 8005f88:	db05      	blt.n	8005f96 <_printf_float+0x1c6>
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	07d1      	lsls	r1, r2, #31
 8005f90:	d5e8      	bpl.n	8005f64 <_printf_float+0x194>
 8005f92:	3301      	adds	r3, #1
 8005f94:	e7e5      	b.n	8005f62 <_printf_float+0x192>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bfd4      	ite	le
 8005f9a:	f1c3 0302 	rsble	r3, r3, #2
 8005f9e:	2301      	movgt	r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	e7de      	b.n	8005f62 <_printf_float+0x192>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	055a      	lsls	r2, r3, #21
 8005fa8:	d407      	bmi.n	8005fba <_printf_float+0x1ea>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	4642      	mov	r2, r8
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d12b      	bne.n	8006010 <_printf_float+0x240>
 8005fb8:	e767      	b.n	8005e8a <_printf_float+0xba>
 8005fba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005fbe:	f240 80dc 	bls.w	800617a <_printf_float+0x3aa>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fca:	f7fa fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d033      	beq.n	800603a <_printf_float+0x26a>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4a41      	ldr	r2, [pc, #260]	; (80060dc <_printf_float+0x30c>)
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f43f af54 	beq.w	8005e8a <_printf_float+0xba>
 8005fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	db02      	blt.n	8005ff0 <_printf_float+0x220>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	07d8      	lsls	r0, r3, #31
 8005fee:	d50f      	bpl.n	8006010 <_printf_float+0x240>
 8005ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	f43f af45 	beq.w	8005e8a <_printf_float+0xba>
 8006000:	f04f 0800 	mov.w	r8, #0
 8006004:	f104 091a 	add.w	r9, r4, #26
 8006008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600a:	3b01      	subs	r3, #1
 800600c:	4543      	cmp	r3, r8
 800600e:	dc09      	bgt.n	8006024 <_printf_float+0x254>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	079b      	lsls	r3, r3, #30
 8006014:	f100 8103 	bmi.w	800621e <_printf_float+0x44e>
 8006018:	68e0      	ldr	r0, [r4, #12]
 800601a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800601c:	4298      	cmp	r0, r3
 800601e:	bfb8      	it	lt
 8006020:	4618      	movlt	r0, r3
 8006022:	e734      	b.n	8005e8e <_printf_float+0xbe>
 8006024:	2301      	movs	r3, #1
 8006026:	464a      	mov	r2, r9
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f af2b 	beq.w	8005e8a <_printf_float+0xba>
 8006034:	f108 0801 	add.w	r8, r8, #1
 8006038:	e7e6      	b.n	8006008 <_printf_float+0x238>
 800603a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	dc2b      	bgt.n	8006098 <_printf_float+0x2c8>
 8006040:	2301      	movs	r3, #1
 8006042:	4a26      	ldr	r2, [pc, #152]	; (80060dc <_printf_float+0x30c>)
 8006044:	4631      	mov	r1, r6
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	f43f af1d 	beq.w	8005e8a <_printf_float+0xba>
 8006050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006052:	b923      	cbnz	r3, 800605e <_printf_float+0x28e>
 8006054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006056:	b913      	cbnz	r3, 800605e <_printf_float+0x28e>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	07d9      	lsls	r1, r3, #31
 800605c:	d5d8      	bpl.n	8006010 <_printf_float+0x240>
 800605e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f af0e 	beq.w	8005e8a <_printf_float+0xba>
 800606e:	f04f 0900 	mov.w	r9, #0
 8006072:	f104 0a1a 	add.w	sl, r4, #26
 8006076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006078:	425b      	negs	r3, r3
 800607a:	454b      	cmp	r3, r9
 800607c:	dc01      	bgt.n	8006082 <_printf_float+0x2b2>
 800607e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006080:	e794      	b.n	8005fac <_printf_float+0x1dc>
 8006082:	2301      	movs	r3, #1
 8006084:	4652      	mov	r2, sl
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	47b8      	blx	r7
 800608c:	3001      	adds	r0, #1
 800608e:	f43f aefc 	beq.w	8005e8a <_printf_float+0xba>
 8006092:	f109 0901 	add.w	r9, r9, #1
 8006096:	e7ee      	b.n	8006076 <_printf_float+0x2a6>
 8006098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800609a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800609c:	429a      	cmp	r2, r3
 800609e:	bfa8      	it	ge
 80060a0:	461a      	movge	r2, r3
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	4691      	mov	r9, r2
 80060a6:	dd07      	ble.n	80060b8 <_printf_float+0x2e8>
 80060a8:	4613      	mov	r3, r2
 80060aa:	4631      	mov	r1, r6
 80060ac:	4642      	mov	r2, r8
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f aee9 	beq.w	8005e8a <_printf_float+0xba>
 80060b8:	f104 031a 	add.w	r3, r4, #26
 80060bc:	f04f 0b00 	mov.w	fp, #0
 80060c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c4:	9306      	str	r3, [sp, #24]
 80060c6:	e015      	b.n	80060f4 <_printf_float+0x324>
 80060c8:	7fefffff 	.word	0x7fefffff
 80060cc:	080097a8 	.word	0x080097a8
 80060d0:	080097a4 	.word	0x080097a4
 80060d4:	080097b0 	.word	0x080097b0
 80060d8:	080097ac 	.word	0x080097ac
 80060dc:	080097b4 	.word	0x080097b4
 80060e0:	2301      	movs	r3, #1
 80060e2:	9a06      	ldr	r2, [sp, #24]
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f aecd 	beq.w	8005e8a <_printf_float+0xba>
 80060f0:	f10b 0b01 	add.w	fp, fp, #1
 80060f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060f8:	ebaa 0309 	sub.w	r3, sl, r9
 80060fc:	455b      	cmp	r3, fp
 80060fe:	dcef      	bgt.n	80060e0 <_printf_float+0x310>
 8006100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006104:	429a      	cmp	r2, r3
 8006106:	44d0      	add	r8, sl
 8006108:	db15      	blt.n	8006136 <_printf_float+0x366>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	07da      	lsls	r2, r3, #31
 800610e:	d412      	bmi.n	8006136 <_printf_float+0x366>
 8006110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006114:	eba3 020a 	sub.w	r2, r3, sl
 8006118:	eba3 0a01 	sub.w	sl, r3, r1
 800611c:	4592      	cmp	sl, r2
 800611e:	bfa8      	it	ge
 8006120:	4692      	movge	sl, r2
 8006122:	f1ba 0f00 	cmp.w	sl, #0
 8006126:	dc0e      	bgt.n	8006146 <_printf_float+0x376>
 8006128:	f04f 0800 	mov.w	r8, #0
 800612c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006130:	f104 091a 	add.w	r9, r4, #26
 8006134:	e019      	b.n	800616a <_printf_float+0x39a>
 8006136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	d1e5      	bne.n	8006110 <_printf_float+0x340>
 8006144:	e6a1      	b.n	8005e8a <_printf_float+0xba>
 8006146:	4653      	mov	r3, sl
 8006148:	4642      	mov	r2, r8
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	d1e9      	bne.n	8006128 <_printf_float+0x358>
 8006154:	e699      	b.n	8005e8a <_printf_float+0xba>
 8006156:	2301      	movs	r3, #1
 8006158:	464a      	mov	r2, r9
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f ae92 	beq.w	8005e8a <_printf_float+0xba>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	eba3 030a 	sub.w	r3, r3, sl
 8006174:	4543      	cmp	r3, r8
 8006176:	dcee      	bgt.n	8006156 <_printf_float+0x386>
 8006178:	e74a      	b.n	8006010 <_printf_float+0x240>
 800617a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617c:	2a01      	cmp	r2, #1
 800617e:	dc01      	bgt.n	8006184 <_printf_float+0x3b4>
 8006180:	07db      	lsls	r3, r3, #31
 8006182:	d53a      	bpl.n	80061fa <_printf_float+0x42a>
 8006184:	2301      	movs	r3, #1
 8006186:	4642      	mov	r2, r8
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	f43f ae7b 	beq.w	8005e8a <_printf_float+0xba>
 8006194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f108 0801 	add.w	r8, r8, #1
 80061a4:	f43f ae71 	beq.w	8005e8a <_printf_float+0xba>
 80061a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061aa:	2200      	movs	r2, #0
 80061ac:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80061b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061b4:	2300      	movs	r3, #0
 80061b6:	f7fa fc87 	bl	8000ac8 <__aeabi_dcmpeq>
 80061ba:	b9c8      	cbnz	r0, 80061f0 <_printf_float+0x420>
 80061bc:	4653      	mov	r3, sl
 80061be:	4642      	mov	r2, r8
 80061c0:	4631      	mov	r1, r6
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b8      	blx	r7
 80061c6:	3001      	adds	r0, #1
 80061c8:	d10e      	bne.n	80061e8 <_printf_float+0x418>
 80061ca:	e65e      	b.n	8005e8a <_printf_float+0xba>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4652      	mov	r2, sl
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	f43f ae57 	beq.w	8005e8a <_printf_float+0xba>
 80061dc:	f108 0801 	add.w	r8, r8, #1
 80061e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e2:	3b01      	subs	r3, #1
 80061e4:	4543      	cmp	r3, r8
 80061e6:	dcf1      	bgt.n	80061cc <_printf_float+0x3fc>
 80061e8:	464b      	mov	r3, r9
 80061ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061ee:	e6de      	b.n	8005fae <_printf_float+0x1de>
 80061f0:	f04f 0800 	mov.w	r8, #0
 80061f4:	f104 0a1a 	add.w	sl, r4, #26
 80061f8:	e7f2      	b.n	80061e0 <_printf_float+0x410>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7df      	b.n	80061be <_printf_float+0x3ee>
 80061fe:	2301      	movs	r3, #1
 8006200:	464a      	mov	r2, r9
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f ae3e 	beq.w	8005e8a <_printf_float+0xba>
 800620e:	f108 0801 	add.w	r8, r8, #1
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	4543      	cmp	r3, r8
 800621a:	dcf0      	bgt.n	80061fe <_printf_float+0x42e>
 800621c:	e6fc      	b.n	8006018 <_printf_float+0x248>
 800621e:	f04f 0800 	mov.w	r8, #0
 8006222:	f104 0919 	add.w	r9, r4, #25
 8006226:	e7f4      	b.n	8006212 <_printf_float+0x442>
 8006228:	2900      	cmp	r1, #0
 800622a:	f43f ae8b 	beq.w	8005f44 <_printf_float+0x174>
 800622e:	2300      	movs	r3, #0
 8006230:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006234:	ab09      	add	r3, sp, #36	; 0x24
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	ec49 8b10 	vmov	d0, r8, r9
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	f8cd a004 	str.w	sl, [sp, #4]
 8006242:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff fd2e 	bl	8005ca8 <__cvt>
 800624c:	4680      	mov	r8, r0
 800624e:	e648      	b.n	8005ee2 <_printf_float+0x112>

08006250 <_printf_common>:
 8006250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006254:	4691      	mov	r9, r2
 8006256:	461f      	mov	r7, r3
 8006258:	688a      	ldr	r2, [r1, #8]
 800625a:	690b      	ldr	r3, [r1, #16]
 800625c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006260:	4293      	cmp	r3, r2
 8006262:	bfb8      	it	lt
 8006264:	4613      	movlt	r3, r2
 8006266:	f8c9 3000 	str.w	r3, [r9]
 800626a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800626e:	4606      	mov	r6, r0
 8006270:	460c      	mov	r4, r1
 8006272:	b112      	cbz	r2, 800627a <_printf_common+0x2a>
 8006274:	3301      	adds	r3, #1
 8006276:	f8c9 3000 	str.w	r3, [r9]
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	0699      	lsls	r1, r3, #26
 800627e:	bf42      	ittt	mi
 8006280:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006284:	3302      	addmi	r3, #2
 8006286:	f8c9 3000 	strmi.w	r3, [r9]
 800628a:	6825      	ldr	r5, [r4, #0]
 800628c:	f015 0506 	ands.w	r5, r5, #6
 8006290:	d107      	bne.n	80062a2 <_printf_common+0x52>
 8006292:	f104 0a19 	add.w	sl, r4, #25
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	f8d9 2000 	ldr.w	r2, [r9]
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	42ab      	cmp	r3, r5
 80062a0:	dc28      	bgt.n	80062f4 <_printf_common+0xa4>
 80062a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	3300      	adds	r3, #0
 80062aa:	bf18      	it	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	0692      	lsls	r2, r2, #26
 80062b0:	d42d      	bmi.n	800630e <_printf_common+0xbe>
 80062b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b6:	4639      	mov	r1, r7
 80062b8:	4630      	mov	r0, r6
 80062ba:	47c0      	blx	r8
 80062bc:	3001      	adds	r0, #1
 80062be:	d020      	beq.n	8006302 <_printf_common+0xb2>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	68e5      	ldr	r5, [r4, #12]
 80062c4:	f8d9 2000 	ldr.w	r2, [r9]
 80062c8:	f003 0306 	and.w	r3, r3, #6
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	bf08      	it	eq
 80062d0:	1aad      	subeq	r5, r5, r2
 80062d2:	68a3      	ldr	r3, [r4, #8]
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	bf0c      	ite	eq
 80062d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062dc:	2500      	movne	r5, #0
 80062de:	4293      	cmp	r3, r2
 80062e0:	bfc4      	itt	gt
 80062e2:	1a9b      	subgt	r3, r3, r2
 80062e4:	18ed      	addgt	r5, r5, r3
 80062e6:	f04f 0900 	mov.w	r9, #0
 80062ea:	341a      	adds	r4, #26
 80062ec:	454d      	cmp	r5, r9
 80062ee:	d11a      	bne.n	8006326 <_printf_common+0xd6>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e008      	b.n	8006306 <_printf_common+0xb6>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4652      	mov	r2, sl
 80062f8:	4639      	mov	r1, r7
 80062fa:	4630      	mov	r0, r6
 80062fc:	47c0      	blx	r8
 80062fe:	3001      	adds	r0, #1
 8006300:	d103      	bne.n	800630a <_printf_common+0xba>
 8006302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	3501      	adds	r5, #1
 800630c:	e7c3      	b.n	8006296 <_printf_common+0x46>
 800630e:	18e1      	adds	r1, r4, r3
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	2030      	movs	r0, #48	; 0x30
 8006314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006318:	4422      	add	r2, r4
 800631a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800631e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006322:	3302      	adds	r3, #2
 8006324:	e7c5      	b.n	80062b2 <_printf_common+0x62>
 8006326:	2301      	movs	r3, #1
 8006328:	4622      	mov	r2, r4
 800632a:	4639      	mov	r1, r7
 800632c:	4630      	mov	r0, r6
 800632e:	47c0      	blx	r8
 8006330:	3001      	adds	r0, #1
 8006332:	d0e6      	beq.n	8006302 <_printf_common+0xb2>
 8006334:	f109 0901 	add.w	r9, r9, #1
 8006338:	e7d8      	b.n	80062ec <_printf_common+0x9c>
	...

0800633c <_printf_i>:
 800633c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006340:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006344:	460c      	mov	r4, r1
 8006346:	7e09      	ldrb	r1, [r1, #24]
 8006348:	b085      	sub	sp, #20
 800634a:	296e      	cmp	r1, #110	; 0x6e
 800634c:	4617      	mov	r7, r2
 800634e:	4606      	mov	r6, r0
 8006350:	4698      	mov	r8, r3
 8006352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006354:	f000 80b3 	beq.w	80064be <_printf_i+0x182>
 8006358:	d822      	bhi.n	80063a0 <_printf_i+0x64>
 800635a:	2963      	cmp	r1, #99	; 0x63
 800635c:	d036      	beq.n	80063cc <_printf_i+0x90>
 800635e:	d80a      	bhi.n	8006376 <_printf_i+0x3a>
 8006360:	2900      	cmp	r1, #0
 8006362:	f000 80b9 	beq.w	80064d8 <_printf_i+0x19c>
 8006366:	2958      	cmp	r1, #88	; 0x58
 8006368:	f000 8083 	beq.w	8006472 <_printf_i+0x136>
 800636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006370:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006374:	e032      	b.n	80063dc <_printf_i+0xa0>
 8006376:	2964      	cmp	r1, #100	; 0x64
 8006378:	d001      	beq.n	800637e <_printf_i+0x42>
 800637a:	2969      	cmp	r1, #105	; 0x69
 800637c:	d1f6      	bne.n	800636c <_printf_i+0x30>
 800637e:	6820      	ldr	r0, [r4, #0]
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	0605      	lsls	r5, r0, #24
 8006384:	f103 0104 	add.w	r1, r3, #4
 8006388:	d52a      	bpl.n	80063e0 <_printf_i+0xa4>
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6011      	str	r1, [r2, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da03      	bge.n	800639a <_printf_i+0x5e>
 8006392:	222d      	movs	r2, #45	; 0x2d
 8006394:	425b      	negs	r3, r3
 8006396:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800639a:	486f      	ldr	r0, [pc, #444]	; (8006558 <_printf_i+0x21c>)
 800639c:	220a      	movs	r2, #10
 800639e:	e039      	b.n	8006414 <_printf_i+0xd8>
 80063a0:	2973      	cmp	r1, #115	; 0x73
 80063a2:	f000 809d 	beq.w	80064e0 <_printf_i+0x1a4>
 80063a6:	d808      	bhi.n	80063ba <_printf_i+0x7e>
 80063a8:	296f      	cmp	r1, #111	; 0x6f
 80063aa:	d020      	beq.n	80063ee <_printf_i+0xb2>
 80063ac:	2970      	cmp	r1, #112	; 0x70
 80063ae:	d1dd      	bne.n	800636c <_printf_i+0x30>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	f043 0320 	orr.w	r3, r3, #32
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	e003      	b.n	80063c2 <_printf_i+0x86>
 80063ba:	2975      	cmp	r1, #117	; 0x75
 80063bc:	d017      	beq.n	80063ee <_printf_i+0xb2>
 80063be:	2978      	cmp	r1, #120	; 0x78
 80063c0:	d1d4      	bne.n	800636c <_printf_i+0x30>
 80063c2:	2378      	movs	r3, #120	; 0x78
 80063c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063c8:	4864      	ldr	r0, [pc, #400]	; (800655c <_printf_i+0x220>)
 80063ca:	e055      	b.n	8006478 <_printf_i+0x13c>
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	1d19      	adds	r1, r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6011      	str	r1, [r2, #0]
 80063d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063dc:	2301      	movs	r3, #1
 80063de:	e08c      	b.n	80064fa <_printf_i+0x1be>
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6011      	str	r1, [r2, #0]
 80063e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063e8:	bf18      	it	ne
 80063ea:	b21b      	sxthne	r3, r3
 80063ec:	e7cf      	b.n	800638e <_printf_i+0x52>
 80063ee:	6813      	ldr	r3, [r2, #0]
 80063f0:	6825      	ldr	r5, [r4, #0]
 80063f2:	1d18      	adds	r0, r3, #4
 80063f4:	6010      	str	r0, [r2, #0]
 80063f6:	0628      	lsls	r0, r5, #24
 80063f8:	d501      	bpl.n	80063fe <_printf_i+0xc2>
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	e002      	b.n	8006404 <_printf_i+0xc8>
 80063fe:	0668      	lsls	r0, r5, #25
 8006400:	d5fb      	bpl.n	80063fa <_printf_i+0xbe>
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	4854      	ldr	r0, [pc, #336]	; (8006558 <_printf_i+0x21c>)
 8006406:	296f      	cmp	r1, #111	; 0x6f
 8006408:	bf14      	ite	ne
 800640a:	220a      	movne	r2, #10
 800640c:	2208      	moveq	r2, #8
 800640e:	2100      	movs	r1, #0
 8006410:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006414:	6865      	ldr	r5, [r4, #4]
 8006416:	60a5      	str	r5, [r4, #8]
 8006418:	2d00      	cmp	r5, #0
 800641a:	f2c0 8095 	blt.w	8006548 <_printf_i+0x20c>
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	f021 0104 	bic.w	r1, r1, #4
 8006424:	6021      	str	r1, [r4, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d13d      	bne.n	80064a6 <_printf_i+0x16a>
 800642a:	2d00      	cmp	r5, #0
 800642c:	f040 808e 	bne.w	800654c <_printf_i+0x210>
 8006430:	4665      	mov	r5, ip
 8006432:	2a08      	cmp	r2, #8
 8006434:	d10b      	bne.n	800644e <_printf_i+0x112>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	07db      	lsls	r3, r3, #31
 800643a:	d508      	bpl.n	800644e <_printf_i+0x112>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	6862      	ldr	r2, [r4, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	bfde      	ittt	le
 8006444:	2330      	movle	r3, #48	; 0x30
 8006446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800644a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800644e:	ebac 0305 	sub.w	r3, ip, r5
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	f8cd 8000 	str.w	r8, [sp]
 8006458:	463b      	mov	r3, r7
 800645a:	aa03      	add	r2, sp, #12
 800645c:	4621      	mov	r1, r4
 800645e:	4630      	mov	r0, r6
 8006460:	f7ff fef6 	bl	8006250 <_printf_common>
 8006464:	3001      	adds	r0, #1
 8006466:	d14d      	bne.n	8006504 <_printf_i+0x1c8>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800646c:	b005      	add	sp, #20
 800646e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006472:	4839      	ldr	r0, [pc, #228]	; (8006558 <_printf_i+0x21c>)
 8006474:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006478:	6813      	ldr	r3, [r2, #0]
 800647a:	6821      	ldr	r1, [r4, #0]
 800647c:	1d1d      	adds	r5, r3, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6015      	str	r5, [r2, #0]
 8006482:	060a      	lsls	r2, r1, #24
 8006484:	d50b      	bpl.n	800649e <_printf_i+0x162>
 8006486:	07ca      	lsls	r2, r1, #31
 8006488:	bf44      	itt	mi
 800648a:	f041 0120 	orrmi.w	r1, r1, #32
 800648e:	6021      	strmi	r1, [r4, #0]
 8006490:	b91b      	cbnz	r3, 800649a <_printf_i+0x15e>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	f022 0220 	bic.w	r2, r2, #32
 8006498:	6022      	str	r2, [r4, #0]
 800649a:	2210      	movs	r2, #16
 800649c:	e7b7      	b.n	800640e <_printf_i+0xd2>
 800649e:	064d      	lsls	r5, r1, #25
 80064a0:	bf48      	it	mi
 80064a2:	b29b      	uxthmi	r3, r3
 80064a4:	e7ef      	b.n	8006486 <_printf_i+0x14a>
 80064a6:	4665      	mov	r5, ip
 80064a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80064ac:	fb02 3311 	mls	r3, r2, r1, r3
 80064b0:	5cc3      	ldrb	r3, [r0, r3]
 80064b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064b6:	460b      	mov	r3, r1
 80064b8:	2900      	cmp	r1, #0
 80064ba:	d1f5      	bne.n	80064a8 <_printf_i+0x16c>
 80064bc:	e7b9      	b.n	8006432 <_printf_i+0xf6>
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	6825      	ldr	r5, [r4, #0]
 80064c2:	6961      	ldr	r1, [r4, #20]
 80064c4:	1d18      	adds	r0, r3, #4
 80064c6:	6010      	str	r0, [r2, #0]
 80064c8:	0628      	lsls	r0, r5, #24
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	d501      	bpl.n	80064d2 <_printf_i+0x196>
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	e002      	b.n	80064d8 <_printf_i+0x19c>
 80064d2:	066a      	lsls	r2, r5, #25
 80064d4:	d5fb      	bpl.n	80064ce <_printf_i+0x192>
 80064d6:	8019      	strh	r1, [r3, #0]
 80064d8:	2300      	movs	r3, #0
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	4665      	mov	r5, ip
 80064de:	e7b9      	b.n	8006454 <_printf_i+0x118>
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	1d19      	adds	r1, r3, #4
 80064e4:	6011      	str	r1, [r2, #0]
 80064e6:	681d      	ldr	r5, [r3, #0]
 80064e8:	6862      	ldr	r2, [r4, #4]
 80064ea:	2100      	movs	r1, #0
 80064ec:	4628      	mov	r0, r5
 80064ee:	f7f9 fe77 	bl	80001e0 <memchr>
 80064f2:	b108      	cbz	r0, 80064f8 <_printf_i+0x1bc>
 80064f4:	1b40      	subs	r0, r0, r5
 80064f6:	6060      	str	r0, [r4, #4]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2300      	movs	r3, #0
 80064fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006502:	e7a7      	b.n	8006454 <_printf_i+0x118>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	462a      	mov	r2, r5
 8006508:	4639      	mov	r1, r7
 800650a:	4630      	mov	r0, r6
 800650c:	47c0      	blx	r8
 800650e:	3001      	adds	r0, #1
 8006510:	d0aa      	beq.n	8006468 <_printf_i+0x12c>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	079b      	lsls	r3, r3, #30
 8006516:	d413      	bmi.n	8006540 <_printf_i+0x204>
 8006518:	68e0      	ldr	r0, [r4, #12]
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	4298      	cmp	r0, r3
 800651e:	bfb8      	it	lt
 8006520:	4618      	movlt	r0, r3
 8006522:	e7a3      	b.n	800646c <_printf_i+0x130>
 8006524:	2301      	movs	r3, #1
 8006526:	464a      	mov	r2, r9
 8006528:	4639      	mov	r1, r7
 800652a:	4630      	mov	r0, r6
 800652c:	47c0      	blx	r8
 800652e:	3001      	adds	r0, #1
 8006530:	d09a      	beq.n	8006468 <_printf_i+0x12c>
 8006532:	3501      	adds	r5, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	9a03      	ldr	r2, [sp, #12]
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	42ab      	cmp	r3, r5
 800653c:	dcf2      	bgt.n	8006524 <_printf_i+0x1e8>
 800653e:	e7eb      	b.n	8006518 <_printf_i+0x1dc>
 8006540:	2500      	movs	r5, #0
 8006542:	f104 0919 	add.w	r9, r4, #25
 8006546:	e7f5      	b.n	8006534 <_printf_i+0x1f8>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ac      	bne.n	80064a6 <_printf_i+0x16a>
 800654c:	7803      	ldrb	r3, [r0, #0]
 800654e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006552:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006556:	e76c      	b.n	8006432 <_printf_i+0xf6>
 8006558:	080097b6 	.word	0x080097b6
 800655c:	080097c7 	.word	0x080097c7

08006560 <_scanf_float>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	469a      	mov	sl, r3
 8006566:	688b      	ldr	r3, [r1, #8]
 8006568:	4616      	mov	r6, r2
 800656a:	1e5a      	subs	r2, r3, #1
 800656c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006570:	b087      	sub	sp, #28
 8006572:	bf83      	ittte	hi
 8006574:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006578:	189b      	addhi	r3, r3, r2
 800657a:	9301      	strhi	r3, [sp, #4]
 800657c:	2300      	movls	r3, #0
 800657e:	bf86      	itte	hi
 8006580:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006584:	608b      	strhi	r3, [r1, #8]
 8006586:	9301      	strls	r3, [sp, #4]
 8006588:	680b      	ldr	r3, [r1, #0]
 800658a:	4688      	mov	r8, r1
 800658c:	f04f 0b00 	mov.w	fp, #0
 8006590:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006594:	f848 3b1c 	str.w	r3, [r8], #28
 8006598:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800659c:	4607      	mov	r7, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	4645      	mov	r5, r8
 80065a2:	465a      	mov	r2, fp
 80065a4:	46d9      	mov	r9, fp
 80065a6:	f8cd b008 	str.w	fp, [sp, #8]
 80065aa:	68a1      	ldr	r1, [r4, #8]
 80065ac:	b181      	cbz	r1, 80065d0 <_scanf_float+0x70>
 80065ae:	6833      	ldr	r3, [r6, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b49      	cmp	r3, #73	; 0x49
 80065b4:	d071      	beq.n	800669a <_scanf_float+0x13a>
 80065b6:	d84d      	bhi.n	8006654 <_scanf_float+0xf4>
 80065b8:	2b39      	cmp	r3, #57	; 0x39
 80065ba:	d840      	bhi.n	800663e <_scanf_float+0xde>
 80065bc:	2b31      	cmp	r3, #49	; 0x31
 80065be:	f080 8088 	bcs.w	80066d2 <_scanf_float+0x172>
 80065c2:	2b2d      	cmp	r3, #45	; 0x2d
 80065c4:	f000 8090 	beq.w	80066e8 <_scanf_float+0x188>
 80065c8:	d815      	bhi.n	80065f6 <_scanf_float+0x96>
 80065ca:	2b2b      	cmp	r3, #43	; 0x2b
 80065cc:	f000 808c 	beq.w	80066e8 <_scanf_float+0x188>
 80065d0:	f1b9 0f00 	cmp.w	r9, #0
 80065d4:	d003      	beq.n	80065de <_scanf_float+0x7e>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	3a01      	subs	r2, #1
 80065e0:	2a01      	cmp	r2, #1
 80065e2:	f200 80ea 	bhi.w	80067ba <_scanf_float+0x25a>
 80065e6:	4545      	cmp	r5, r8
 80065e8:	f200 80dc 	bhi.w	80067a4 <_scanf_float+0x244>
 80065ec:	2601      	movs	r6, #1
 80065ee:	4630      	mov	r0, r6
 80065f0:	b007      	add	sp, #28
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	2b2e      	cmp	r3, #46	; 0x2e
 80065f8:	f000 809f 	beq.w	800673a <_scanf_float+0x1da>
 80065fc:	2b30      	cmp	r3, #48	; 0x30
 80065fe:	d1e7      	bne.n	80065d0 <_scanf_float+0x70>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006606:	d064      	beq.n	80066d2 <_scanf_float+0x172>
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800660e:	6020      	str	r0, [r4, #0]
 8006610:	f109 0901 	add.w	r9, r9, #1
 8006614:	b11b      	cbz	r3, 800661e <_scanf_float+0xbe>
 8006616:	3b01      	subs	r3, #1
 8006618:	3101      	adds	r1, #1
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	60a1      	str	r1, [r4, #8]
 800661e:	68a3      	ldr	r3, [r4, #8]
 8006620:	3b01      	subs	r3, #1
 8006622:	60a3      	str	r3, [r4, #8]
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	3301      	adds	r3, #1
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	6873      	ldr	r3, [r6, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	6073      	str	r3, [r6, #4]
 8006632:	f340 80ac 	ble.w	800678e <_scanf_float+0x22e>
 8006636:	6833      	ldr	r3, [r6, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	6033      	str	r3, [r6, #0]
 800663c:	e7b5      	b.n	80065aa <_scanf_float+0x4a>
 800663e:	2b45      	cmp	r3, #69	; 0x45
 8006640:	f000 8085 	beq.w	800674e <_scanf_float+0x1ee>
 8006644:	2b46      	cmp	r3, #70	; 0x46
 8006646:	d06a      	beq.n	800671e <_scanf_float+0x1be>
 8006648:	2b41      	cmp	r3, #65	; 0x41
 800664a:	d1c1      	bne.n	80065d0 <_scanf_float+0x70>
 800664c:	2a01      	cmp	r2, #1
 800664e:	d1bf      	bne.n	80065d0 <_scanf_float+0x70>
 8006650:	2202      	movs	r2, #2
 8006652:	e046      	b.n	80066e2 <_scanf_float+0x182>
 8006654:	2b65      	cmp	r3, #101	; 0x65
 8006656:	d07a      	beq.n	800674e <_scanf_float+0x1ee>
 8006658:	d818      	bhi.n	800668c <_scanf_float+0x12c>
 800665a:	2b54      	cmp	r3, #84	; 0x54
 800665c:	d066      	beq.n	800672c <_scanf_float+0x1cc>
 800665e:	d811      	bhi.n	8006684 <_scanf_float+0x124>
 8006660:	2b4e      	cmp	r3, #78	; 0x4e
 8006662:	d1b5      	bne.n	80065d0 <_scanf_float+0x70>
 8006664:	2a00      	cmp	r2, #0
 8006666:	d146      	bne.n	80066f6 <_scanf_float+0x196>
 8006668:	f1b9 0f00 	cmp.w	r9, #0
 800666c:	d145      	bne.n	80066fa <_scanf_float+0x19a>
 800666e:	6821      	ldr	r1, [r4, #0]
 8006670:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006674:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006678:	d13f      	bne.n	80066fa <_scanf_float+0x19a>
 800667a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800667e:	6021      	str	r1, [r4, #0]
 8006680:	2201      	movs	r2, #1
 8006682:	e02e      	b.n	80066e2 <_scanf_float+0x182>
 8006684:	2b59      	cmp	r3, #89	; 0x59
 8006686:	d01e      	beq.n	80066c6 <_scanf_float+0x166>
 8006688:	2b61      	cmp	r3, #97	; 0x61
 800668a:	e7de      	b.n	800664a <_scanf_float+0xea>
 800668c:	2b6e      	cmp	r3, #110	; 0x6e
 800668e:	d0e9      	beq.n	8006664 <_scanf_float+0x104>
 8006690:	d815      	bhi.n	80066be <_scanf_float+0x15e>
 8006692:	2b66      	cmp	r3, #102	; 0x66
 8006694:	d043      	beq.n	800671e <_scanf_float+0x1be>
 8006696:	2b69      	cmp	r3, #105	; 0x69
 8006698:	d19a      	bne.n	80065d0 <_scanf_float+0x70>
 800669a:	f1bb 0f00 	cmp.w	fp, #0
 800669e:	d138      	bne.n	8006712 <_scanf_float+0x1b2>
 80066a0:	f1b9 0f00 	cmp.w	r9, #0
 80066a4:	d197      	bne.n	80065d6 <_scanf_float+0x76>
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80066ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80066b0:	d195      	bne.n	80065de <_scanf_float+0x7e>
 80066b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80066b6:	6021      	str	r1, [r4, #0]
 80066b8:	f04f 0b01 	mov.w	fp, #1
 80066bc:	e011      	b.n	80066e2 <_scanf_float+0x182>
 80066be:	2b74      	cmp	r3, #116	; 0x74
 80066c0:	d034      	beq.n	800672c <_scanf_float+0x1cc>
 80066c2:	2b79      	cmp	r3, #121	; 0x79
 80066c4:	d184      	bne.n	80065d0 <_scanf_float+0x70>
 80066c6:	f1bb 0f07 	cmp.w	fp, #7
 80066ca:	d181      	bne.n	80065d0 <_scanf_float+0x70>
 80066cc:	f04f 0b08 	mov.w	fp, #8
 80066d0:	e007      	b.n	80066e2 <_scanf_float+0x182>
 80066d2:	eb12 0f0b 	cmn.w	r2, fp
 80066d6:	f47f af7b 	bne.w	80065d0 <_scanf_float+0x70>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80066e0:	6021      	str	r1, [r4, #0]
 80066e2:	702b      	strb	r3, [r5, #0]
 80066e4:	3501      	adds	r5, #1
 80066e6:	e79a      	b.n	800661e <_scanf_float+0xbe>
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	0608      	lsls	r0, r1, #24
 80066ec:	f57f af70 	bpl.w	80065d0 <_scanf_float+0x70>
 80066f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066f4:	e7f4      	b.n	80066e0 <_scanf_float+0x180>
 80066f6:	2a02      	cmp	r2, #2
 80066f8:	d047      	beq.n	800678a <_scanf_float+0x22a>
 80066fa:	f1bb 0f01 	cmp.w	fp, #1
 80066fe:	d003      	beq.n	8006708 <_scanf_float+0x1a8>
 8006700:	f1bb 0f04 	cmp.w	fp, #4
 8006704:	f47f af64 	bne.w	80065d0 <_scanf_float+0x70>
 8006708:	f10b 0b01 	add.w	fp, fp, #1
 800670c:	fa5f fb8b 	uxtb.w	fp, fp
 8006710:	e7e7      	b.n	80066e2 <_scanf_float+0x182>
 8006712:	f1bb 0f03 	cmp.w	fp, #3
 8006716:	d0f7      	beq.n	8006708 <_scanf_float+0x1a8>
 8006718:	f1bb 0f05 	cmp.w	fp, #5
 800671c:	e7f2      	b.n	8006704 <_scanf_float+0x1a4>
 800671e:	f1bb 0f02 	cmp.w	fp, #2
 8006722:	f47f af55 	bne.w	80065d0 <_scanf_float+0x70>
 8006726:	f04f 0b03 	mov.w	fp, #3
 800672a:	e7da      	b.n	80066e2 <_scanf_float+0x182>
 800672c:	f1bb 0f06 	cmp.w	fp, #6
 8006730:	f47f af4e 	bne.w	80065d0 <_scanf_float+0x70>
 8006734:	f04f 0b07 	mov.w	fp, #7
 8006738:	e7d3      	b.n	80066e2 <_scanf_float+0x182>
 800673a:	6821      	ldr	r1, [r4, #0]
 800673c:	0588      	lsls	r0, r1, #22
 800673e:	f57f af47 	bpl.w	80065d0 <_scanf_float+0x70>
 8006742:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006746:	6021      	str	r1, [r4, #0]
 8006748:	f8cd 9008 	str.w	r9, [sp, #8]
 800674c:	e7c9      	b.n	80066e2 <_scanf_float+0x182>
 800674e:	6821      	ldr	r1, [r4, #0]
 8006750:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006754:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006758:	d006      	beq.n	8006768 <_scanf_float+0x208>
 800675a:	0548      	lsls	r0, r1, #21
 800675c:	f57f af38 	bpl.w	80065d0 <_scanf_float+0x70>
 8006760:	f1b9 0f00 	cmp.w	r9, #0
 8006764:	f43f af3b 	beq.w	80065de <_scanf_float+0x7e>
 8006768:	0588      	lsls	r0, r1, #22
 800676a:	bf58      	it	pl
 800676c:	9802      	ldrpl	r0, [sp, #8]
 800676e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006772:	bf58      	it	pl
 8006774:	eba9 0000 	subpl.w	r0, r9, r0
 8006778:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800677c:	bf58      	it	pl
 800677e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006782:	6021      	str	r1, [r4, #0]
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	e7ab      	b.n	80066e2 <_scanf_float+0x182>
 800678a:	2203      	movs	r2, #3
 800678c:	e7a9      	b.n	80066e2 <_scanf_float+0x182>
 800678e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006792:	9205      	str	r2, [sp, #20]
 8006794:	4631      	mov	r1, r6
 8006796:	4638      	mov	r0, r7
 8006798:	4798      	blx	r3
 800679a:	9a05      	ldr	r2, [sp, #20]
 800679c:	2800      	cmp	r0, #0
 800679e:	f43f af04 	beq.w	80065aa <_scanf_float+0x4a>
 80067a2:	e715      	b.n	80065d0 <_scanf_float+0x70>
 80067a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80067ac:	4632      	mov	r2, r6
 80067ae:	4638      	mov	r0, r7
 80067b0:	4798      	blx	r3
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	e715      	b.n	80065e6 <_scanf_float+0x86>
 80067ba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80067be:	2b06      	cmp	r3, #6
 80067c0:	d80a      	bhi.n	80067d8 <_scanf_float+0x278>
 80067c2:	f1bb 0f02 	cmp.w	fp, #2
 80067c6:	d968      	bls.n	800689a <_scanf_float+0x33a>
 80067c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80067cc:	fa5f fb8b 	uxtb.w	fp, fp
 80067d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80067d4:	455d      	cmp	r5, fp
 80067d6:	d14b      	bne.n	8006870 <_scanf_float+0x310>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	05da      	lsls	r2, r3, #23
 80067dc:	d51f      	bpl.n	800681e <_scanf_float+0x2be>
 80067de:	055b      	lsls	r3, r3, #21
 80067e0:	d468      	bmi.n	80068b4 <_scanf_float+0x354>
 80067e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	2965      	cmp	r1, #101	; 0x65
 80067ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80067ee:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	d00d      	beq.n	8006812 <_scanf_float+0x2b2>
 80067f6:	2945      	cmp	r1, #69	; 0x45
 80067f8:	d00b      	beq.n	8006812 <_scanf_float+0x2b2>
 80067fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067fe:	4632      	mov	r2, r6
 8006800:	4638      	mov	r0, r7
 8006802:	4798      	blx	r3
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800680a:	3b01      	subs	r3, #1
 800680c:	f1a5 0b02 	sub.w	fp, r5, #2
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006816:	4632      	mov	r2, r6
 8006818:	4638      	mov	r0, r7
 800681a:	4798      	blx	r3
 800681c:	465d      	mov	r5, fp
 800681e:	6826      	ldr	r6, [r4, #0]
 8006820:	f016 0610 	ands.w	r6, r6, #16
 8006824:	d17a      	bne.n	800691c <_scanf_float+0x3bc>
 8006826:	702e      	strb	r6, [r5, #0]
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d142      	bne.n	80068ba <_scanf_float+0x35a>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	eba9 0303 	sub.w	r3, r9, r3
 800683a:	425a      	negs	r2, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d149      	bne.n	80068d4 <_scanf_float+0x374>
 8006840:	2200      	movs	r2, #0
 8006842:	4641      	mov	r1, r8
 8006844:	4638      	mov	r0, r7
 8006846:	f000 fea3 	bl	8007590 <_strtod_r>
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	f8da 3000 	ldr.w	r3, [sl]
 8006850:	f015 0f02 	tst.w	r5, #2
 8006854:	f103 0204 	add.w	r2, r3, #4
 8006858:	ec59 8b10 	vmov	r8, r9, d0
 800685c:	f8ca 2000 	str.w	r2, [sl]
 8006860:	d043      	beq.n	80068ea <_scanf_float+0x38a>
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	e9c3 8900 	strd	r8, r9, [r3]
 8006868:	68e3      	ldr	r3, [r4, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60e3      	str	r3, [r4, #12]
 800686e:	e6be      	b.n	80065ee <_scanf_float+0x8e>
 8006870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006874:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006878:	4632      	mov	r2, r6
 800687a:	4638      	mov	r0, r7
 800687c:	4798      	blx	r3
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	3b01      	subs	r3, #1
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	e7a6      	b.n	80067d4 <_scanf_float+0x274>
 8006886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800688a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800688e:	4632      	mov	r2, r6
 8006890:	4638      	mov	r0, r7
 8006892:	4798      	blx	r3
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	3b01      	subs	r3, #1
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	4545      	cmp	r5, r8
 800689c:	d8f3      	bhi.n	8006886 <_scanf_float+0x326>
 800689e:	e6a5      	b.n	80065ec <_scanf_float+0x8c>
 80068a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80068a8:	4632      	mov	r2, r6
 80068aa:	4638      	mov	r0, r7
 80068ac:	4798      	blx	r3
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	4545      	cmp	r5, r8
 80068b6:	d8f3      	bhi.n	80068a0 <_scanf_float+0x340>
 80068b8:	e698      	b.n	80065ec <_scanf_float+0x8c>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0bf      	beq.n	8006840 <_scanf_float+0x2e0>
 80068c0:	9904      	ldr	r1, [sp, #16]
 80068c2:	230a      	movs	r3, #10
 80068c4:	4632      	mov	r2, r6
 80068c6:	3101      	adds	r1, #1
 80068c8:	4638      	mov	r0, r7
 80068ca:	f000 feed 	bl	80076a8 <_strtol_r>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	9d04      	ldr	r5, [sp, #16]
 80068d2:	1ac2      	subs	r2, r0, r3
 80068d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80068d8:	429d      	cmp	r5, r3
 80068da:	bf28      	it	cs
 80068dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80068e0:	490f      	ldr	r1, [pc, #60]	; (8006920 <_scanf_float+0x3c0>)
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f824 	bl	8006930 <siprintf>
 80068e8:	e7aa      	b.n	8006840 <_scanf_float+0x2e0>
 80068ea:	f015 0504 	ands.w	r5, r5, #4
 80068ee:	d1b8      	bne.n	8006862 <_scanf_float+0x302>
 80068f0:	681f      	ldr	r7, [r3, #0]
 80068f2:	ee10 2a10 	vmov	r2, s0
 80068f6:	464b      	mov	r3, r9
 80068f8:	ee10 0a10 	vmov	r0, s0
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7fa f915 	bl	8000b2c <__aeabi_dcmpun>
 8006902:	b128      	cbz	r0, 8006910 <_scanf_float+0x3b0>
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f80d 	bl	8006924 <nanf>
 800690a:	ed87 0a00 	vstr	s0, [r7]
 800690e:	e7ab      	b.n	8006868 <_scanf_float+0x308>
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7fa f968 	bl	8000be8 <__aeabi_d2f>
 8006918:	6038      	str	r0, [r7, #0]
 800691a:	e7a5      	b.n	8006868 <_scanf_float+0x308>
 800691c:	2600      	movs	r6, #0
 800691e:	e666      	b.n	80065ee <_scanf_float+0x8e>
 8006920:	080097d8 	.word	0x080097d8

08006924 <nanf>:
 8006924:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800692c <nanf+0x8>
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	7fc00000 	.word	0x7fc00000

08006930 <siprintf>:
 8006930:	b40e      	push	{r1, r2, r3}
 8006932:	b500      	push	{lr}
 8006934:	b09c      	sub	sp, #112	; 0x70
 8006936:	ab1d      	add	r3, sp, #116	; 0x74
 8006938:	9002      	str	r0, [sp, #8]
 800693a:	9006      	str	r0, [sp, #24]
 800693c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006940:	4809      	ldr	r0, [pc, #36]	; (8006968 <siprintf+0x38>)
 8006942:	9107      	str	r1, [sp, #28]
 8006944:	9104      	str	r1, [sp, #16]
 8006946:	4909      	ldr	r1, [pc, #36]	; (800696c <siprintf+0x3c>)
 8006948:	f853 2b04 	ldr.w	r2, [r3], #4
 800694c:	9105      	str	r1, [sp, #20]
 800694e:	6800      	ldr	r0, [r0, #0]
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	a902      	add	r1, sp, #8
 8006954:	f002 fd6e 	bl	8009434 <_svfiprintf_r>
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	b01c      	add	sp, #112	; 0x70
 8006960:	f85d eb04 	ldr.w	lr, [sp], #4
 8006964:	b003      	add	sp, #12
 8006966:	4770      	bx	lr
 8006968:	2000000c 	.word	0x2000000c
 800696c:	ffff0208 	.word	0xffff0208

08006970 <sulp>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	460d      	mov	r5, r1
 8006976:	ec45 4b10 	vmov	d0, r4, r5
 800697a:	4616      	mov	r6, r2
 800697c:	f002 fb16 	bl	8008fac <__ulp>
 8006980:	ec51 0b10 	vmov	r0, r1, d0
 8006984:	b17e      	cbz	r6, 80069a6 <sulp+0x36>
 8006986:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800698a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800698e:	2b00      	cmp	r3, #0
 8006990:	dd09      	ble.n	80069a6 <sulp+0x36>
 8006992:	051b      	lsls	r3, r3, #20
 8006994:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006998:	2400      	movs	r4, #0
 800699a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800699e:	4622      	mov	r2, r4
 80069a0:	462b      	mov	r3, r5
 80069a2:	f7f9 fe29 	bl	80005f8 <__aeabi_dmul>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}

080069a8 <_strtod_l>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	461f      	mov	r7, r3
 80069ae:	b0a1      	sub	sp, #132	; 0x84
 80069b0:	2300      	movs	r3, #0
 80069b2:	4681      	mov	r9, r0
 80069b4:	4638      	mov	r0, r7
 80069b6:	460e      	mov	r6, r1
 80069b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80069ba:	931c      	str	r3, [sp, #112]	; 0x70
 80069bc:	f001 fff5 	bl	80089aa <__localeconv_l>
 80069c0:	4680      	mov	r8, r0
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	f7f9 fc04 	bl	80001d0 <strlen>
 80069c8:	f04f 0a00 	mov.w	sl, #0
 80069cc:	4604      	mov	r4, r0
 80069ce:	f04f 0b00 	mov.w	fp, #0
 80069d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80069d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069d6:	781a      	ldrb	r2, [r3, #0]
 80069d8:	2a0d      	cmp	r2, #13
 80069da:	d832      	bhi.n	8006a42 <_strtod_l+0x9a>
 80069dc:	2a09      	cmp	r2, #9
 80069de:	d236      	bcs.n	8006a4e <_strtod_l+0xa6>
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	d03e      	beq.n	8006a62 <_strtod_l+0xba>
 80069e4:	2300      	movs	r3, #0
 80069e6:	930d      	str	r3, [sp, #52]	; 0x34
 80069e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80069ea:	782b      	ldrb	r3, [r5, #0]
 80069ec:	2b30      	cmp	r3, #48	; 0x30
 80069ee:	f040 80ac 	bne.w	8006b4a <_strtod_l+0x1a2>
 80069f2:	786b      	ldrb	r3, [r5, #1]
 80069f4:	2b58      	cmp	r3, #88	; 0x58
 80069f6:	d001      	beq.n	80069fc <_strtod_l+0x54>
 80069f8:	2b78      	cmp	r3, #120	; 0x78
 80069fa:	d167      	bne.n	8006acc <_strtod_l+0x124>
 80069fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	ab1c      	add	r3, sp, #112	; 0x70
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	9702      	str	r7, [sp, #8]
 8006a06:	ab1d      	add	r3, sp, #116	; 0x74
 8006a08:	4a88      	ldr	r2, [pc, #544]	; (8006c2c <_strtod_l+0x284>)
 8006a0a:	a91b      	add	r1, sp, #108	; 0x6c
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f001 fcf2 	bl	80083f6 <__gethex>
 8006a12:	f010 0407 	ands.w	r4, r0, #7
 8006a16:	4606      	mov	r6, r0
 8006a18:	d005      	beq.n	8006a26 <_strtod_l+0x7e>
 8006a1a:	2c06      	cmp	r4, #6
 8006a1c:	d12b      	bne.n	8006a76 <_strtod_l+0xce>
 8006a1e:	3501      	adds	r5, #1
 8006a20:	2300      	movs	r3, #0
 8006a22:	951b      	str	r5, [sp, #108]	; 0x6c
 8006a24:	930d      	str	r3, [sp, #52]	; 0x34
 8006a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 859a 	bne.w	8007562 <_strtod_l+0xbba>
 8006a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a30:	b1e3      	cbz	r3, 8006a6c <_strtod_l+0xc4>
 8006a32:	4652      	mov	r2, sl
 8006a34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a38:	ec43 2b10 	vmov	d0, r2, r3
 8006a3c:	b021      	add	sp, #132	; 0x84
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a42:	2a2b      	cmp	r2, #43	; 0x2b
 8006a44:	d015      	beq.n	8006a72 <_strtod_l+0xca>
 8006a46:	2a2d      	cmp	r2, #45	; 0x2d
 8006a48:	d004      	beq.n	8006a54 <_strtod_l+0xac>
 8006a4a:	2a20      	cmp	r2, #32
 8006a4c:	d1ca      	bne.n	80069e4 <_strtod_l+0x3c>
 8006a4e:	3301      	adds	r3, #1
 8006a50:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a52:	e7bf      	b.n	80069d4 <_strtod_l+0x2c>
 8006a54:	2201      	movs	r2, #1
 8006a56:	920d      	str	r2, [sp, #52]	; 0x34
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1c2      	bne.n	80069e8 <_strtod_l+0x40>
 8006a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a64:	961b      	str	r6, [sp, #108]	; 0x6c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 8579 	bne.w	800755e <_strtod_l+0xbb6>
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	465b      	mov	r3, fp
 8006a70:	e7e2      	b.n	8006a38 <_strtod_l+0x90>
 8006a72:	2200      	movs	r2, #0
 8006a74:	e7ef      	b.n	8006a56 <_strtod_l+0xae>
 8006a76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a78:	b13a      	cbz	r2, 8006a8a <_strtod_l+0xe2>
 8006a7a:	2135      	movs	r1, #53	; 0x35
 8006a7c:	a81e      	add	r0, sp, #120	; 0x78
 8006a7e:	f002 fb8d 	bl	800919c <__copybits>
 8006a82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a84:	4648      	mov	r0, r9
 8006a86:	f001 fffa 	bl	8008a7e <_Bfree>
 8006a8a:	3c01      	subs	r4, #1
 8006a8c:	2c04      	cmp	r4, #4
 8006a8e:	d806      	bhi.n	8006a9e <_strtod_l+0xf6>
 8006a90:	e8df f004 	tbb	[pc, r4]
 8006a94:	1714030a 	.word	0x1714030a
 8006a98:	0a          	.byte	0x0a
 8006a99:	00          	.byte	0x00
 8006a9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006a9e:	0730      	lsls	r0, r6, #28
 8006aa0:	d5c1      	bpl.n	8006a26 <_strtod_l+0x7e>
 8006aa2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006aa6:	e7be      	b.n	8006a26 <_strtod_l+0x7e>
 8006aa8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006aac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006aae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ab2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ab6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006aba:	e7f0      	b.n	8006a9e <_strtod_l+0xf6>
 8006abc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006c30 <_strtod_l+0x288>
 8006ac0:	e7ed      	b.n	8006a9e <_strtod_l+0xf6>
 8006ac2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006ac6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006aca:	e7e8      	b.n	8006a9e <_strtod_l+0xf6>
 8006acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b30      	cmp	r3, #48	; 0x30
 8006ad6:	d0f9      	beq.n	8006acc <_strtod_l+0x124>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0a4      	beq.n	8006a26 <_strtod_l+0x7e>
 8006adc:	2301      	movs	r3, #1
 8006ade:	2500      	movs	r5, #0
 8006ae0:	9306      	str	r3, [sp, #24]
 8006ae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ae4:	9308      	str	r3, [sp, #32]
 8006ae6:	9507      	str	r5, [sp, #28]
 8006ae8:	9505      	str	r5, [sp, #20]
 8006aea:	220a      	movs	r2, #10
 8006aec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006aee:	7807      	ldrb	r7, [r0, #0]
 8006af0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006af4:	b2d9      	uxtb	r1, r3
 8006af6:	2909      	cmp	r1, #9
 8006af8:	d929      	bls.n	8006b4e <_strtod_l+0x1a6>
 8006afa:	4622      	mov	r2, r4
 8006afc:	f8d8 1000 	ldr.w	r1, [r8]
 8006b00:	f002 fda0 	bl	8009644 <strncmp>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d031      	beq.n	8006b6c <_strtod_l+0x1c4>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	9c05      	ldr	r4, [sp, #20]
 8006b0c:	9004      	str	r0, [sp, #16]
 8006b0e:	463b      	mov	r3, r7
 8006b10:	4602      	mov	r2, r0
 8006b12:	2b65      	cmp	r3, #101	; 0x65
 8006b14:	d001      	beq.n	8006b1a <_strtod_l+0x172>
 8006b16:	2b45      	cmp	r3, #69	; 0x45
 8006b18:	d114      	bne.n	8006b44 <_strtod_l+0x19c>
 8006b1a:	b924      	cbnz	r4, 8006b26 <_strtod_l+0x17e>
 8006b1c:	b910      	cbnz	r0, 8006b24 <_strtod_l+0x17c>
 8006b1e:	9b06      	ldr	r3, [sp, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d09e      	beq.n	8006a62 <_strtod_l+0xba>
 8006b24:	2400      	movs	r4, #0
 8006b26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006b28:	1c73      	adds	r3, r6, #1
 8006b2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b2c:	7873      	ldrb	r3, [r6, #1]
 8006b2e:	2b2b      	cmp	r3, #43	; 0x2b
 8006b30:	d078      	beq.n	8006c24 <_strtod_l+0x27c>
 8006b32:	2b2d      	cmp	r3, #45	; 0x2d
 8006b34:	d070      	beq.n	8006c18 <_strtod_l+0x270>
 8006b36:	f04f 0c00 	mov.w	ip, #0
 8006b3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006b3e:	2f09      	cmp	r7, #9
 8006b40:	d97c      	bls.n	8006c3c <_strtod_l+0x294>
 8006b42:	961b      	str	r6, [sp, #108]	; 0x6c
 8006b44:	f04f 0e00 	mov.w	lr, #0
 8006b48:	e09a      	b.n	8006c80 <_strtod_l+0x2d8>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e7c7      	b.n	8006ade <_strtod_l+0x136>
 8006b4e:	9905      	ldr	r1, [sp, #20]
 8006b50:	2908      	cmp	r1, #8
 8006b52:	bfdd      	ittte	le
 8006b54:	9907      	ldrle	r1, [sp, #28]
 8006b56:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b5a:	9307      	strle	r3, [sp, #28]
 8006b5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006b60:	9b05      	ldr	r3, [sp, #20]
 8006b62:	3001      	adds	r0, #1
 8006b64:	3301      	adds	r3, #1
 8006b66:	9305      	str	r3, [sp, #20]
 8006b68:	901b      	str	r0, [sp, #108]	; 0x6c
 8006b6a:	e7bf      	b.n	8006aec <_strtod_l+0x144>
 8006b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b6e:	191a      	adds	r2, r3, r4
 8006b70:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b72:	9a05      	ldr	r2, [sp, #20]
 8006b74:	5d1b      	ldrb	r3, [r3, r4]
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	d037      	beq.n	8006bea <_strtod_l+0x242>
 8006b7a:	9c05      	ldr	r4, [sp, #20]
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b82:	2909      	cmp	r1, #9
 8006b84:	d913      	bls.n	8006bae <_strtod_l+0x206>
 8006b86:	2101      	movs	r1, #1
 8006b88:	9104      	str	r1, [sp, #16]
 8006b8a:	e7c2      	b.n	8006b12 <_strtod_l+0x16a>
 8006b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	3001      	adds	r0, #1
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d0f8      	beq.n	8006b8c <_strtod_l+0x1e4>
 8006b9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006b9e:	2a08      	cmp	r2, #8
 8006ba0:	f200 84e4 	bhi.w	800756c <_strtod_l+0xbc4>
 8006ba4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006ba6:	9208      	str	r2, [sp, #32]
 8006ba8:	4602      	mov	r2, r0
 8006baa:	2000      	movs	r0, #0
 8006bac:	4604      	mov	r4, r0
 8006bae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006bb2:	f100 0101 	add.w	r1, r0, #1
 8006bb6:	d012      	beq.n	8006bde <_strtod_l+0x236>
 8006bb8:	440a      	add	r2, r1
 8006bba:	eb00 0c04 	add.w	ip, r0, r4
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	270a      	movs	r7, #10
 8006bc2:	458c      	cmp	ip, r1
 8006bc4:	d113      	bne.n	8006bee <_strtod_l+0x246>
 8006bc6:	1821      	adds	r1, r4, r0
 8006bc8:	2908      	cmp	r1, #8
 8006bca:	f104 0401 	add.w	r4, r4, #1
 8006bce:	4404      	add	r4, r0
 8006bd0:	dc19      	bgt.n	8006c06 <_strtod_l+0x25e>
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	210a      	movs	r1, #10
 8006bd6:	fb01 e303 	mla	r3, r1, r3, lr
 8006bda:	9307      	str	r3, [sp, #28]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006be0:	1c58      	adds	r0, r3, #1
 8006be2:	901b      	str	r0, [sp, #108]	; 0x6c
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	4608      	mov	r0, r1
 8006be8:	e7c9      	b.n	8006b7e <_strtod_l+0x1d6>
 8006bea:	9805      	ldr	r0, [sp, #20]
 8006bec:	e7d3      	b.n	8006b96 <_strtod_l+0x1ee>
 8006bee:	2908      	cmp	r1, #8
 8006bf0:	f101 0101 	add.w	r1, r1, #1
 8006bf4:	dc03      	bgt.n	8006bfe <_strtod_l+0x256>
 8006bf6:	9b07      	ldr	r3, [sp, #28]
 8006bf8:	437b      	muls	r3, r7
 8006bfa:	9307      	str	r3, [sp, #28]
 8006bfc:	e7e1      	b.n	8006bc2 <_strtod_l+0x21a>
 8006bfe:	2910      	cmp	r1, #16
 8006c00:	bfd8      	it	le
 8006c02:	437d      	mulle	r5, r7
 8006c04:	e7dd      	b.n	8006bc2 <_strtod_l+0x21a>
 8006c06:	2c10      	cmp	r4, #16
 8006c08:	bfdc      	itt	le
 8006c0a:	210a      	movle	r1, #10
 8006c0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006c10:	e7e4      	b.n	8006bdc <_strtod_l+0x234>
 8006c12:	2301      	movs	r3, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	e781      	b.n	8006b1c <_strtod_l+0x174>
 8006c18:	f04f 0c01 	mov.w	ip, #1
 8006c1c:	1cb3      	adds	r3, r6, #2
 8006c1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c20:	78b3      	ldrb	r3, [r6, #2]
 8006c22:	e78a      	b.n	8006b3a <_strtod_l+0x192>
 8006c24:	f04f 0c00 	mov.w	ip, #0
 8006c28:	e7f8      	b.n	8006c1c <_strtod_l+0x274>
 8006c2a:	bf00      	nop
 8006c2c:	080097e0 	.word	0x080097e0
 8006c30:	7ff00000 	.word	0x7ff00000
 8006c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c36:	1c5f      	adds	r7, r3, #1
 8006c38:	971b      	str	r7, [sp, #108]	; 0x6c
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b30      	cmp	r3, #48	; 0x30
 8006c3e:	d0f9      	beq.n	8006c34 <_strtod_l+0x28c>
 8006c40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006c44:	2f08      	cmp	r7, #8
 8006c46:	f63f af7d 	bhi.w	8006b44 <_strtod_l+0x19c>
 8006c4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c50:	930a      	str	r3, [sp, #40]	; 0x28
 8006c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c54:	1c5f      	adds	r7, r3, #1
 8006c56:	971b      	str	r7, [sp, #108]	; 0x6c
 8006c58:	785b      	ldrb	r3, [r3, #1]
 8006c5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006c5e:	f1b8 0f09 	cmp.w	r8, #9
 8006c62:	d937      	bls.n	8006cd4 <_strtod_l+0x32c>
 8006c64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c66:	1a7f      	subs	r7, r7, r1
 8006c68:	2f08      	cmp	r7, #8
 8006c6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006c6e:	dc37      	bgt.n	8006ce0 <_strtod_l+0x338>
 8006c70:	45be      	cmp	lr, r7
 8006c72:	bfa8      	it	ge
 8006c74:	46be      	movge	lr, r7
 8006c76:	f1bc 0f00 	cmp.w	ip, #0
 8006c7a:	d001      	beq.n	8006c80 <_strtod_l+0x2d8>
 8006c7c:	f1ce 0e00 	rsb	lr, lr, #0
 8006c80:	2c00      	cmp	r4, #0
 8006c82:	d151      	bne.n	8006d28 <_strtod_l+0x380>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f47f aece 	bne.w	8006a26 <_strtod_l+0x7e>
 8006c8a:	9a06      	ldr	r2, [sp, #24]
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	f47f aeca 	bne.w	8006a26 <_strtod_l+0x7e>
 8006c92:	9a04      	ldr	r2, [sp, #16]
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	f47f aee4 	bne.w	8006a62 <_strtod_l+0xba>
 8006c9a:	2b4e      	cmp	r3, #78	; 0x4e
 8006c9c:	d027      	beq.n	8006cee <_strtod_l+0x346>
 8006c9e:	dc21      	bgt.n	8006ce4 <_strtod_l+0x33c>
 8006ca0:	2b49      	cmp	r3, #73	; 0x49
 8006ca2:	f47f aede 	bne.w	8006a62 <_strtod_l+0xba>
 8006ca6:	49a0      	ldr	r1, [pc, #640]	; (8006f28 <_strtod_l+0x580>)
 8006ca8:	a81b      	add	r0, sp, #108	; 0x6c
 8006caa:	f001 fdd7 	bl	800885c <__match>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f aed7 	beq.w	8006a62 <_strtod_l+0xba>
 8006cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cb6:	499d      	ldr	r1, [pc, #628]	; (8006f2c <_strtod_l+0x584>)
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	a81b      	add	r0, sp, #108	; 0x6c
 8006cbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cbe:	f001 fdcd 	bl	800885c <__match>
 8006cc2:	b910      	cbnz	r0, 8006cca <_strtod_l+0x322>
 8006cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006f40 <_strtod_l+0x598>
 8006cce:	f04f 0a00 	mov.w	sl, #0
 8006cd2:	e6a8      	b.n	8006a26 <_strtod_l+0x7e>
 8006cd4:	210a      	movs	r1, #10
 8006cd6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006cda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006cde:	e7b8      	b.n	8006c52 <_strtod_l+0x2aa>
 8006ce0:	46be      	mov	lr, r7
 8006ce2:	e7c8      	b.n	8006c76 <_strtod_l+0x2ce>
 8006ce4:	2b69      	cmp	r3, #105	; 0x69
 8006ce6:	d0de      	beq.n	8006ca6 <_strtod_l+0x2fe>
 8006ce8:	2b6e      	cmp	r3, #110	; 0x6e
 8006cea:	f47f aeba 	bne.w	8006a62 <_strtod_l+0xba>
 8006cee:	4990      	ldr	r1, [pc, #576]	; (8006f30 <_strtod_l+0x588>)
 8006cf0:	a81b      	add	r0, sp, #108	; 0x6c
 8006cf2:	f001 fdb3 	bl	800885c <__match>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f aeb3 	beq.w	8006a62 <_strtod_l+0xba>
 8006cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b28      	cmp	r3, #40	; 0x28
 8006d02:	d10e      	bne.n	8006d22 <_strtod_l+0x37a>
 8006d04:	aa1e      	add	r2, sp, #120	; 0x78
 8006d06:	498b      	ldr	r1, [pc, #556]	; (8006f34 <_strtod_l+0x58c>)
 8006d08:	a81b      	add	r0, sp, #108	; 0x6c
 8006d0a:	f001 fdbb 	bl	8008884 <__hexnan>
 8006d0e:	2805      	cmp	r0, #5
 8006d10:	d107      	bne.n	8006d22 <_strtod_l+0x37a>
 8006d12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006d18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d20:	e681      	b.n	8006a26 <_strtod_l+0x7e>
 8006d22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006f48 <_strtod_l+0x5a0>
 8006d26:	e7d2      	b.n	8006cce <_strtod_l+0x326>
 8006d28:	ebae 0302 	sub.w	r3, lr, r2
 8006d2c:	9306      	str	r3, [sp, #24]
 8006d2e:	9b05      	ldr	r3, [sp, #20]
 8006d30:	9807      	ldr	r0, [sp, #28]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf08      	it	eq
 8006d36:	4623      	moveq	r3, r4
 8006d38:	2c10      	cmp	r4, #16
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	46a0      	mov	r8, r4
 8006d3e:	bfa8      	it	ge
 8006d40:	f04f 0810 	movge.w	r8, #16
 8006d44:	f7f9 fbde 	bl	8000504 <__aeabi_ui2d>
 8006d48:	2c09      	cmp	r4, #9
 8006d4a:	4682      	mov	sl, r0
 8006d4c:	468b      	mov	fp, r1
 8006d4e:	dc13      	bgt.n	8006d78 <_strtod_l+0x3d0>
 8006d50:	9b06      	ldr	r3, [sp, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f43f ae67 	beq.w	8006a26 <_strtod_l+0x7e>
 8006d58:	9b06      	ldr	r3, [sp, #24]
 8006d5a:	dd7a      	ble.n	8006e52 <_strtod_l+0x4aa>
 8006d5c:	2b16      	cmp	r3, #22
 8006d5e:	dc61      	bgt.n	8006e24 <_strtod_l+0x47c>
 8006d60:	4a75      	ldr	r2, [pc, #468]	; (8006f38 <_strtod_l+0x590>)
 8006d62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006d66:	e9de 0100 	ldrd	r0, r1, [lr]
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	465b      	mov	r3, fp
 8006d6e:	f7f9 fc43 	bl	80005f8 <__aeabi_dmul>
 8006d72:	4682      	mov	sl, r0
 8006d74:	468b      	mov	fp, r1
 8006d76:	e656      	b.n	8006a26 <_strtod_l+0x7e>
 8006d78:	4b6f      	ldr	r3, [pc, #444]	; (8006f38 <_strtod_l+0x590>)
 8006d7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	4606      	mov	r6, r0
 8006d88:	4628      	mov	r0, r5
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	f7f9 fbba 	bl	8000504 <__aeabi_ui2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4630      	mov	r0, r6
 8006d96:	4639      	mov	r1, r7
 8006d98:	f7f9 fa78 	bl	800028c <__adddf3>
 8006d9c:	2c0f      	cmp	r4, #15
 8006d9e:	4682      	mov	sl, r0
 8006da0:	468b      	mov	fp, r1
 8006da2:	ddd5      	ble.n	8006d50 <_strtod_l+0x3a8>
 8006da4:	9b06      	ldr	r3, [sp, #24]
 8006da6:	eba4 0808 	sub.w	r8, r4, r8
 8006daa:	4498      	add	r8, r3
 8006dac:	f1b8 0f00 	cmp.w	r8, #0
 8006db0:	f340 8096 	ble.w	8006ee0 <_strtod_l+0x538>
 8006db4:	f018 030f 	ands.w	r3, r8, #15
 8006db8:	d00a      	beq.n	8006dd0 <_strtod_l+0x428>
 8006dba:	495f      	ldr	r1, [pc, #380]	; (8006f38 <_strtod_l+0x590>)
 8006dbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dc8:	f7f9 fc16 	bl	80005f8 <__aeabi_dmul>
 8006dcc:	4682      	mov	sl, r0
 8006dce:	468b      	mov	fp, r1
 8006dd0:	f038 080f 	bics.w	r8, r8, #15
 8006dd4:	d073      	beq.n	8006ebe <_strtod_l+0x516>
 8006dd6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006dda:	dd47      	ble.n	8006e6c <_strtod_l+0x4c4>
 8006ddc:	2400      	movs	r4, #0
 8006dde:	46a0      	mov	r8, r4
 8006de0:	9407      	str	r4, [sp, #28]
 8006de2:	9405      	str	r4, [sp, #20]
 8006de4:	2322      	movs	r3, #34	; 0x22
 8006de6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006f40 <_strtod_l+0x598>
 8006dea:	f8c9 3000 	str.w	r3, [r9]
 8006dee:	f04f 0a00 	mov.w	sl, #0
 8006df2:	9b07      	ldr	r3, [sp, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f43f ae16 	beq.w	8006a26 <_strtod_l+0x7e>
 8006dfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dfc:	4648      	mov	r0, r9
 8006dfe:	f001 fe3e 	bl	8008a7e <_Bfree>
 8006e02:	9905      	ldr	r1, [sp, #20]
 8006e04:	4648      	mov	r0, r9
 8006e06:	f001 fe3a 	bl	8008a7e <_Bfree>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4648      	mov	r0, r9
 8006e0e:	f001 fe36 	bl	8008a7e <_Bfree>
 8006e12:	9907      	ldr	r1, [sp, #28]
 8006e14:	4648      	mov	r0, r9
 8006e16:	f001 fe32 	bl	8008a7e <_Bfree>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4648      	mov	r0, r9
 8006e1e:	f001 fe2e 	bl	8008a7e <_Bfree>
 8006e22:	e600      	b.n	8006a26 <_strtod_l+0x7e>
 8006e24:	9a06      	ldr	r2, [sp, #24]
 8006e26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	dbba      	blt.n	8006da4 <_strtod_l+0x3fc>
 8006e2e:	4d42      	ldr	r5, [pc, #264]	; (8006f38 <_strtod_l+0x590>)
 8006e30:	f1c4 040f 	rsb	r4, r4, #15
 8006e34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006e38:	4652      	mov	r2, sl
 8006e3a:	465b      	mov	r3, fp
 8006e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e40:	f7f9 fbda 	bl	80005f8 <__aeabi_dmul>
 8006e44:	9b06      	ldr	r3, [sp, #24]
 8006e46:	1b1c      	subs	r4, r3, r4
 8006e48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006e4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e50:	e78d      	b.n	8006d6e <_strtod_l+0x3c6>
 8006e52:	f113 0f16 	cmn.w	r3, #22
 8006e56:	dba5      	blt.n	8006da4 <_strtod_l+0x3fc>
 8006e58:	4a37      	ldr	r2, [pc, #220]	; (8006f38 <_strtod_l+0x590>)
 8006e5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006e5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006e62:	4650      	mov	r0, sl
 8006e64:	4659      	mov	r1, fp
 8006e66:	f7f9 fcf1 	bl	800084c <__aeabi_ddiv>
 8006e6a:	e782      	b.n	8006d72 <_strtod_l+0x3ca>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4e33      	ldr	r6, [pc, #204]	; (8006f3c <_strtod_l+0x594>)
 8006e70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006e74:	4650      	mov	r0, sl
 8006e76:	4659      	mov	r1, fp
 8006e78:	461d      	mov	r5, r3
 8006e7a:	f1b8 0f01 	cmp.w	r8, #1
 8006e7e:	dc21      	bgt.n	8006ec4 <_strtod_l+0x51c>
 8006e80:	b10b      	cbz	r3, 8006e86 <_strtod_l+0x4de>
 8006e82:	4682      	mov	sl, r0
 8006e84:	468b      	mov	fp, r1
 8006e86:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <_strtod_l+0x594>)
 8006e88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006e8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006e90:	4652      	mov	r2, sl
 8006e92:	465b      	mov	r3, fp
 8006e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e98:	f7f9 fbae 	bl	80005f8 <__aeabi_dmul>
 8006e9c:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <_strtod_l+0x598>)
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	4928      	ldr	r1, [pc, #160]	; (8006f44 <_strtod_l+0x59c>)
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	4682      	mov	sl, r0
 8006ea8:	d898      	bhi.n	8006ddc <_strtod_l+0x434>
 8006eaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006eae:	428b      	cmp	r3, r1
 8006eb0:	bf86      	itte	hi
 8006eb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006f4c <_strtod_l+0x5a4>
 8006eb6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006eba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	e077      	b.n	8006fb4 <_strtod_l+0x60c>
 8006ec4:	f018 0f01 	tst.w	r8, #1
 8006ec8:	d006      	beq.n	8006ed8 <_strtod_l+0x530>
 8006eca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 fb91 	bl	80005f8 <__aeabi_dmul>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	3501      	adds	r5, #1
 8006eda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ede:	e7cc      	b.n	8006e7a <_strtod_l+0x4d2>
 8006ee0:	d0ed      	beq.n	8006ebe <_strtod_l+0x516>
 8006ee2:	f1c8 0800 	rsb	r8, r8, #0
 8006ee6:	f018 020f 	ands.w	r2, r8, #15
 8006eea:	d00a      	beq.n	8006f02 <_strtod_l+0x55a>
 8006eec:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <_strtod_l+0x590>)
 8006eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 fca7 	bl	800084c <__aeabi_ddiv>
 8006efe:	4682      	mov	sl, r0
 8006f00:	468b      	mov	fp, r1
 8006f02:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006f06:	d0da      	beq.n	8006ebe <_strtod_l+0x516>
 8006f08:	f1b8 0f1f 	cmp.w	r8, #31
 8006f0c:	dd20      	ble.n	8006f50 <_strtod_l+0x5a8>
 8006f0e:	2400      	movs	r4, #0
 8006f10:	46a0      	mov	r8, r4
 8006f12:	9407      	str	r4, [sp, #28]
 8006f14:	9405      	str	r4, [sp, #20]
 8006f16:	2322      	movs	r3, #34	; 0x22
 8006f18:	f04f 0a00 	mov.w	sl, #0
 8006f1c:	f04f 0b00 	mov.w	fp, #0
 8006f20:	f8c9 3000 	str.w	r3, [r9]
 8006f24:	e765      	b.n	8006df2 <_strtod_l+0x44a>
 8006f26:	bf00      	nop
 8006f28:	080097a9 	.word	0x080097a9
 8006f2c:	08009833 	.word	0x08009833
 8006f30:	080097b1 	.word	0x080097b1
 8006f34:	080097f4 	.word	0x080097f4
 8006f38:	08009870 	.word	0x08009870
 8006f3c:	08009848 	.word	0x08009848
 8006f40:	7ff00000 	.word	0x7ff00000
 8006f44:	7ca00000 	.word	0x7ca00000
 8006f48:	fff80000 	.word	0xfff80000
 8006f4c:	7fefffff 	.word	0x7fefffff
 8006f50:	f018 0310 	ands.w	r3, r8, #16
 8006f54:	bf18      	it	ne
 8006f56:	236a      	movne	r3, #106	; 0x6a
 8006f58:	4da0      	ldr	r5, [pc, #640]	; (80071dc <_strtod_l+0x834>)
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	4650      	mov	r0, sl
 8006f5e:	4659      	mov	r1, fp
 8006f60:	2300      	movs	r3, #0
 8006f62:	f1b8 0f00 	cmp.w	r8, #0
 8006f66:	f300 810a 	bgt.w	800717e <_strtod_l+0x7d6>
 8006f6a:	b10b      	cbz	r3, 8006f70 <_strtod_l+0x5c8>
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	468b      	mov	fp, r1
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	b1bb      	cbz	r3, 8006fa4 <_strtod_l+0x5fc>
 8006f74:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006f78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	4659      	mov	r1, fp
 8006f80:	dd10      	ble.n	8006fa4 <_strtod_l+0x5fc>
 8006f82:	2b1f      	cmp	r3, #31
 8006f84:	f340 8107 	ble.w	8007196 <_strtod_l+0x7ee>
 8006f88:	2b34      	cmp	r3, #52	; 0x34
 8006f8a:	bfde      	ittt	le
 8006f8c:	3b20      	suble	r3, #32
 8006f8e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006f92:	fa02 f303 	lslle.w	r3, r2, r3
 8006f96:	f04f 0a00 	mov.w	sl, #0
 8006f9a:	bfcc      	ite	gt
 8006f9c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006fa0:	ea03 0b01 	andle.w	fp, r3, r1
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4650      	mov	r0, sl
 8006faa:	4659      	mov	r1, fp
 8006fac:	f7f9 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d1ac      	bne.n	8006f0e <_strtod_l+0x566>
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	9a05      	ldr	r2, [sp, #20]
 8006fba:	9908      	ldr	r1, [sp, #32]
 8006fbc:	4623      	mov	r3, r4
 8006fbe:	4648      	mov	r0, r9
 8006fc0:	f001 fdaf 	bl	8008b22 <__s2b>
 8006fc4:	9007      	str	r0, [sp, #28]
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f af08 	beq.w	8006ddc <_strtod_l+0x434>
 8006fcc:	9a06      	ldr	r2, [sp, #24]
 8006fce:	9b06      	ldr	r3, [sp, #24]
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	f1c3 0300 	rsb	r3, r3, #0
 8006fd6:	bfa8      	it	ge
 8006fd8:	2300      	movge	r3, #0
 8006fda:	930e      	str	r3, [sp, #56]	; 0x38
 8006fdc:	2400      	movs	r4, #0
 8006fde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006fe2:	9316      	str	r3, [sp, #88]	; 0x58
 8006fe4:	46a0      	mov	r8, r4
 8006fe6:	9b07      	ldr	r3, [sp, #28]
 8006fe8:	4648      	mov	r0, r9
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	f001 fd13 	bl	8008a16 <_Balloc>
 8006ff0:	9005      	str	r0, [sp, #20]
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	f43f aef6 	beq.w	8006de4 <_strtod_l+0x43c>
 8006ff8:	9b07      	ldr	r3, [sp, #28]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	3202      	adds	r2, #2
 8006ffe:	f103 010c 	add.w	r1, r3, #12
 8007002:	0092      	lsls	r2, r2, #2
 8007004:	300c      	adds	r0, #12
 8007006:	f001 fcfb 	bl	8008a00 <memcpy>
 800700a:	aa1e      	add	r2, sp, #120	; 0x78
 800700c:	a91d      	add	r1, sp, #116	; 0x74
 800700e:	ec4b ab10 	vmov	d0, sl, fp
 8007012:	4648      	mov	r0, r9
 8007014:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007018:	f002 f83e 	bl	8009098 <__d2b>
 800701c:	901c      	str	r0, [sp, #112]	; 0x70
 800701e:	2800      	cmp	r0, #0
 8007020:	f43f aee0 	beq.w	8006de4 <_strtod_l+0x43c>
 8007024:	2101      	movs	r1, #1
 8007026:	4648      	mov	r0, r9
 8007028:	f001 fe07 	bl	8008c3a <__i2b>
 800702c:	4680      	mov	r8, r0
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f aed8 	beq.w	8006de4 <_strtod_l+0x43c>
 8007034:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007036:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007038:	2e00      	cmp	r6, #0
 800703a:	bfab      	itete	ge
 800703c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800703e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007040:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007042:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007044:	bfac      	ite	ge
 8007046:	18f7      	addge	r7, r6, r3
 8007048:	1b9d      	sublt	r5, r3, r6
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	1af6      	subs	r6, r6, r3
 800704e:	4416      	add	r6, r2
 8007050:	4b63      	ldr	r3, [pc, #396]	; (80071e0 <_strtod_l+0x838>)
 8007052:	3e01      	subs	r6, #1
 8007054:	429e      	cmp	r6, r3
 8007056:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800705a:	f280 80af 	bge.w	80071bc <_strtod_l+0x814>
 800705e:	1b9b      	subs	r3, r3, r6
 8007060:	2b1f      	cmp	r3, #31
 8007062:	eba2 0203 	sub.w	r2, r2, r3
 8007066:	f04f 0101 	mov.w	r1, #1
 800706a:	f300 809b 	bgt.w	80071a4 <_strtod_l+0x7fc>
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	930f      	str	r3, [sp, #60]	; 0x3c
 8007074:	2300      	movs	r3, #0
 8007076:	930a      	str	r3, [sp, #40]	; 0x28
 8007078:	18be      	adds	r6, r7, r2
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	42b7      	cmp	r7, r6
 800707e:	4415      	add	r5, r2
 8007080:	441d      	add	r5, r3
 8007082:	463b      	mov	r3, r7
 8007084:	bfa8      	it	ge
 8007086:	4633      	movge	r3, r6
 8007088:	42ab      	cmp	r3, r5
 800708a:	bfa8      	it	ge
 800708c:	462b      	movge	r3, r5
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfc2      	ittt	gt
 8007092:	1af6      	subgt	r6, r6, r3
 8007094:	1aed      	subgt	r5, r5, r3
 8007096:	1aff      	subgt	r7, r7, r3
 8007098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800709a:	b1bb      	cbz	r3, 80070cc <_strtod_l+0x724>
 800709c:	4641      	mov	r1, r8
 800709e:	461a      	mov	r2, r3
 80070a0:	4648      	mov	r0, r9
 80070a2:	f001 fe69 	bl	8008d78 <__pow5mult>
 80070a6:	4680      	mov	r8, r0
 80070a8:	2800      	cmp	r0, #0
 80070aa:	f43f ae9b 	beq.w	8006de4 <_strtod_l+0x43c>
 80070ae:	4601      	mov	r1, r0
 80070b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070b2:	4648      	mov	r0, r9
 80070b4:	f001 fdca 	bl	8008c4c <__multiply>
 80070b8:	900c      	str	r0, [sp, #48]	; 0x30
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f43f ae92 	beq.w	8006de4 <_strtod_l+0x43c>
 80070c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070c2:	4648      	mov	r0, r9
 80070c4:	f001 fcdb 	bl	8008a7e <_Bfree>
 80070c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ca:	931c      	str	r3, [sp, #112]	; 0x70
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	dc7a      	bgt.n	80071c6 <_strtod_l+0x81e>
 80070d0:	9b06      	ldr	r3, [sp, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dd08      	ble.n	80070e8 <_strtod_l+0x740>
 80070d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070d8:	9905      	ldr	r1, [sp, #20]
 80070da:	4648      	mov	r0, r9
 80070dc:	f001 fe4c 	bl	8008d78 <__pow5mult>
 80070e0:	9005      	str	r0, [sp, #20]
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f43f ae7e 	beq.w	8006de4 <_strtod_l+0x43c>
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	dd08      	ble.n	80070fe <_strtod_l+0x756>
 80070ec:	462a      	mov	r2, r5
 80070ee:	9905      	ldr	r1, [sp, #20]
 80070f0:	4648      	mov	r0, r9
 80070f2:	f001 fe8f 	bl	8008e14 <__lshift>
 80070f6:	9005      	str	r0, [sp, #20]
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f43f ae73 	beq.w	8006de4 <_strtod_l+0x43c>
 80070fe:	2f00      	cmp	r7, #0
 8007100:	dd08      	ble.n	8007114 <_strtod_l+0x76c>
 8007102:	4641      	mov	r1, r8
 8007104:	463a      	mov	r2, r7
 8007106:	4648      	mov	r0, r9
 8007108:	f001 fe84 	bl	8008e14 <__lshift>
 800710c:	4680      	mov	r8, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f ae68 	beq.w	8006de4 <_strtod_l+0x43c>
 8007114:	9a05      	ldr	r2, [sp, #20]
 8007116:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007118:	4648      	mov	r0, r9
 800711a:	f001 fee9 	bl	8008ef0 <__mdiff>
 800711e:	4604      	mov	r4, r0
 8007120:	2800      	cmp	r0, #0
 8007122:	f43f ae5f 	beq.w	8006de4 <_strtod_l+0x43c>
 8007126:	68c3      	ldr	r3, [r0, #12]
 8007128:	930c      	str	r3, [sp, #48]	; 0x30
 800712a:	2300      	movs	r3, #0
 800712c:	60c3      	str	r3, [r0, #12]
 800712e:	4641      	mov	r1, r8
 8007130:	f001 fec4 	bl	8008ebc <__mcmp>
 8007134:	2800      	cmp	r0, #0
 8007136:	da55      	bge.n	80071e4 <_strtod_l+0x83c>
 8007138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800713a:	b9e3      	cbnz	r3, 8007176 <_strtod_l+0x7ce>
 800713c:	f1ba 0f00 	cmp.w	sl, #0
 8007140:	d119      	bne.n	8007176 <_strtod_l+0x7ce>
 8007142:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007146:	b9b3      	cbnz	r3, 8007176 <_strtod_l+0x7ce>
 8007148:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007154:	d90f      	bls.n	8007176 <_strtod_l+0x7ce>
 8007156:	6963      	ldr	r3, [r4, #20]
 8007158:	b913      	cbnz	r3, 8007160 <_strtod_l+0x7b8>
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	2b01      	cmp	r3, #1
 800715e:	dd0a      	ble.n	8007176 <_strtod_l+0x7ce>
 8007160:	4621      	mov	r1, r4
 8007162:	2201      	movs	r2, #1
 8007164:	4648      	mov	r0, r9
 8007166:	f001 fe55 	bl	8008e14 <__lshift>
 800716a:	4641      	mov	r1, r8
 800716c:	4604      	mov	r4, r0
 800716e:	f001 fea5 	bl	8008ebc <__mcmp>
 8007172:	2800      	cmp	r0, #0
 8007174:	dc67      	bgt.n	8007246 <_strtod_l+0x89e>
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d171      	bne.n	8007260 <_strtod_l+0x8b8>
 800717c:	e63d      	b.n	8006dfa <_strtod_l+0x452>
 800717e:	f018 0f01 	tst.w	r8, #1
 8007182:	d004      	beq.n	800718e <_strtod_l+0x7e6>
 8007184:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007188:	f7f9 fa36 	bl	80005f8 <__aeabi_dmul>
 800718c:	2301      	movs	r3, #1
 800718e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007192:	3508      	adds	r5, #8
 8007194:	e6e5      	b.n	8006f62 <_strtod_l+0x5ba>
 8007196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	ea03 0a0a 	and.w	sl, r3, sl
 80071a2:	e6ff      	b.n	8006fa4 <_strtod_l+0x5fc>
 80071a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80071a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80071ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80071b0:	36e2      	adds	r6, #226	; 0xe2
 80071b2:	fa01 f306 	lsl.w	r3, r1, r6
 80071b6:	930a      	str	r3, [sp, #40]	; 0x28
 80071b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80071ba:	e75d      	b.n	8007078 <_strtod_l+0x6d0>
 80071bc:	2300      	movs	r3, #0
 80071be:	930a      	str	r3, [sp, #40]	; 0x28
 80071c0:	2301      	movs	r3, #1
 80071c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c4:	e758      	b.n	8007078 <_strtod_l+0x6d0>
 80071c6:	4632      	mov	r2, r6
 80071c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071ca:	4648      	mov	r0, r9
 80071cc:	f001 fe22 	bl	8008e14 <__lshift>
 80071d0:	901c      	str	r0, [sp, #112]	; 0x70
 80071d2:	2800      	cmp	r0, #0
 80071d4:	f47f af7c 	bne.w	80070d0 <_strtod_l+0x728>
 80071d8:	e604      	b.n	8006de4 <_strtod_l+0x43c>
 80071da:	bf00      	nop
 80071dc:	08009808 	.word	0x08009808
 80071e0:	fffffc02 	.word	0xfffffc02
 80071e4:	465d      	mov	r5, fp
 80071e6:	f040 8086 	bne.w	80072f6 <_strtod_l+0x94e>
 80071ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071f0:	b32a      	cbz	r2, 800723e <_strtod_l+0x896>
 80071f2:	4aaf      	ldr	r2, [pc, #700]	; (80074b0 <_strtod_l+0xb08>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d153      	bne.n	80072a0 <_strtod_l+0x8f8>
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	4650      	mov	r0, sl
 80071fc:	b1d3      	cbz	r3, 8007234 <_strtod_l+0x88c>
 80071fe:	4aad      	ldr	r2, [pc, #692]	; (80074b4 <_strtod_l+0xb0c>)
 8007200:	402a      	ands	r2, r5
 8007202:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007206:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800720a:	d816      	bhi.n	800723a <_strtod_l+0x892>
 800720c:	0d12      	lsrs	r2, r2, #20
 800720e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	4298      	cmp	r0, r3
 8007218:	d142      	bne.n	80072a0 <_strtod_l+0x8f8>
 800721a:	4ba7      	ldr	r3, [pc, #668]	; (80074b8 <_strtod_l+0xb10>)
 800721c:	429d      	cmp	r5, r3
 800721e:	d102      	bne.n	8007226 <_strtod_l+0x87e>
 8007220:	3001      	adds	r0, #1
 8007222:	f43f addf 	beq.w	8006de4 <_strtod_l+0x43c>
 8007226:	4ba3      	ldr	r3, [pc, #652]	; (80074b4 <_strtod_l+0xb0c>)
 8007228:	402b      	ands	r3, r5
 800722a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800722e:	f04f 0a00 	mov.w	sl, #0
 8007232:	e7a0      	b.n	8007176 <_strtod_l+0x7ce>
 8007234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007238:	e7ed      	b.n	8007216 <_strtod_l+0x86e>
 800723a:	460b      	mov	r3, r1
 800723c:	e7eb      	b.n	8007216 <_strtod_l+0x86e>
 800723e:	bb7b      	cbnz	r3, 80072a0 <_strtod_l+0x8f8>
 8007240:	f1ba 0f00 	cmp.w	sl, #0
 8007244:	d12c      	bne.n	80072a0 <_strtod_l+0x8f8>
 8007246:	9904      	ldr	r1, [sp, #16]
 8007248:	4a9a      	ldr	r2, [pc, #616]	; (80074b4 <_strtod_l+0xb0c>)
 800724a:	465b      	mov	r3, fp
 800724c:	b1f1      	cbz	r1, 800728c <_strtod_l+0x8e4>
 800724e:	ea02 010b 	and.w	r1, r2, fp
 8007252:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007256:	dc19      	bgt.n	800728c <_strtod_l+0x8e4>
 8007258:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800725c:	f77f ae5b 	ble.w	8006f16 <_strtod_l+0x56e>
 8007260:	4a96      	ldr	r2, [pc, #600]	; (80074bc <_strtod_l+0xb14>)
 8007262:	2300      	movs	r3, #0
 8007264:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007268:	4650      	mov	r0, sl
 800726a:	4659      	mov	r1, fp
 800726c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007270:	f7f9 f9c2 	bl	80005f8 <__aeabi_dmul>
 8007274:	4682      	mov	sl, r0
 8007276:	468b      	mov	fp, r1
 8007278:	2900      	cmp	r1, #0
 800727a:	f47f adbe 	bne.w	8006dfa <_strtod_l+0x452>
 800727e:	2800      	cmp	r0, #0
 8007280:	f47f adbb 	bne.w	8006dfa <_strtod_l+0x452>
 8007284:	2322      	movs	r3, #34	; 0x22
 8007286:	f8c9 3000 	str.w	r3, [r9]
 800728a:	e5b6      	b.n	8006dfa <_strtod_l+0x452>
 800728c:	4013      	ands	r3, r2
 800728e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007292:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007296:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800729a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800729e:	e76a      	b.n	8007176 <_strtod_l+0x7ce>
 80072a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a2:	b193      	cbz	r3, 80072ca <_strtod_l+0x922>
 80072a4:	422b      	tst	r3, r5
 80072a6:	f43f af66 	beq.w	8007176 <_strtod_l+0x7ce>
 80072aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ac:	9a04      	ldr	r2, [sp, #16]
 80072ae:	4650      	mov	r0, sl
 80072b0:	4659      	mov	r1, fp
 80072b2:	b173      	cbz	r3, 80072d2 <_strtod_l+0x92a>
 80072b4:	f7ff fb5c 	bl	8006970 <sulp>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072c0:	f7f8 ffe4 	bl	800028c <__adddf3>
 80072c4:	4682      	mov	sl, r0
 80072c6:	468b      	mov	fp, r1
 80072c8:	e755      	b.n	8007176 <_strtod_l+0x7ce>
 80072ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072cc:	ea13 0f0a 	tst.w	r3, sl
 80072d0:	e7e9      	b.n	80072a6 <_strtod_l+0x8fe>
 80072d2:	f7ff fb4d 	bl	8006970 <sulp>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072de:	f7f8 ffd3 	bl	8000288 <__aeabi_dsub>
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	4682      	mov	sl, r0
 80072e8:	468b      	mov	fp, r1
 80072ea:	f7f9 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f47f ae11 	bne.w	8006f16 <_strtod_l+0x56e>
 80072f4:	e73f      	b.n	8007176 <_strtod_l+0x7ce>
 80072f6:	4641      	mov	r1, r8
 80072f8:	4620      	mov	r0, r4
 80072fa:	f001 ff1c 	bl	8009136 <__ratio>
 80072fe:	ec57 6b10 	vmov	r6, r7, d0
 8007302:	2200      	movs	r2, #0
 8007304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007308:	ee10 0a10 	vmov	r0, s0
 800730c:	4639      	mov	r1, r7
 800730e:	f7f9 fbef 	bl	8000af0 <__aeabi_dcmple>
 8007312:	2800      	cmp	r0, #0
 8007314:	d077      	beq.n	8007406 <_strtod_l+0xa5e>
 8007316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007318:	2b00      	cmp	r3, #0
 800731a:	d04a      	beq.n	80073b2 <_strtod_l+0xa0a>
 800731c:	4b68      	ldr	r3, [pc, #416]	; (80074c0 <_strtod_l+0xb18>)
 800731e:	2200      	movs	r2, #0
 8007320:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007324:	4f66      	ldr	r7, [pc, #408]	; (80074c0 <_strtod_l+0xb18>)
 8007326:	2600      	movs	r6, #0
 8007328:	4b62      	ldr	r3, [pc, #392]	; (80074b4 <_strtod_l+0xb0c>)
 800732a:	402b      	ands	r3, r5
 800732c:	930f      	str	r3, [sp, #60]	; 0x3c
 800732e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007330:	4b64      	ldr	r3, [pc, #400]	; (80074c4 <_strtod_l+0xb1c>)
 8007332:	429a      	cmp	r2, r3
 8007334:	f040 80ce 	bne.w	80074d4 <_strtod_l+0xb2c>
 8007338:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800733c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007340:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007344:	ec4b ab10 	vmov	d0, sl, fp
 8007348:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800734c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007350:	f001 fe2c 	bl	8008fac <__ulp>
 8007354:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007358:	ec53 2b10 	vmov	r2, r3, d0
 800735c:	f7f9 f94c 	bl	80005f8 <__aeabi_dmul>
 8007360:	4652      	mov	r2, sl
 8007362:	465b      	mov	r3, fp
 8007364:	f7f8 ff92 	bl	800028c <__adddf3>
 8007368:	460b      	mov	r3, r1
 800736a:	4952      	ldr	r1, [pc, #328]	; (80074b4 <_strtod_l+0xb0c>)
 800736c:	4a56      	ldr	r2, [pc, #344]	; (80074c8 <_strtod_l+0xb20>)
 800736e:	4019      	ands	r1, r3
 8007370:	4291      	cmp	r1, r2
 8007372:	4682      	mov	sl, r0
 8007374:	d95b      	bls.n	800742e <_strtod_l+0xa86>
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800737c:	4293      	cmp	r3, r2
 800737e:	d103      	bne.n	8007388 <_strtod_l+0x9e0>
 8007380:	9b08      	ldr	r3, [sp, #32]
 8007382:	3301      	adds	r3, #1
 8007384:	f43f ad2e 	beq.w	8006de4 <_strtod_l+0x43c>
 8007388:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80074b8 <_strtod_l+0xb10>
 800738c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007390:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007392:	4648      	mov	r0, r9
 8007394:	f001 fb73 	bl	8008a7e <_Bfree>
 8007398:	9905      	ldr	r1, [sp, #20]
 800739a:	4648      	mov	r0, r9
 800739c:	f001 fb6f 	bl	8008a7e <_Bfree>
 80073a0:	4641      	mov	r1, r8
 80073a2:	4648      	mov	r0, r9
 80073a4:	f001 fb6b 	bl	8008a7e <_Bfree>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4648      	mov	r0, r9
 80073ac:	f001 fb67 	bl	8008a7e <_Bfree>
 80073b0:	e619      	b.n	8006fe6 <_strtod_l+0x63e>
 80073b2:	f1ba 0f00 	cmp.w	sl, #0
 80073b6:	d11a      	bne.n	80073ee <_strtod_l+0xa46>
 80073b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073bc:	b9eb      	cbnz	r3, 80073fa <_strtod_l+0xa52>
 80073be:	2200      	movs	r2, #0
 80073c0:	4b3f      	ldr	r3, [pc, #252]	; (80074c0 <_strtod_l+0xb18>)
 80073c2:	4630      	mov	r0, r6
 80073c4:	4639      	mov	r1, r7
 80073c6:	f7f9 fb89 	bl	8000adc <__aeabi_dcmplt>
 80073ca:	b9c8      	cbnz	r0, 8007400 <_strtod_l+0xa58>
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	2200      	movs	r2, #0
 80073d2:	4b3e      	ldr	r3, [pc, #248]	; (80074cc <_strtod_l+0xb24>)
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4606      	mov	r6, r0
 80073da:	460f      	mov	r7, r1
 80073dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80073e0:	9618      	str	r6, [sp, #96]	; 0x60
 80073e2:	9319      	str	r3, [sp, #100]	; 0x64
 80073e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80073e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80073ec:	e79c      	b.n	8007328 <_strtod_l+0x980>
 80073ee:	f1ba 0f01 	cmp.w	sl, #1
 80073f2:	d102      	bne.n	80073fa <_strtod_l+0xa52>
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	f43f ad8e 	beq.w	8006f16 <_strtod_l+0x56e>
 80073fa:	2200      	movs	r2, #0
 80073fc:	4b34      	ldr	r3, [pc, #208]	; (80074d0 <_strtod_l+0xb28>)
 80073fe:	e78f      	b.n	8007320 <_strtod_l+0x978>
 8007400:	2600      	movs	r6, #0
 8007402:	4f32      	ldr	r7, [pc, #200]	; (80074cc <_strtod_l+0xb24>)
 8007404:	e7ea      	b.n	80073dc <_strtod_l+0xa34>
 8007406:	4b31      	ldr	r3, [pc, #196]	; (80074cc <_strtod_l+0xb24>)
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	2200      	movs	r2, #0
 800740e:	f7f9 f8f3 	bl	80005f8 <__aeabi_dmul>
 8007412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007414:	4606      	mov	r6, r0
 8007416:	460f      	mov	r7, r1
 8007418:	b933      	cbnz	r3, 8007428 <_strtod_l+0xa80>
 800741a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800741e:	9010      	str	r0, [sp, #64]	; 0x40
 8007420:	9311      	str	r3, [sp, #68]	; 0x44
 8007422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007426:	e7df      	b.n	80073e8 <_strtod_l+0xa40>
 8007428:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800742c:	e7f9      	b.n	8007422 <_strtod_l+0xa7a>
 800742e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1ab      	bne.n	8007390 <_strtod_l+0x9e8>
 8007438:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800743c:	0d1b      	lsrs	r3, r3, #20
 800743e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007440:	051b      	lsls	r3, r3, #20
 8007442:	429a      	cmp	r2, r3
 8007444:	465d      	mov	r5, fp
 8007446:	d1a3      	bne.n	8007390 <_strtod_l+0x9e8>
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	f7f9 fb84 	bl	8000b58 <__aeabi_d2iz>
 8007450:	f7f9 f868 	bl	8000524 <__aeabi_i2d>
 8007454:	460b      	mov	r3, r1
 8007456:	4602      	mov	r2, r0
 8007458:	4639      	mov	r1, r7
 800745a:	4630      	mov	r0, r6
 800745c:	f7f8 ff14 	bl	8000288 <__aeabi_dsub>
 8007460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007462:	4606      	mov	r6, r0
 8007464:	460f      	mov	r7, r1
 8007466:	b933      	cbnz	r3, 8007476 <_strtod_l+0xace>
 8007468:	f1ba 0f00 	cmp.w	sl, #0
 800746c:	d103      	bne.n	8007476 <_strtod_l+0xace>
 800746e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007472:	2d00      	cmp	r5, #0
 8007474:	d06d      	beq.n	8007552 <_strtod_l+0xbaa>
 8007476:	a30a      	add	r3, pc, #40	; (adr r3, 80074a0 <_strtod_l+0xaf8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 fb2c 	bl	8000adc <__aeabi_dcmplt>
 8007484:	2800      	cmp	r0, #0
 8007486:	f47f acb8 	bne.w	8006dfa <_strtod_l+0x452>
 800748a:	a307      	add	r3, pc, #28	; (adr r3, 80074a8 <_strtod_l+0xb00>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 8007498:	2800      	cmp	r0, #0
 800749a:	f43f af79 	beq.w	8007390 <_strtod_l+0x9e8>
 800749e:	e4ac      	b.n	8006dfa <_strtod_l+0x452>
 80074a0:	94a03595 	.word	0x94a03595
 80074a4:	3fdfffff 	.word	0x3fdfffff
 80074a8:	35afe535 	.word	0x35afe535
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	000fffff 	.word	0x000fffff
 80074b4:	7ff00000 	.word	0x7ff00000
 80074b8:	7fefffff 	.word	0x7fefffff
 80074bc:	39500000 	.word	0x39500000
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	7fe00000 	.word	0x7fe00000
 80074c8:	7c9fffff 	.word	0x7c9fffff
 80074cc:	3fe00000 	.word	0x3fe00000
 80074d0:	bff00000 	.word	0xbff00000
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	b333      	cbz	r3, 8007526 <_strtod_l+0xb7e>
 80074d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074de:	d822      	bhi.n	8007526 <_strtod_l+0xb7e>
 80074e0:	a327      	add	r3, pc, #156	; (adr r3, 8007580 <_strtod_l+0xbd8>)
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	4630      	mov	r0, r6
 80074e8:	4639      	mov	r1, r7
 80074ea:	f7f9 fb01 	bl	8000af0 <__aeabi_dcmple>
 80074ee:	b1a0      	cbz	r0, 800751a <_strtod_l+0xb72>
 80074f0:	4639      	mov	r1, r7
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7f9 fb58 	bl	8000ba8 <__aeabi_d2uiz>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	bf08      	it	eq
 80074fc:	2001      	moveq	r0, #1
 80074fe:	f7f9 f801 	bl	8000504 <__aeabi_ui2d>
 8007502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	bb03      	cbnz	r3, 800754c <_strtod_l+0xba4>
 800750a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800750e:	9012      	str	r0, [sp, #72]	; 0x48
 8007510:	9313      	str	r3, [sp, #76]	; 0x4c
 8007512:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007516:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800751a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800751c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800751e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	930b      	str	r3, [sp, #44]	; 0x2c
 8007526:	ed9d 0b08 	vldr	d0, [sp, #32]
 800752a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800752e:	f001 fd3d 	bl	8008fac <__ulp>
 8007532:	4650      	mov	r0, sl
 8007534:	ec53 2b10 	vmov	r2, r3, d0
 8007538:	4659      	mov	r1, fp
 800753a:	f7f9 f85d 	bl	80005f8 <__aeabi_dmul>
 800753e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007542:	f7f8 fea3 	bl	800028c <__adddf3>
 8007546:	4682      	mov	sl, r0
 8007548:	468b      	mov	fp, r1
 800754a:	e772      	b.n	8007432 <_strtod_l+0xa8a>
 800754c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007550:	e7df      	b.n	8007512 <_strtod_l+0xb6a>
 8007552:	a30d      	add	r3, pc, #52	; (adr r3, 8007588 <_strtod_l+0xbe0>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f9 fac0 	bl	8000adc <__aeabi_dcmplt>
 800755c:	e79c      	b.n	8007498 <_strtod_l+0xaf0>
 800755e:	2300      	movs	r3, #0
 8007560:	930d      	str	r3, [sp, #52]	; 0x34
 8007562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	f7ff ba61 	b.w	8006a2e <_strtod_l+0x86>
 800756c:	2b65      	cmp	r3, #101	; 0x65
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f43f ab4e 	beq.w	8006c12 <_strtod_l+0x26a>
 8007576:	2101      	movs	r1, #1
 8007578:	4614      	mov	r4, r2
 800757a:	9104      	str	r1, [sp, #16]
 800757c:	f7ff bacb 	b.w	8006b16 <_strtod_l+0x16e>
 8007580:	ffc00000 	.word	0xffc00000
 8007584:	41dfffff 	.word	0x41dfffff
 8007588:	94a03595 	.word	0x94a03595
 800758c:	3fcfffff 	.word	0x3fcfffff

08007590 <_strtod_r>:
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <_strtod_r+0x18>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	b410      	push	{r4}
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	4c04      	ldr	r4, [pc, #16]	; (80075ac <_strtod_r+0x1c>)
 800759a:	2b00      	cmp	r3, #0
 800759c:	bf08      	it	eq
 800759e:	4623      	moveq	r3, r4
 80075a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a4:	f7ff ba00 	b.w	80069a8 <_strtod_l>
 80075a8:	2000000c 	.word	0x2000000c
 80075ac:	20000070 	.word	0x20000070

080075b0 <_strtol_l.isra.0>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	4692      	mov	sl, r2
 80075ba:	461e      	mov	r6, r3
 80075bc:	460f      	mov	r7, r1
 80075be:	463d      	mov	r5, r7
 80075c0:	9808      	ldr	r0, [sp, #32]
 80075c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c6:	f001 f9ed 	bl	80089a4 <__locale_ctype_ptr_l>
 80075ca:	4420      	add	r0, r4
 80075cc:	7843      	ldrb	r3, [r0, #1]
 80075ce:	f013 0308 	ands.w	r3, r3, #8
 80075d2:	d132      	bne.n	800763a <_strtol_l.isra.0+0x8a>
 80075d4:	2c2d      	cmp	r4, #45	; 0x2d
 80075d6:	d132      	bne.n	800763e <_strtol_l.isra.0+0x8e>
 80075d8:	787c      	ldrb	r4, [r7, #1]
 80075da:	1cbd      	adds	r5, r7, #2
 80075dc:	2201      	movs	r2, #1
 80075de:	2e00      	cmp	r6, #0
 80075e0:	d05d      	beq.n	800769e <_strtol_l.isra.0+0xee>
 80075e2:	2e10      	cmp	r6, #16
 80075e4:	d109      	bne.n	80075fa <_strtol_l.isra.0+0x4a>
 80075e6:	2c30      	cmp	r4, #48	; 0x30
 80075e8:	d107      	bne.n	80075fa <_strtol_l.isra.0+0x4a>
 80075ea:	782b      	ldrb	r3, [r5, #0]
 80075ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075f0:	2b58      	cmp	r3, #88	; 0x58
 80075f2:	d14f      	bne.n	8007694 <_strtol_l.isra.0+0xe4>
 80075f4:	786c      	ldrb	r4, [r5, #1]
 80075f6:	2610      	movs	r6, #16
 80075f8:	3502      	adds	r5, #2
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	bf14      	ite	ne
 80075fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007602:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007606:	2700      	movs	r7, #0
 8007608:	fbb1 fcf6 	udiv	ip, r1, r6
 800760c:	4638      	mov	r0, r7
 800760e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007612:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007616:	2b09      	cmp	r3, #9
 8007618:	d817      	bhi.n	800764a <_strtol_l.isra.0+0x9a>
 800761a:	461c      	mov	r4, r3
 800761c:	42a6      	cmp	r6, r4
 800761e:	dd23      	ble.n	8007668 <_strtol_l.isra.0+0xb8>
 8007620:	1c7b      	adds	r3, r7, #1
 8007622:	d007      	beq.n	8007634 <_strtol_l.isra.0+0x84>
 8007624:	4584      	cmp	ip, r0
 8007626:	d31c      	bcc.n	8007662 <_strtol_l.isra.0+0xb2>
 8007628:	d101      	bne.n	800762e <_strtol_l.isra.0+0x7e>
 800762a:	45a6      	cmp	lr, r4
 800762c:	db19      	blt.n	8007662 <_strtol_l.isra.0+0xb2>
 800762e:	fb00 4006 	mla	r0, r0, r6, r4
 8007632:	2701      	movs	r7, #1
 8007634:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007638:	e7eb      	b.n	8007612 <_strtol_l.isra.0+0x62>
 800763a:	462f      	mov	r7, r5
 800763c:	e7bf      	b.n	80075be <_strtol_l.isra.0+0xe>
 800763e:	2c2b      	cmp	r4, #43	; 0x2b
 8007640:	bf04      	itt	eq
 8007642:	1cbd      	addeq	r5, r7, #2
 8007644:	787c      	ldrbeq	r4, [r7, #1]
 8007646:	461a      	mov	r2, r3
 8007648:	e7c9      	b.n	80075de <_strtol_l.isra.0+0x2e>
 800764a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800764e:	2b19      	cmp	r3, #25
 8007650:	d801      	bhi.n	8007656 <_strtol_l.isra.0+0xa6>
 8007652:	3c37      	subs	r4, #55	; 0x37
 8007654:	e7e2      	b.n	800761c <_strtol_l.isra.0+0x6c>
 8007656:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800765a:	2b19      	cmp	r3, #25
 800765c:	d804      	bhi.n	8007668 <_strtol_l.isra.0+0xb8>
 800765e:	3c57      	subs	r4, #87	; 0x57
 8007660:	e7dc      	b.n	800761c <_strtol_l.isra.0+0x6c>
 8007662:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007666:	e7e5      	b.n	8007634 <_strtol_l.isra.0+0x84>
 8007668:	1c7b      	adds	r3, r7, #1
 800766a:	d108      	bne.n	800767e <_strtol_l.isra.0+0xce>
 800766c:	2322      	movs	r3, #34	; 0x22
 800766e:	f8c8 3000 	str.w	r3, [r8]
 8007672:	4608      	mov	r0, r1
 8007674:	f1ba 0f00 	cmp.w	sl, #0
 8007678:	d107      	bne.n	800768a <_strtol_l.isra.0+0xda>
 800767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767e:	b102      	cbz	r2, 8007682 <_strtol_l.isra.0+0xd2>
 8007680:	4240      	negs	r0, r0
 8007682:	f1ba 0f00 	cmp.w	sl, #0
 8007686:	d0f8      	beq.n	800767a <_strtol_l.isra.0+0xca>
 8007688:	b10f      	cbz	r7, 800768e <_strtol_l.isra.0+0xde>
 800768a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800768e:	f8ca 9000 	str.w	r9, [sl]
 8007692:	e7f2      	b.n	800767a <_strtol_l.isra.0+0xca>
 8007694:	2430      	movs	r4, #48	; 0x30
 8007696:	2e00      	cmp	r6, #0
 8007698:	d1af      	bne.n	80075fa <_strtol_l.isra.0+0x4a>
 800769a:	2608      	movs	r6, #8
 800769c:	e7ad      	b.n	80075fa <_strtol_l.isra.0+0x4a>
 800769e:	2c30      	cmp	r4, #48	; 0x30
 80076a0:	d0a3      	beq.n	80075ea <_strtol_l.isra.0+0x3a>
 80076a2:	260a      	movs	r6, #10
 80076a4:	e7a9      	b.n	80075fa <_strtol_l.isra.0+0x4a>
	...

080076a8 <_strtol_r>:
 80076a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076aa:	4c06      	ldr	r4, [pc, #24]	; (80076c4 <_strtol_r+0x1c>)
 80076ac:	4d06      	ldr	r5, [pc, #24]	; (80076c8 <_strtol_r+0x20>)
 80076ae:	6824      	ldr	r4, [r4, #0]
 80076b0:	6a24      	ldr	r4, [r4, #32]
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	bf08      	it	eq
 80076b6:	462c      	moveq	r4, r5
 80076b8:	9400      	str	r4, [sp, #0]
 80076ba:	f7ff ff79 	bl	80075b0 <_strtol_l.isra.0>
 80076be:	b003      	add	sp, #12
 80076c0:	bd30      	pop	{r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	2000000c 	.word	0x2000000c
 80076c8:	20000070 	.word	0x20000070

080076cc <quorem>:
 80076cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	6903      	ldr	r3, [r0, #16]
 80076d2:	690c      	ldr	r4, [r1, #16]
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	4680      	mov	r8, r0
 80076d8:	f2c0 8082 	blt.w	80077e0 <quorem+0x114>
 80076dc:	3c01      	subs	r4, #1
 80076de:	f101 0714 	add.w	r7, r1, #20
 80076e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80076e6:	f100 0614 	add.w	r6, r0, #20
 80076ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80076ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80076f2:	eb06 030c 	add.w	r3, r6, ip
 80076f6:	3501      	adds	r5, #1
 80076f8:	eb07 090c 	add.w	r9, r7, ip
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8007702:	b395      	cbz	r5, 800776a <quorem+0x9e>
 8007704:	f04f 0a00 	mov.w	sl, #0
 8007708:	4638      	mov	r0, r7
 800770a:	46b6      	mov	lr, r6
 800770c:	46d3      	mov	fp, sl
 800770e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007712:	b293      	uxth	r3, r2
 8007714:	fb05 a303 	mla	r3, r5, r3, sl
 8007718:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800771c:	b29b      	uxth	r3, r3
 800771e:	ebab 0303 	sub.w	r3, fp, r3
 8007722:	0c12      	lsrs	r2, r2, #16
 8007724:	f8de b000 	ldr.w	fp, [lr]
 8007728:	fb05 a202 	mla	r2, r5, r2, sl
 800772c:	fa13 f38b 	uxtah	r3, r3, fp
 8007730:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007734:	fa1f fb82 	uxth.w	fp, r2
 8007738:	f8de 2000 	ldr.w	r2, [lr]
 800773c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007744:	b29b      	uxth	r3, r3
 8007746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800774a:	4581      	cmp	r9, r0
 800774c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007750:	f84e 3b04 	str.w	r3, [lr], #4
 8007754:	d2db      	bcs.n	800770e <quorem+0x42>
 8007756:	f856 300c 	ldr.w	r3, [r6, ip]
 800775a:	b933      	cbnz	r3, 800776a <quorem+0x9e>
 800775c:	9b01      	ldr	r3, [sp, #4]
 800775e:	3b04      	subs	r3, #4
 8007760:	429e      	cmp	r6, r3
 8007762:	461a      	mov	r2, r3
 8007764:	d330      	bcc.n	80077c8 <quorem+0xfc>
 8007766:	f8c8 4010 	str.w	r4, [r8, #16]
 800776a:	4640      	mov	r0, r8
 800776c:	f001 fba6 	bl	8008ebc <__mcmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	db25      	blt.n	80077c0 <quorem+0xf4>
 8007774:	3501      	adds	r5, #1
 8007776:	4630      	mov	r0, r6
 8007778:	f04f 0c00 	mov.w	ip, #0
 800777c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007780:	f8d0 e000 	ldr.w	lr, [r0]
 8007784:	b293      	uxth	r3, r2
 8007786:	ebac 0303 	sub.w	r3, ip, r3
 800778a:	0c12      	lsrs	r2, r2, #16
 800778c:	fa13 f38e 	uxtah	r3, r3, lr
 8007790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800779e:	45b9      	cmp	r9, r7
 80077a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077a4:	f840 3b04 	str.w	r3, [r0], #4
 80077a8:	d2e8      	bcs.n	800777c <quorem+0xb0>
 80077aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80077ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80077b2:	b92a      	cbnz	r2, 80077c0 <quorem+0xf4>
 80077b4:	3b04      	subs	r3, #4
 80077b6:	429e      	cmp	r6, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	d30b      	bcc.n	80077d4 <quorem+0x108>
 80077bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80077c0:	4628      	mov	r0, r5
 80077c2:	b003      	add	sp, #12
 80077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	3b04      	subs	r3, #4
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	d1ca      	bne.n	8007766 <quorem+0x9a>
 80077d0:	3c01      	subs	r4, #1
 80077d2:	e7c5      	b.n	8007760 <quorem+0x94>
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	3b04      	subs	r3, #4
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d1ef      	bne.n	80077bc <quorem+0xf0>
 80077dc:	3c01      	subs	r4, #1
 80077de:	e7ea      	b.n	80077b6 <quorem+0xea>
 80077e0:	2000      	movs	r0, #0
 80077e2:	e7ee      	b.n	80077c2 <quorem+0xf6>
 80077e4:	0000      	movs	r0, r0
	...

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ec57 6b10 	vmov	r6, r7, d0
 80077f0:	b097      	sub	sp, #92	; 0x5c
 80077f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077f4:	9106      	str	r1, [sp, #24]
 80077f6:	4604      	mov	r4, r0
 80077f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80077fa:	9312      	str	r3, [sp, #72]	; 0x48
 80077fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007800:	e9cd 6700 	strd	r6, r7, [sp]
 8007804:	b93d      	cbnz	r5, 8007816 <_dtoa_r+0x2e>
 8007806:	2010      	movs	r0, #16
 8007808:	f001 f8e0 	bl	80089cc <malloc>
 800780c:	6260      	str	r0, [r4, #36]	; 0x24
 800780e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007812:	6005      	str	r5, [r0, #0]
 8007814:	60c5      	str	r5, [r0, #12]
 8007816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	b151      	cbz	r1, 8007832 <_dtoa_r+0x4a>
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	604a      	str	r2, [r1, #4]
 8007820:	2301      	movs	r3, #1
 8007822:	4093      	lsls	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
 8007826:	4620      	mov	r0, r4
 8007828:	f001 f929 	bl	8008a7e <_Bfree>
 800782c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800782e:	2200      	movs	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	1e3b      	subs	r3, r7, #0
 8007834:	bfbb      	ittet	lt
 8007836:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800783a:	9301      	strlt	r3, [sp, #4]
 800783c:	2300      	movge	r3, #0
 800783e:	2201      	movlt	r2, #1
 8007840:	bfac      	ite	ge
 8007842:	f8c8 3000 	strge.w	r3, [r8]
 8007846:	f8c8 2000 	strlt.w	r2, [r8]
 800784a:	4baf      	ldr	r3, [pc, #700]	; (8007b08 <_dtoa_r+0x320>)
 800784c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007850:	ea33 0308 	bics.w	r3, r3, r8
 8007854:	d114      	bne.n	8007880 <_dtoa_r+0x98>
 8007856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007858:	f242 730f 	movw	r3, #9999	; 0x270f
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	9b00      	ldr	r3, [sp, #0]
 8007860:	b923      	cbnz	r3, 800786c <_dtoa_r+0x84>
 8007862:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007866:	2800      	cmp	r0, #0
 8007868:	f000 8542 	beq.w	80082f0 <_dtoa_r+0xb08>
 800786c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800786e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007b1c <_dtoa_r+0x334>
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 8544 	beq.w	8008300 <_dtoa_r+0xb18>
 8007878:	f10b 0303 	add.w	r3, fp, #3
 800787c:	f000 bd3e 	b.w	80082fc <_dtoa_r+0xb14>
 8007880:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f9 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007890:	4681      	mov	r9, r0
 8007892:	b168      	cbz	r0, 80078b0 <_dtoa_r+0xc8>
 8007894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007896:	2301      	movs	r3, #1
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8524 	beq.w	80082ea <_dtoa_r+0xb02>
 80078a2:	4b9a      	ldr	r3, [pc, #616]	; (8007b0c <_dtoa_r+0x324>)
 80078a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078a6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	f000 bd28 	b.w	8008300 <_dtoa_r+0xb18>
 80078b0:	aa14      	add	r2, sp, #80	; 0x50
 80078b2:	a915      	add	r1, sp, #84	; 0x54
 80078b4:	ec47 6b10 	vmov	d0, r6, r7
 80078b8:	4620      	mov	r0, r4
 80078ba:	f001 fbed 	bl	8009098 <__d2b>
 80078be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078c2:	9004      	str	r0, [sp, #16]
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	d07c      	beq.n	80079c2 <_dtoa_r+0x1da>
 80078c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80078d0:	46b2      	mov	sl, r6
 80078d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80078d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80078de:	2200      	movs	r2, #0
 80078e0:	4b8b      	ldr	r3, [pc, #556]	; (8007b10 <_dtoa_r+0x328>)
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	f7f8 fccf 	bl	8000288 <__aeabi_dsub>
 80078ea:	a381      	add	r3, pc, #516	; (adr r3, 8007af0 <_dtoa_r+0x308>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f7f8 fe82 	bl	80005f8 <__aeabi_dmul>
 80078f4:	a380      	add	r3, pc, #512	; (adr r3, 8007af8 <_dtoa_r+0x310>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 fcc7 	bl	800028c <__adddf3>
 80078fe:	4606      	mov	r6, r0
 8007900:	4628      	mov	r0, r5
 8007902:	460f      	mov	r7, r1
 8007904:	f7f8 fe0e 	bl	8000524 <__aeabi_i2d>
 8007908:	a37d      	add	r3, pc, #500	; (adr r3, 8007b00 <_dtoa_r+0x318>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 fe73 	bl	80005f8 <__aeabi_dmul>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4630      	mov	r0, r6
 8007918:	4639      	mov	r1, r7
 800791a:	f7f8 fcb7 	bl	800028c <__adddf3>
 800791e:	4606      	mov	r6, r0
 8007920:	460f      	mov	r7, r1
 8007922:	f7f9 f919 	bl	8000b58 <__aeabi_d2iz>
 8007926:	2200      	movs	r2, #0
 8007928:	4682      	mov	sl, r0
 800792a:	2300      	movs	r3, #0
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f9 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8007934:	b148      	cbz	r0, 800794a <_dtoa_r+0x162>
 8007936:	4650      	mov	r0, sl
 8007938:	f7f8 fdf4 	bl	8000524 <__aeabi_i2d>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	f7f9 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007944:	b908      	cbnz	r0, 800794a <_dtoa_r+0x162>
 8007946:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800794a:	f1ba 0f16 	cmp.w	sl, #22
 800794e:	d859      	bhi.n	8007a04 <_dtoa_r+0x21c>
 8007950:	4970      	ldr	r1, [pc, #448]	; (8007b14 <_dtoa_r+0x32c>)
 8007952:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800795a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800795e:	f7f9 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8007962:	2800      	cmp	r0, #0
 8007964:	d050      	beq.n	8007a08 <_dtoa_r+0x220>
 8007966:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800796a:	2300      	movs	r3, #0
 800796c:	930f      	str	r3, [sp, #60]	; 0x3c
 800796e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007970:	1b5d      	subs	r5, r3, r5
 8007972:	f1b5 0801 	subs.w	r8, r5, #1
 8007976:	bf49      	itett	mi
 8007978:	f1c5 0301 	rsbmi	r3, r5, #1
 800797c:	2300      	movpl	r3, #0
 800797e:	9305      	strmi	r3, [sp, #20]
 8007980:	f04f 0800 	movmi.w	r8, #0
 8007984:	bf58      	it	pl
 8007986:	9305      	strpl	r3, [sp, #20]
 8007988:	f1ba 0f00 	cmp.w	sl, #0
 800798c:	db3e      	blt.n	8007a0c <_dtoa_r+0x224>
 800798e:	2300      	movs	r3, #0
 8007990:	44d0      	add	r8, sl
 8007992:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007996:	9307      	str	r3, [sp, #28]
 8007998:	9b06      	ldr	r3, [sp, #24]
 800799a:	2b09      	cmp	r3, #9
 800799c:	f200 8090 	bhi.w	8007ac0 <_dtoa_r+0x2d8>
 80079a0:	2b05      	cmp	r3, #5
 80079a2:	bfc4      	itt	gt
 80079a4:	3b04      	subgt	r3, #4
 80079a6:	9306      	strgt	r3, [sp, #24]
 80079a8:	9b06      	ldr	r3, [sp, #24]
 80079aa:	f1a3 0302 	sub.w	r3, r3, #2
 80079ae:	bfcc      	ite	gt
 80079b0:	2500      	movgt	r5, #0
 80079b2:	2501      	movle	r5, #1
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	f200 808f 	bhi.w	8007ad8 <_dtoa_r+0x2f0>
 80079ba:	e8df f003 	tbb	[pc, r3]
 80079be:	7f7d      	.short	0x7f7d
 80079c0:	7131      	.short	0x7131
 80079c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80079c6:	441d      	add	r5, r3
 80079c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80079cc:	2820      	cmp	r0, #32
 80079ce:	dd13      	ble.n	80079f8 <_dtoa_r+0x210>
 80079d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	fa08 f800 	lsl.w	r8, r8, r0
 80079da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80079de:	fa23 f000 	lsr.w	r0, r3, r0
 80079e2:	ea48 0000 	orr.w	r0, r8, r0
 80079e6:	f7f8 fd8d 	bl	8000504 <__aeabi_ui2d>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4682      	mov	sl, r0
 80079ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80079f2:	3d01      	subs	r5, #1
 80079f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80079f6:	e772      	b.n	80078de <_dtoa_r+0xf6>
 80079f8:	9b00      	ldr	r3, [sp, #0]
 80079fa:	f1c0 0020 	rsb	r0, r0, #32
 80079fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007a02:	e7f0      	b.n	80079e6 <_dtoa_r+0x1fe>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e7b1      	b.n	800796c <_dtoa_r+0x184>
 8007a08:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a0a:	e7b0      	b.n	800796e <_dtoa_r+0x186>
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	eba3 030a 	sub.w	r3, r3, sl
 8007a12:	9305      	str	r3, [sp, #20]
 8007a14:	f1ca 0300 	rsb	r3, sl, #0
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a1e:	e7bb      	b.n	8007998 <_dtoa_r+0x1b0>
 8007a20:	2301      	movs	r3, #1
 8007a22:	930a      	str	r3, [sp, #40]	; 0x28
 8007a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dd59      	ble.n	8007ade <_dtoa_r+0x2f6>
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	4699      	mov	r9, r3
 8007a2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a30:	2200      	movs	r2, #0
 8007a32:	6072      	str	r2, [r6, #4]
 8007a34:	2204      	movs	r2, #4
 8007a36:	f102 0014 	add.w	r0, r2, #20
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	6871      	ldr	r1, [r6, #4]
 8007a3e:	d953      	bls.n	8007ae8 <_dtoa_r+0x300>
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 ffe8 	bl	8008a16 <_Balloc>
 8007a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a48:	6030      	str	r0, [r6, #0]
 8007a4a:	f1b9 0f0e 	cmp.w	r9, #14
 8007a4e:	f8d3 b000 	ldr.w	fp, [r3]
 8007a52:	f200 80e6 	bhi.w	8007c22 <_dtoa_r+0x43a>
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	f000 80e3 	beq.w	8007c22 <_dtoa_r+0x43a>
 8007a5c:	ed9d 7b00 	vldr	d7, [sp]
 8007a60:	f1ba 0f00 	cmp.w	sl, #0
 8007a64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007a68:	dd74      	ble.n	8007b54 <_dtoa_r+0x36c>
 8007a6a:	4a2a      	ldr	r2, [pc, #168]	; (8007b14 <_dtoa_r+0x32c>)
 8007a6c:	f00a 030f 	and.w	r3, sl, #15
 8007a70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a74:	ed93 7b00 	vldr	d7, [r3]
 8007a78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a7c:	06f0      	lsls	r0, r6, #27
 8007a7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007a82:	d565      	bpl.n	8007b50 <_dtoa_r+0x368>
 8007a84:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <_dtoa_r+0x330>)
 8007a86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a8e:	f7f8 fedd 	bl	800084c <__aeabi_ddiv>
 8007a92:	e9cd 0100 	strd	r0, r1, [sp]
 8007a96:	f006 060f 	and.w	r6, r6, #15
 8007a9a:	2503      	movs	r5, #3
 8007a9c:	4f1e      	ldr	r7, [pc, #120]	; (8007b18 <_dtoa_r+0x330>)
 8007a9e:	e04c      	b.n	8007b3a <_dtoa_r+0x352>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa6:	4453      	add	r3, sl
 8007aa8:	f103 0901 	add.w	r9, r3, #1
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	464b      	mov	r3, r9
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	bfb8      	it	lt
 8007ab4:	2301      	movlt	r3, #1
 8007ab6:	e7ba      	b.n	8007a2e <_dtoa_r+0x246>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e7b2      	b.n	8007a22 <_dtoa_r+0x23a>
 8007abc:	2300      	movs	r3, #0
 8007abe:	e7f0      	b.n	8007aa2 <_dtoa_r+0x2ba>
 8007ac0:	2501      	movs	r5, #1
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9306      	str	r3, [sp, #24]
 8007ac6:	950a      	str	r5, [sp, #40]	; 0x28
 8007ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007acc:	9302      	str	r3, [sp, #8]
 8007ace:	4699      	mov	r9, r3
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2312      	movs	r3, #18
 8007ad4:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ad6:	e7aa      	b.n	8007a2e <_dtoa_r+0x246>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	930a      	str	r3, [sp, #40]	; 0x28
 8007adc:	e7f4      	b.n	8007ac8 <_dtoa_r+0x2e0>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	4699      	mov	r9, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	e7f5      	b.n	8007ad4 <_dtoa_r+0x2ec>
 8007ae8:	3101      	adds	r1, #1
 8007aea:	6071      	str	r1, [r6, #4]
 8007aec:	0052      	lsls	r2, r2, #1
 8007aee:	e7a2      	b.n	8007a36 <_dtoa_r+0x24e>
 8007af0:	636f4361 	.word	0x636f4361
 8007af4:	3fd287a7 	.word	0x3fd287a7
 8007af8:	8b60c8b3 	.word	0x8b60c8b3
 8007afc:	3fc68a28 	.word	0x3fc68a28
 8007b00:	509f79fb 	.word	0x509f79fb
 8007b04:	3fd34413 	.word	0x3fd34413
 8007b08:	7ff00000 	.word	0x7ff00000
 8007b0c:	080097b5 	.word	0x080097b5
 8007b10:	3ff80000 	.word	0x3ff80000
 8007b14:	08009870 	.word	0x08009870
 8007b18:	08009848 	.word	0x08009848
 8007b1c:	08009839 	.word	0x08009839
 8007b20:	07f1      	lsls	r1, r6, #31
 8007b22:	d508      	bpl.n	8007b36 <_dtoa_r+0x34e>
 8007b24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b34:	3501      	adds	r5, #1
 8007b36:	1076      	asrs	r6, r6, #1
 8007b38:	3708      	adds	r7, #8
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	d1f0      	bne.n	8007b20 <_dtoa_r+0x338>
 8007b3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b46:	f7f8 fe81 	bl	800084c <__aeabi_ddiv>
 8007b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b4e:	e01a      	b.n	8007b86 <_dtoa_r+0x39e>
 8007b50:	2502      	movs	r5, #2
 8007b52:	e7a3      	b.n	8007a9c <_dtoa_r+0x2b4>
 8007b54:	f000 80a0 	beq.w	8007c98 <_dtoa_r+0x4b0>
 8007b58:	f1ca 0600 	rsb	r6, sl, #0
 8007b5c:	4b9f      	ldr	r3, [pc, #636]	; (8007ddc <_dtoa_r+0x5f4>)
 8007b5e:	4fa0      	ldr	r7, [pc, #640]	; (8007de0 <_dtoa_r+0x5f8>)
 8007b60:	f006 020f 	and.w	r2, r6, #15
 8007b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b70:	f7f8 fd42 	bl	80005f8 <__aeabi_dmul>
 8007b74:	e9cd 0100 	strd	r0, r1, [sp]
 8007b78:	1136      	asrs	r6, r6, #4
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2502      	movs	r5, #2
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	d17f      	bne.n	8007c82 <_dtoa_r+0x49a>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e1      	bne.n	8007b4a <_dtoa_r+0x362>
 8007b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8087 	beq.w	8007c9c <_dtoa_r+0x4b4>
 8007b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b92:	2200      	movs	r2, #0
 8007b94:	4b93      	ldr	r3, [pc, #588]	; (8007de4 <_dtoa_r+0x5fc>)
 8007b96:	4630      	mov	r0, r6
 8007b98:	4639      	mov	r1, r7
 8007b9a:	f7f8 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d07c      	beq.n	8007c9c <_dtoa_r+0x4b4>
 8007ba2:	f1b9 0f00 	cmp.w	r9, #0
 8007ba6:	d079      	beq.n	8007c9c <_dtoa_r+0x4b4>
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd35      	ble.n	8007c1a <_dtoa_r+0x432>
 8007bae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007bb2:	9308      	str	r3, [sp, #32]
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4b8b      	ldr	r3, [pc, #556]	; (8007de8 <_dtoa_r+0x600>)
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7f8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8007bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc4:	9f02      	ldr	r7, [sp, #8]
 8007bc6:	3501      	adds	r5, #1
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f7f8 fcab 	bl	8000524 <__aeabi_i2d>
 8007bce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bd2:	f7f8 fd11 	bl	80005f8 <__aeabi_dmul>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4b84      	ldr	r3, [pc, #528]	; (8007dec <_dtoa_r+0x604>)
 8007bda:	f7f8 fb57 	bl	800028c <__adddf3>
 8007bde:	4605      	mov	r5, r0
 8007be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007be4:	2f00      	cmp	r7, #0
 8007be6:	d15d      	bne.n	8007ca4 <_dtoa_r+0x4bc>
 8007be8:	2200      	movs	r2, #0
 8007bea:	4b81      	ldr	r3, [pc, #516]	; (8007df0 <_dtoa_r+0x608>)
 8007bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf0:	f7f8 fb4a 	bl	8000288 <__aeabi_dsub>
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4633      	mov	r3, r6
 8007bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8007bfc:	f7f8 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f040 8288 	bne.w	8008116 <_dtoa_r+0x92e>
 8007c06:	462a      	mov	r2, r5
 8007c08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c10:	f7f8 ff64 	bl	8000adc <__aeabi_dcmplt>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f040 827c 	bne.w	8008112 <_dtoa_r+0x92a>
 8007c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8007c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f2c0 8150 	blt.w	8007eca <_dtoa_r+0x6e2>
 8007c2a:	f1ba 0f0e 	cmp.w	sl, #14
 8007c2e:	f300 814c 	bgt.w	8007eca <_dtoa_r+0x6e2>
 8007c32:	4b6a      	ldr	r3, [pc, #424]	; (8007ddc <_dtoa_r+0x5f4>)
 8007c34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c38:	ed93 7b00 	vldr	d7, [r3]
 8007c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c44:	f280 80d8 	bge.w	8007df8 <_dtoa_r+0x610>
 8007c48:	f1b9 0f00 	cmp.w	r9, #0
 8007c4c:	f300 80d4 	bgt.w	8007df8 <_dtoa_r+0x610>
 8007c50:	f040 825e 	bne.w	8008110 <_dtoa_r+0x928>
 8007c54:	2200      	movs	r2, #0
 8007c56:	4b66      	ldr	r3, [pc, #408]	; (8007df0 <_dtoa_r+0x608>)
 8007c58:	ec51 0b17 	vmov	r0, r1, d7
 8007c5c:	f7f8 fccc 	bl	80005f8 <__aeabi_dmul>
 8007c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c64:	f7f8 ff4e 	bl	8000b04 <__aeabi_dcmpge>
 8007c68:	464f      	mov	r7, r9
 8007c6a:	464e      	mov	r6, r9
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f040 8234 	bne.w	80080da <_dtoa_r+0x8f2>
 8007c72:	2331      	movs	r3, #49	; 0x31
 8007c74:	f10b 0501 	add.w	r5, fp, #1
 8007c78:	f88b 3000 	strb.w	r3, [fp]
 8007c7c:	f10a 0a01 	add.w	sl, sl, #1
 8007c80:	e22f      	b.n	80080e2 <_dtoa_r+0x8fa>
 8007c82:	07f2      	lsls	r2, r6, #31
 8007c84:	d505      	bpl.n	8007c92 <_dtoa_r+0x4aa>
 8007c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	3501      	adds	r5, #1
 8007c90:	2301      	movs	r3, #1
 8007c92:	1076      	asrs	r6, r6, #1
 8007c94:	3708      	adds	r7, #8
 8007c96:	e772      	b.n	8007b7e <_dtoa_r+0x396>
 8007c98:	2502      	movs	r5, #2
 8007c9a:	e774      	b.n	8007b86 <_dtoa_r+0x39e>
 8007c9c:	f8cd a020 	str.w	sl, [sp, #32]
 8007ca0:	464f      	mov	r7, r9
 8007ca2:	e791      	b.n	8007bc8 <_dtoa_r+0x3e0>
 8007ca4:	4b4d      	ldr	r3, [pc, #308]	; (8007ddc <_dtoa_r+0x5f4>)
 8007ca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007caa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d047      	beq.n	8007d44 <_dtoa_r+0x55c>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	2000      	movs	r0, #0
 8007cba:	494e      	ldr	r1, [pc, #312]	; (8007df4 <_dtoa_r+0x60c>)
 8007cbc:	f7f8 fdc6 	bl	800084c <__aeabi_ddiv>
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4633      	mov	r3, r6
 8007cc4:	f7f8 fae0 	bl	8000288 <__aeabi_dsub>
 8007cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ccc:	465d      	mov	r5, fp
 8007cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cd2:	f7f8 ff41 	bl	8000b58 <__aeabi_d2iz>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	f7f8 fc24 	bl	8000524 <__aeabi_i2d>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ce4:	f7f8 fad0 	bl	8000288 <__aeabi_dsub>
 8007ce8:	3630      	adds	r6, #48	; 0x30
 8007cea:	f805 6b01 	strb.w	r6, [r5], #1
 8007cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cf2:	e9cd 0100 	strd	r0, r1, [sp]
 8007cf6:	f7f8 fef1 	bl	8000adc <__aeabi_dcmplt>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d163      	bne.n	8007dc6 <_dtoa_r+0x5de>
 8007cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d02:	2000      	movs	r0, #0
 8007d04:	4937      	ldr	r1, [pc, #220]	; (8007de4 <_dtoa_r+0x5fc>)
 8007d06:	f7f8 fabf 	bl	8000288 <__aeabi_dsub>
 8007d0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d0e:	f7f8 fee5 	bl	8000adc <__aeabi_dcmplt>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f040 80b7 	bne.w	8007e86 <_dtoa_r+0x69e>
 8007d18:	eba5 030b 	sub.w	r3, r5, fp
 8007d1c:	429f      	cmp	r7, r3
 8007d1e:	f77f af7c 	ble.w	8007c1a <_dtoa_r+0x432>
 8007d22:	2200      	movs	r2, #0
 8007d24:	4b30      	ldr	r3, [pc, #192]	; (8007de8 <_dtoa_r+0x600>)
 8007d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d2a:	f7f8 fc65 	bl	80005f8 <__aeabi_dmul>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d34:	4b2c      	ldr	r3, [pc, #176]	; (8007de8 <_dtoa_r+0x600>)
 8007d36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d3a:	f7f8 fc5d 	bl	80005f8 <__aeabi_dmul>
 8007d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8007d42:	e7c4      	b.n	8007cce <_dtoa_r+0x4e6>
 8007d44:	462a      	mov	r2, r5
 8007d46:	4633      	mov	r3, r6
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d50:	eb0b 0507 	add.w	r5, fp, r7
 8007d54:	465e      	mov	r6, fp
 8007d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5a:	f7f8 fefd 	bl	8000b58 <__aeabi_d2iz>
 8007d5e:	4607      	mov	r7, r0
 8007d60:	f7f8 fbe0 	bl	8000524 <__aeabi_i2d>
 8007d64:	3730      	adds	r7, #48	; 0x30
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	f806 7b01 	strb.w	r7, [r6], #1
 8007d76:	42ae      	cmp	r6, r5
 8007d78:	e9cd 0100 	strd	r0, r1, [sp]
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	d126      	bne.n	8007dd0 <_dtoa_r+0x5e8>
 8007d82:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <_dtoa_r+0x60c>)
 8007d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d88:	f7f8 fa80 	bl	800028c <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d94:	f7f8 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d174      	bne.n	8007e86 <_dtoa_r+0x69e>
 8007d9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007da0:	2000      	movs	r0, #0
 8007da2:	4914      	ldr	r1, [pc, #80]	; (8007df4 <_dtoa_r+0x60c>)
 8007da4:	f7f8 fa70 	bl	8000288 <__aeabi_dsub>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db0:	f7f8 fe94 	bl	8000adc <__aeabi_dcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f43f af30 	beq.w	8007c1a <_dtoa_r+0x432>
 8007dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dbe:	2b30      	cmp	r3, #48	; 0x30
 8007dc0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007dc4:	d002      	beq.n	8007dcc <_dtoa_r+0x5e4>
 8007dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007dca:	e04a      	b.n	8007e62 <_dtoa_r+0x67a>
 8007dcc:	4615      	mov	r5, r2
 8007dce:	e7f4      	b.n	8007dba <_dtoa_r+0x5d2>
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <_dtoa_r+0x600>)
 8007dd2:	f7f8 fc11 	bl	80005f8 <__aeabi_dmul>
 8007dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8007dda:	e7bc      	b.n	8007d56 <_dtoa_r+0x56e>
 8007ddc:	08009870 	.word	0x08009870
 8007de0:	08009848 	.word	0x08009848
 8007de4:	3ff00000 	.word	0x3ff00000
 8007de8:	40240000 	.word	0x40240000
 8007dec:	401c0000 	.word	0x401c0000
 8007df0:	40140000 	.word	0x40140000
 8007df4:	3fe00000 	.word	0x3fe00000
 8007df8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007dfc:	465d      	mov	r5, fp
 8007dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 fd21 	bl	800084c <__aeabi_ddiv>
 8007e0a:	f7f8 fea5 	bl	8000b58 <__aeabi_d2iz>
 8007e0e:	4680      	mov	r8, r0
 8007e10:	f7f8 fb88 	bl	8000524 <__aeabi_i2d>
 8007e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e18:	f7f8 fbee 	bl	80005f8 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007e28:	f7f8 fa2e 	bl	8000288 <__aeabi_dsub>
 8007e2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e30:	eba5 060b 	sub.w	r6, r5, fp
 8007e34:	45b1      	cmp	r9, r6
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	d139      	bne.n	8007eb0 <_dtoa_r+0x6c8>
 8007e3c:	f7f8 fa26 	bl	800028c <__adddf3>
 8007e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	f7f8 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 8007e4c:	b9c8      	cbnz	r0, 8007e82 <_dtoa_r+0x69a>
 8007e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e5a:	b110      	cbz	r0, 8007e62 <_dtoa_r+0x67a>
 8007e5c:	f018 0f01 	tst.w	r8, #1
 8007e60:	d10f      	bne.n	8007e82 <_dtoa_r+0x69a>
 8007e62:	9904      	ldr	r1, [sp, #16]
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fe0a 	bl	8008a7e <_Bfree>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e6e:	702b      	strb	r3, [r5, #0]
 8007e70:	f10a 0301 	add.w	r3, sl, #1
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 8241 	beq.w	8008300 <_dtoa_r+0xb18>
 8007e7e:	601d      	str	r5, [r3, #0]
 8007e80:	e23e      	b.n	8008300 <_dtoa_r+0xb18>
 8007e82:	f8cd a020 	str.w	sl, [sp, #32]
 8007e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e8a:	2a39      	cmp	r2, #57	; 0x39
 8007e8c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007e90:	d108      	bne.n	8007ea4 <_dtoa_r+0x6bc>
 8007e92:	459b      	cmp	fp, r3
 8007e94:	d10a      	bne.n	8007eac <_dtoa_r+0x6c4>
 8007e96:	9b08      	ldr	r3, [sp, #32]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	2330      	movs	r3, #48	; 0x30
 8007e9e:	f88b 3000 	strb.w	r3, [fp]
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	3201      	adds	r2, #1
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e78c      	b.n	8007dc6 <_dtoa_r+0x5de>
 8007eac:	461d      	mov	r5, r3
 8007eae:	e7ea      	b.n	8007e86 <_dtoa_r+0x69e>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4b9b      	ldr	r3, [pc, #620]	; (8008120 <_dtoa_r+0x938>)
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	f7f8 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d09a      	beq.n	8007dfe <_dtoa_r+0x616>
 8007ec8:	e7cb      	b.n	8007e62 <_dtoa_r+0x67a>
 8007eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	f000 808b 	beq.w	8007fe8 <_dtoa_r+0x800>
 8007ed2:	9a06      	ldr	r2, [sp, #24]
 8007ed4:	2a01      	cmp	r2, #1
 8007ed6:	dc6e      	bgt.n	8007fb6 <_dtoa_r+0x7ce>
 8007ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	d067      	beq.n	8007fae <_dtoa_r+0x7c6>
 8007ede:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ee2:	9f07      	ldr	r7, [sp, #28]
 8007ee4:	9d05      	ldr	r5, [sp, #20]
 8007ee6:	9a05      	ldr	r2, [sp, #20]
 8007ee8:	2101      	movs	r1, #1
 8007eea:	441a      	add	r2, r3
 8007eec:	4620      	mov	r0, r4
 8007eee:	9205      	str	r2, [sp, #20]
 8007ef0:	4498      	add	r8, r3
 8007ef2:	f000 fea2 	bl	8008c3a <__i2b>
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	dd0c      	ble.n	8007f16 <_dtoa_r+0x72e>
 8007efc:	f1b8 0f00 	cmp.w	r8, #0
 8007f00:	dd09      	ble.n	8007f16 <_dtoa_r+0x72e>
 8007f02:	4545      	cmp	r5, r8
 8007f04:	9a05      	ldr	r2, [sp, #20]
 8007f06:	462b      	mov	r3, r5
 8007f08:	bfa8      	it	ge
 8007f0a:	4643      	movge	r3, r8
 8007f0c:	1ad2      	subs	r2, r2, r3
 8007f0e:	9205      	str	r2, [sp, #20]
 8007f10:	1aed      	subs	r5, r5, r3
 8007f12:	eba8 0803 	sub.w	r8, r8, r3
 8007f16:	9b07      	ldr	r3, [sp, #28]
 8007f18:	b1eb      	cbz	r3, 8007f56 <_dtoa_r+0x76e>
 8007f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d067      	beq.n	8007ff0 <_dtoa_r+0x808>
 8007f20:	b18f      	cbz	r7, 8007f46 <_dtoa_r+0x75e>
 8007f22:	4631      	mov	r1, r6
 8007f24:	463a      	mov	r2, r7
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 ff26 	bl	8008d78 <__pow5mult>
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	4601      	mov	r1, r0
 8007f30:	4606      	mov	r6, r0
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 fe8a 	bl	8008c4c <__multiply>
 8007f38:	9904      	ldr	r1, [sp, #16]
 8007f3a:	9008      	str	r0, [sp, #32]
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fd9e 	bl	8008a7e <_Bfree>
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	9b07      	ldr	r3, [sp, #28]
 8007f48:	1bda      	subs	r2, r3, r7
 8007f4a:	d004      	beq.n	8007f56 <_dtoa_r+0x76e>
 8007f4c:	9904      	ldr	r1, [sp, #16]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 ff12 	bl	8008d78 <__pow5mult>
 8007f54:	9004      	str	r0, [sp, #16]
 8007f56:	2101      	movs	r1, #1
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fe6e 	bl	8008c3a <__i2b>
 8007f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f60:	4607      	mov	r7, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 81d0 	beq.w	8008308 <_dtoa_r+0xb20>
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 ff03 	bl	8008d78 <__pow5mult>
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	4607      	mov	r7, r0
 8007f78:	dc40      	bgt.n	8007ffc <_dtoa_r+0x814>
 8007f7a:	9b00      	ldr	r3, [sp, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d139      	bne.n	8007ff4 <_dtoa_r+0x80c>
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d136      	bne.n	8007ff8 <_dtoa_r+0x810>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f90:	0d1b      	lsrs	r3, r3, #20
 8007f92:	051b      	lsls	r3, r3, #20
 8007f94:	b12b      	cbz	r3, 8007fa2 <_dtoa_r+0x7ba>
 8007f96:	9b05      	ldr	r3, [sp, #20]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	9305      	str	r3, [sp, #20]
 8007f9c:	f108 0801 	add.w	r8, r8, #1
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	9307      	str	r3, [sp, #28]
 8007fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d12a      	bne.n	8008000 <_dtoa_r+0x818>
 8007faa:	2001      	movs	r0, #1
 8007fac:	e030      	b.n	8008010 <_dtoa_r+0x828>
 8007fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fb4:	e795      	b.n	8007ee2 <_dtoa_r+0x6fa>
 8007fb6:	9b07      	ldr	r3, [sp, #28]
 8007fb8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007fbc:	42bb      	cmp	r3, r7
 8007fbe:	bfbf      	itttt	lt
 8007fc0:	9b07      	ldrlt	r3, [sp, #28]
 8007fc2:	9707      	strlt	r7, [sp, #28]
 8007fc4:	1afa      	sublt	r2, r7, r3
 8007fc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007fc8:	bfbb      	ittet	lt
 8007fca:	189b      	addlt	r3, r3, r2
 8007fcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007fce:	1bdf      	subge	r7, r3, r7
 8007fd0:	2700      	movlt	r7, #0
 8007fd2:	f1b9 0f00 	cmp.w	r9, #0
 8007fd6:	bfb5      	itete	lt
 8007fd8:	9b05      	ldrlt	r3, [sp, #20]
 8007fda:	9d05      	ldrge	r5, [sp, #20]
 8007fdc:	eba3 0509 	sublt.w	r5, r3, r9
 8007fe0:	464b      	movge	r3, r9
 8007fe2:	bfb8      	it	lt
 8007fe4:	2300      	movlt	r3, #0
 8007fe6:	e77e      	b.n	8007ee6 <_dtoa_r+0x6fe>
 8007fe8:	9f07      	ldr	r7, [sp, #28]
 8007fea:	9d05      	ldr	r5, [sp, #20]
 8007fec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007fee:	e783      	b.n	8007ef8 <_dtoa_r+0x710>
 8007ff0:	9a07      	ldr	r2, [sp, #28]
 8007ff2:	e7ab      	b.n	8007f4c <_dtoa_r+0x764>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e7d4      	b.n	8007fa2 <_dtoa_r+0x7ba>
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	e7d2      	b.n	8007fa2 <_dtoa_r+0x7ba>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008006:	6918      	ldr	r0, [r3, #16]
 8008008:	f000 fdc9 	bl	8008b9e <__hi0bits>
 800800c:	f1c0 0020 	rsb	r0, r0, #32
 8008010:	4440      	add	r0, r8
 8008012:	f010 001f 	ands.w	r0, r0, #31
 8008016:	d047      	beq.n	80080a8 <_dtoa_r+0x8c0>
 8008018:	f1c0 0320 	rsb	r3, r0, #32
 800801c:	2b04      	cmp	r3, #4
 800801e:	dd3b      	ble.n	8008098 <_dtoa_r+0x8b0>
 8008020:	9b05      	ldr	r3, [sp, #20]
 8008022:	f1c0 001c 	rsb	r0, r0, #28
 8008026:	4403      	add	r3, r0
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	4405      	add	r5, r0
 800802c:	4480      	add	r8, r0
 800802e:	9b05      	ldr	r3, [sp, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	dd05      	ble.n	8008040 <_dtoa_r+0x858>
 8008034:	461a      	mov	r2, r3
 8008036:	9904      	ldr	r1, [sp, #16]
 8008038:	4620      	mov	r0, r4
 800803a:	f000 feeb 	bl	8008e14 <__lshift>
 800803e:	9004      	str	r0, [sp, #16]
 8008040:	f1b8 0f00 	cmp.w	r8, #0
 8008044:	dd05      	ble.n	8008052 <_dtoa_r+0x86a>
 8008046:	4639      	mov	r1, r7
 8008048:	4642      	mov	r2, r8
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fee2 	bl	8008e14 <__lshift>
 8008050:	4607      	mov	r7, r0
 8008052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008054:	b353      	cbz	r3, 80080ac <_dtoa_r+0x8c4>
 8008056:	4639      	mov	r1, r7
 8008058:	9804      	ldr	r0, [sp, #16]
 800805a:	f000 ff2f 	bl	8008ebc <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	da24      	bge.n	80080ac <_dtoa_r+0x8c4>
 8008062:	2300      	movs	r3, #0
 8008064:	220a      	movs	r2, #10
 8008066:	9904      	ldr	r1, [sp, #16]
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fd1f 	bl	8008aac <__multadd>
 800806e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008070:	9004      	str	r0, [sp, #16]
 8008072:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 814d 	beq.w	8008316 <_dtoa_r+0xb2e>
 800807c:	2300      	movs	r3, #0
 800807e:	4631      	mov	r1, r6
 8008080:	220a      	movs	r2, #10
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fd12 	bl	8008aac <__multadd>
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	4606      	mov	r6, r0
 800808e:	dc4f      	bgt.n	8008130 <_dtoa_r+0x948>
 8008090:	9b06      	ldr	r3, [sp, #24]
 8008092:	2b02      	cmp	r3, #2
 8008094:	dd4c      	ble.n	8008130 <_dtoa_r+0x948>
 8008096:	e011      	b.n	80080bc <_dtoa_r+0x8d4>
 8008098:	d0c9      	beq.n	800802e <_dtoa_r+0x846>
 800809a:	9a05      	ldr	r2, [sp, #20]
 800809c:	331c      	adds	r3, #28
 800809e:	441a      	add	r2, r3
 80080a0:	9205      	str	r2, [sp, #20]
 80080a2:	441d      	add	r5, r3
 80080a4:	4498      	add	r8, r3
 80080a6:	e7c2      	b.n	800802e <_dtoa_r+0x846>
 80080a8:	4603      	mov	r3, r0
 80080aa:	e7f6      	b.n	800809a <_dtoa_r+0x8b2>
 80080ac:	f1b9 0f00 	cmp.w	r9, #0
 80080b0:	dc38      	bgt.n	8008124 <_dtoa_r+0x93c>
 80080b2:	9b06      	ldr	r3, [sp, #24]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	dd35      	ble.n	8008124 <_dtoa_r+0x93c>
 80080b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80080bc:	9b02      	ldr	r3, [sp, #8]
 80080be:	b963      	cbnz	r3, 80080da <_dtoa_r+0x8f2>
 80080c0:	4639      	mov	r1, r7
 80080c2:	2205      	movs	r2, #5
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fcf1 	bl	8008aac <__multadd>
 80080ca:	4601      	mov	r1, r0
 80080cc:	4607      	mov	r7, r0
 80080ce:	9804      	ldr	r0, [sp, #16]
 80080d0:	f000 fef4 	bl	8008ebc <__mcmp>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f73f adcc 	bgt.w	8007c72 <_dtoa_r+0x48a>
 80080da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080dc:	465d      	mov	r5, fp
 80080de:	ea6f 0a03 	mvn.w	sl, r3
 80080e2:	f04f 0900 	mov.w	r9, #0
 80080e6:	4639      	mov	r1, r7
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 fcc8 	bl	8008a7e <_Bfree>
 80080ee:	2e00      	cmp	r6, #0
 80080f0:	f43f aeb7 	beq.w	8007e62 <_dtoa_r+0x67a>
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	d005      	beq.n	8008106 <_dtoa_r+0x91e>
 80080fa:	45b1      	cmp	r9, r6
 80080fc:	d003      	beq.n	8008106 <_dtoa_r+0x91e>
 80080fe:	4649      	mov	r1, r9
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fcbc 	bl	8008a7e <_Bfree>
 8008106:	4631      	mov	r1, r6
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fcb8 	bl	8008a7e <_Bfree>
 800810e:	e6a8      	b.n	8007e62 <_dtoa_r+0x67a>
 8008110:	2700      	movs	r7, #0
 8008112:	463e      	mov	r6, r7
 8008114:	e7e1      	b.n	80080da <_dtoa_r+0x8f2>
 8008116:	f8dd a020 	ldr.w	sl, [sp, #32]
 800811a:	463e      	mov	r6, r7
 800811c:	e5a9      	b.n	8007c72 <_dtoa_r+0x48a>
 800811e:	bf00      	nop
 8008120:	40240000 	.word	0x40240000
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	f8cd 9008 	str.w	r9, [sp, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80fa 	beq.w	8008324 <_dtoa_r+0xb3c>
 8008130:	2d00      	cmp	r5, #0
 8008132:	dd05      	ble.n	8008140 <_dtoa_r+0x958>
 8008134:	4631      	mov	r1, r6
 8008136:	462a      	mov	r2, r5
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fe6b 	bl	8008e14 <__lshift>
 800813e:	4606      	mov	r6, r0
 8008140:	9b07      	ldr	r3, [sp, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d04c      	beq.n	80081e0 <_dtoa_r+0x9f8>
 8008146:	6871      	ldr	r1, [r6, #4]
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fc64 	bl	8008a16 <_Balloc>
 800814e:	6932      	ldr	r2, [r6, #16]
 8008150:	3202      	adds	r2, #2
 8008152:	4605      	mov	r5, r0
 8008154:	0092      	lsls	r2, r2, #2
 8008156:	f106 010c 	add.w	r1, r6, #12
 800815a:	300c      	adds	r0, #12
 800815c:	f000 fc50 	bl	8008a00 <memcpy>
 8008160:	2201      	movs	r2, #1
 8008162:	4629      	mov	r1, r5
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fe55 	bl	8008e14 <__lshift>
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	f8cd b014 	str.w	fp, [sp, #20]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	46b1      	mov	r9, r6
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	4606      	mov	r6, r0
 800817a:	4639      	mov	r1, r7
 800817c:	9804      	ldr	r0, [sp, #16]
 800817e:	f7ff faa5 	bl	80076cc <quorem>
 8008182:	4649      	mov	r1, r9
 8008184:	4605      	mov	r5, r0
 8008186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800818a:	9804      	ldr	r0, [sp, #16]
 800818c:	f000 fe96 	bl	8008ebc <__mcmp>
 8008190:	4632      	mov	r2, r6
 8008192:	9000      	str	r0, [sp, #0]
 8008194:	4639      	mov	r1, r7
 8008196:	4620      	mov	r0, r4
 8008198:	f000 feaa 	bl	8008ef0 <__mdiff>
 800819c:	68c3      	ldr	r3, [r0, #12]
 800819e:	4602      	mov	r2, r0
 80081a0:	bb03      	cbnz	r3, 80081e4 <_dtoa_r+0x9fc>
 80081a2:	4601      	mov	r1, r0
 80081a4:	9008      	str	r0, [sp, #32]
 80081a6:	9804      	ldr	r0, [sp, #16]
 80081a8:	f000 fe88 	bl	8008ebc <__mcmp>
 80081ac:	9a08      	ldr	r2, [sp, #32]
 80081ae:	4603      	mov	r3, r0
 80081b0:	4611      	mov	r1, r2
 80081b2:	4620      	mov	r0, r4
 80081b4:	9308      	str	r3, [sp, #32]
 80081b6:	f000 fc62 	bl	8008a7e <_Bfree>
 80081ba:	9b08      	ldr	r3, [sp, #32]
 80081bc:	b9a3      	cbnz	r3, 80081e8 <_dtoa_r+0xa00>
 80081be:	9a06      	ldr	r2, [sp, #24]
 80081c0:	b992      	cbnz	r2, 80081e8 <_dtoa_r+0xa00>
 80081c2:	9a07      	ldr	r2, [sp, #28]
 80081c4:	b982      	cbnz	r2, 80081e8 <_dtoa_r+0xa00>
 80081c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081ca:	d029      	beq.n	8008220 <_dtoa_r+0xa38>
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd01      	ble.n	80081d6 <_dtoa_r+0x9ee>
 80081d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80081d6:	9b05      	ldr	r3, [sp, #20]
 80081d8:	1c5d      	adds	r5, r3, #1
 80081da:	f883 8000 	strb.w	r8, [r3]
 80081de:	e782      	b.n	80080e6 <_dtoa_r+0x8fe>
 80081e0:	4630      	mov	r0, r6
 80081e2:	e7c2      	b.n	800816a <_dtoa_r+0x982>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e7e3      	b.n	80081b0 <_dtoa_r+0x9c8>
 80081e8:	9a00      	ldr	r2, [sp, #0]
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	db04      	blt.n	80081f8 <_dtoa_r+0xa10>
 80081ee:	d125      	bne.n	800823c <_dtoa_r+0xa54>
 80081f0:	9a06      	ldr	r2, [sp, #24]
 80081f2:	bb1a      	cbnz	r2, 800823c <_dtoa_r+0xa54>
 80081f4:	9a07      	ldr	r2, [sp, #28]
 80081f6:	bb0a      	cbnz	r2, 800823c <_dtoa_r+0xa54>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	ddec      	ble.n	80081d6 <_dtoa_r+0x9ee>
 80081fc:	2201      	movs	r2, #1
 80081fe:	9904      	ldr	r1, [sp, #16]
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fe07 	bl	8008e14 <__lshift>
 8008206:	4639      	mov	r1, r7
 8008208:	9004      	str	r0, [sp, #16]
 800820a:	f000 fe57 	bl	8008ebc <__mcmp>
 800820e:	2800      	cmp	r0, #0
 8008210:	dc03      	bgt.n	800821a <_dtoa_r+0xa32>
 8008212:	d1e0      	bne.n	80081d6 <_dtoa_r+0x9ee>
 8008214:	f018 0f01 	tst.w	r8, #1
 8008218:	d0dd      	beq.n	80081d6 <_dtoa_r+0x9ee>
 800821a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800821e:	d1d8      	bne.n	80081d2 <_dtoa_r+0x9ea>
 8008220:	9b05      	ldr	r3, [sp, #20]
 8008222:	9a05      	ldr	r2, [sp, #20]
 8008224:	1c5d      	adds	r5, r3, #1
 8008226:	2339      	movs	r3, #57	; 0x39
 8008228:	7013      	strb	r3, [r2, #0]
 800822a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800822e:	2b39      	cmp	r3, #57	; 0x39
 8008230:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008234:	d04f      	beq.n	80082d6 <_dtoa_r+0xaee>
 8008236:	3301      	adds	r3, #1
 8008238:	7013      	strb	r3, [r2, #0]
 800823a:	e754      	b.n	80080e6 <_dtoa_r+0x8fe>
 800823c:	9a05      	ldr	r2, [sp, #20]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f102 0501 	add.w	r5, r2, #1
 8008244:	dd06      	ble.n	8008254 <_dtoa_r+0xa6c>
 8008246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800824a:	d0e9      	beq.n	8008220 <_dtoa_r+0xa38>
 800824c:	f108 0801 	add.w	r8, r8, #1
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	e7c2      	b.n	80081da <_dtoa_r+0x9f2>
 8008254:	9a02      	ldr	r2, [sp, #8]
 8008256:	f805 8c01 	strb.w	r8, [r5, #-1]
 800825a:	eba5 030b 	sub.w	r3, r5, fp
 800825e:	4293      	cmp	r3, r2
 8008260:	d021      	beq.n	80082a6 <_dtoa_r+0xabe>
 8008262:	2300      	movs	r3, #0
 8008264:	220a      	movs	r2, #10
 8008266:	9904      	ldr	r1, [sp, #16]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fc1f 	bl	8008aac <__multadd>
 800826e:	45b1      	cmp	r9, r6
 8008270:	9004      	str	r0, [sp, #16]
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	f04f 020a 	mov.w	r2, #10
 800827a:	4649      	mov	r1, r9
 800827c:	4620      	mov	r0, r4
 800827e:	d105      	bne.n	800828c <_dtoa_r+0xaa4>
 8008280:	f000 fc14 	bl	8008aac <__multadd>
 8008284:	4681      	mov	r9, r0
 8008286:	4606      	mov	r6, r0
 8008288:	9505      	str	r5, [sp, #20]
 800828a:	e776      	b.n	800817a <_dtoa_r+0x992>
 800828c:	f000 fc0e 	bl	8008aac <__multadd>
 8008290:	4631      	mov	r1, r6
 8008292:	4681      	mov	r9, r0
 8008294:	2300      	movs	r3, #0
 8008296:	220a      	movs	r2, #10
 8008298:	4620      	mov	r0, r4
 800829a:	f000 fc07 	bl	8008aac <__multadd>
 800829e:	4606      	mov	r6, r0
 80082a0:	e7f2      	b.n	8008288 <_dtoa_r+0xaa0>
 80082a2:	f04f 0900 	mov.w	r9, #0
 80082a6:	2201      	movs	r2, #1
 80082a8:	9904      	ldr	r1, [sp, #16]
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fdb2 	bl	8008e14 <__lshift>
 80082b0:	4639      	mov	r1, r7
 80082b2:	9004      	str	r0, [sp, #16]
 80082b4:	f000 fe02 	bl	8008ebc <__mcmp>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dcb6      	bgt.n	800822a <_dtoa_r+0xa42>
 80082bc:	d102      	bne.n	80082c4 <_dtoa_r+0xadc>
 80082be:	f018 0f01 	tst.w	r8, #1
 80082c2:	d1b2      	bne.n	800822a <_dtoa_r+0xa42>
 80082c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082c8:	2b30      	cmp	r3, #48	; 0x30
 80082ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80082ce:	f47f af0a 	bne.w	80080e6 <_dtoa_r+0x8fe>
 80082d2:	4615      	mov	r5, r2
 80082d4:	e7f6      	b.n	80082c4 <_dtoa_r+0xadc>
 80082d6:	4593      	cmp	fp, r2
 80082d8:	d105      	bne.n	80082e6 <_dtoa_r+0xafe>
 80082da:	2331      	movs	r3, #49	; 0x31
 80082dc:	f10a 0a01 	add.w	sl, sl, #1
 80082e0:	f88b 3000 	strb.w	r3, [fp]
 80082e4:	e6ff      	b.n	80080e6 <_dtoa_r+0x8fe>
 80082e6:	4615      	mov	r5, r2
 80082e8:	e79f      	b.n	800822a <_dtoa_r+0xa42>
 80082ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008350 <_dtoa_r+0xb68>
 80082ee:	e007      	b.n	8008300 <_dtoa_r+0xb18>
 80082f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008354 <_dtoa_r+0xb6c>
 80082f6:	b11b      	cbz	r3, 8008300 <_dtoa_r+0xb18>
 80082f8:	f10b 0308 	add.w	r3, fp, #8
 80082fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	4658      	mov	r0, fp
 8008302:	b017      	add	sp, #92	; 0x5c
 8008304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008308:	9b06      	ldr	r3, [sp, #24]
 800830a:	2b01      	cmp	r3, #1
 800830c:	f77f ae35 	ble.w	8007f7a <_dtoa_r+0x792>
 8008310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008312:	9307      	str	r3, [sp, #28]
 8008314:	e649      	b.n	8007faa <_dtoa_r+0x7c2>
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc03      	bgt.n	8008324 <_dtoa_r+0xb3c>
 800831c:	9b06      	ldr	r3, [sp, #24]
 800831e:	2b02      	cmp	r3, #2
 8008320:	f73f aecc 	bgt.w	80080bc <_dtoa_r+0x8d4>
 8008324:	465d      	mov	r5, fp
 8008326:	4639      	mov	r1, r7
 8008328:	9804      	ldr	r0, [sp, #16]
 800832a:	f7ff f9cf 	bl	80076cc <quorem>
 800832e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008332:	f805 8b01 	strb.w	r8, [r5], #1
 8008336:	9a02      	ldr	r2, [sp, #8]
 8008338:	eba5 030b 	sub.w	r3, r5, fp
 800833c:	429a      	cmp	r2, r3
 800833e:	ddb0      	ble.n	80082a2 <_dtoa_r+0xaba>
 8008340:	2300      	movs	r3, #0
 8008342:	220a      	movs	r2, #10
 8008344:	9904      	ldr	r1, [sp, #16]
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fbb0 	bl	8008aac <__multadd>
 800834c:	9004      	str	r0, [sp, #16]
 800834e:	e7ea      	b.n	8008326 <_dtoa_r+0xb3e>
 8008350:	080097b4 	.word	0x080097b4
 8008354:	08009830 	.word	0x08009830

08008358 <rshift>:
 8008358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800835a:	6906      	ldr	r6, [r0, #16]
 800835c:	114b      	asrs	r3, r1, #5
 800835e:	429e      	cmp	r6, r3
 8008360:	f100 0414 	add.w	r4, r0, #20
 8008364:	dd30      	ble.n	80083c8 <rshift+0x70>
 8008366:	f011 011f 	ands.w	r1, r1, #31
 800836a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800836e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008372:	d108      	bne.n	8008386 <rshift+0x2e>
 8008374:	4621      	mov	r1, r4
 8008376:	42b2      	cmp	r2, r6
 8008378:	460b      	mov	r3, r1
 800837a:	d211      	bcs.n	80083a0 <rshift+0x48>
 800837c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008380:	f841 3b04 	str.w	r3, [r1], #4
 8008384:	e7f7      	b.n	8008376 <rshift+0x1e>
 8008386:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800838a:	f1c1 0c20 	rsb	ip, r1, #32
 800838e:	40cd      	lsrs	r5, r1
 8008390:	3204      	adds	r2, #4
 8008392:	4623      	mov	r3, r4
 8008394:	42b2      	cmp	r2, r6
 8008396:	4617      	mov	r7, r2
 8008398:	d30c      	bcc.n	80083b4 <rshift+0x5c>
 800839a:	601d      	str	r5, [r3, #0]
 800839c:	b105      	cbz	r5, 80083a0 <rshift+0x48>
 800839e:	3304      	adds	r3, #4
 80083a0:	1b1a      	subs	r2, r3, r4
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083a8:	bf08      	it	eq
 80083aa:	2300      	moveq	r3, #0
 80083ac:	6102      	str	r2, [r0, #16]
 80083ae:	bf08      	it	eq
 80083b0:	6143      	streq	r3, [r0, #20]
 80083b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b4:	683f      	ldr	r7, [r7, #0]
 80083b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80083ba:	433d      	orrs	r5, r7
 80083bc:	f843 5b04 	str.w	r5, [r3], #4
 80083c0:	f852 5b04 	ldr.w	r5, [r2], #4
 80083c4:	40cd      	lsrs	r5, r1
 80083c6:	e7e5      	b.n	8008394 <rshift+0x3c>
 80083c8:	4623      	mov	r3, r4
 80083ca:	e7e9      	b.n	80083a0 <rshift+0x48>

080083cc <__hexdig_fun>:
 80083cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d802      	bhi.n	80083da <__hexdig_fun+0xe>
 80083d4:	3820      	subs	r0, #32
 80083d6:	b2c0      	uxtb	r0, r0
 80083d8:	4770      	bx	lr
 80083da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d801      	bhi.n	80083e6 <__hexdig_fun+0x1a>
 80083e2:	3847      	subs	r0, #71	; 0x47
 80083e4:	e7f7      	b.n	80083d6 <__hexdig_fun+0xa>
 80083e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d801      	bhi.n	80083f2 <__hexdig_fun+0x26>
 80083ee:	3827      	subs	r0, #39	; 0x27
 80083f0:	e7f1      	b.n	80083d6 <__hexdig_fun+0xa>
 80083f2:	2000      	movs	r0, #0
 80083f4:	4770      	bx	lr

080083f6 <__gethex>:
 80083f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	b08b      	sub	sp, #44	; 0x2c
 80083fc:	468a      	mov	sl, r1
 80083fe:	9002      	str	r0, [sp, #8]
 8008400:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008402:	9306      	str	r3, [sp, #24]
 8008404:	4690      	mov	r8, r2
 8008406:	f000 fad0 	bl	80089aa <__localeconv_l>
 800840a:	6803      	ldr	r3, [r0, #0]
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	4618      	mov	r0, r3
 8008410:	f7f7 fede 	bl	80001d0 <strlen>
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	9001      	str	r0, [sp, #4]
 8008418:	4403      	add	r3, r0
 800841a:	f04f 0b00 	mov.w	fp, #0
 800841e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008422:	9307      	str	r3, [sp, #28]
 8008424:	f8da 3000 	ldr.w	r3, [sl]
 8008428:	3302      	adds	r3, #2
 800842a:	461f      	mov	r7, r3
 800842c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008430:	2830      	cmp	r0, #48	; 0x30
 8008432:	d06c      	beq.n	800850e <__gethex+0x118>
 8008434:	f7ff ffca 	bl	80083cc <__hexdig_fun>
 8008438:	4604      	mov	r4, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d16a      	bne.n	8008514 <__gethex+0x11e>
 800843e:	9a01      	ldr	r2, [sp, #4]
 8008440:	9903      	ldr	r1, [sp, #12]
 8008442:	4638      	mov	r0, r7
 8008444:	f001 f8fe 	bl	8009644 <strncmp>
 8008448:	2800      	cmp	r0, #0
 800844a:	d166      	bne.n	800851a <__gethex+0x124>
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	5cf8      	ldrb	r0, [r7, r3]
 8008450:	18fe      	adds	r6, r7, r3
 8008452:	f7ff ffbb 	bl	80083cc <__hexdig_fun>
 8008456:	2800      	cmp	r0, #0
 8008458:	d062      	beq.n	8008520 <__gethex+0x12a>
 800845a:	4633      	mov	r3, r6
 800845c:	7818      	ldrb	r0, [r3, #0]
 800845e:	2830      	cmp	r0, #48	; 0x30
 8008460:	461f      	mov	r7, r3
 8008462:	f103 0301 	add.w	r3, r3, #1
 8008466:	d0f9      	beq.n	800845c <__gethex+0x66>
 8008468:	f7ff ffb0 	bl	80083cc <__hexdig_fun>
 800846c:	fab0 f580 	clz	r5, r0
 8008470:	096d      	lsrs	r5, r5, #5
 8008472:	4634      	mov	r4, r6
 8008474:	f04f 0b01 	mov.w	fp, #1
 8008478:	463a      	mov	r2, r7
 800847a:	4616      	mov	r6, r2
 800847c:	3201      	adds	r2, #1
 800847e:	7830      	ldrb	r0, [r6, #0]
 8008480:	f7ff ffa4 	bl	80083cc <__hexdig_fun>
 8008484:	2800      	cmp	r0, #0
 8008486:	d1f8      	bne.n	800847a <__gethex+0x84>
 8008488:	9a01      	ldr	r2, [sp, #4]
 800848a:	9903      	ldr	r1, [sp, #12]
 800848c:	4630      	mov	r0, r6
 800848e:	f001 f8d9 	bl	8009644 <strncmp>
 8008492:	b950      	cbnz	r0, 80084aa <__gethex+0xb4>
 8008494:	b954      	cbnz	r4, 80084ac <__gethex+0xb6>
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	18f4      	adds	r4, r6, r3
 800849a:	4622      	mov	r2, r4
 800849c:	4616      	mov	r6, r2
 800849e:	3201      	adds	r2, #1
 80084a0:	7830      	ldrb	r0, [r6, #0]
 80084a2:	f7ff ff93 	bl	80083cc <__hexdig_fun>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d1f8      	bne.n	800849c <__gethex+0xa6>
 80084aa:	b10c      	cbz	r4, 80084b0 <__gethex+0xba>
 80084ac:	1ba4      	subs	r4, r4, r6
 80084ae:	00a4      	lsls	r4, r4, #2
 80084b0:	7833      	ldrb	r3, [r6, #0]
 80084b2:	2b50      	cmp	r3, #80	; 0x50
 80084b4:	d001      	beq.n	80084ba <__gethex+0xc4>
 80084b6:	2b70      	cmp	r3, #112	; 0x70
 80084b8:	d140      	bne.n	800853c <__gethex+0x146>
 80084ba:	7873      	ldrb	r3, [r6, #1]
 80084bc:	2b2b      	cmp	r3, #43	; 0x2b
 80084be:	d031      	beq.n	8008524 <__gethex+0x12e>
 80084c0:	2b2d      	cmp	r3, #45	; 0x2d
 80084c2:	d033      	beq.n	800852c <__gethex+0x136>
 80084c4:	1c71      	adds	r1, r6, #1
 80084c6:	f04f 0900 	mov.w	r9, #0
 80084ca:	7808      	ldrb	r0, [r1, #0]
 80084cc:	f7ff ff7e 	bl	80083cc <__hexdig_fun>
 80084d0:	1e43      	subs	r3, r0, #1
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b18      	cmp	r3, #24
 80084d6:	d831      	bhi.n	800853c <__gethex+0x146>
 80084d8:	f1a0 0210 	sub.w	r2, r0, #16
 80084dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084e0:	f7ff ff74 	bl	80083cc <__hexdig_fun>
 80084e4:	1e43      	subs	r3, r0, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b18      	cmp	r3, #24
 80084ea:	d922      	bls.n	8008532 <__gethex+0x13c>
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	d000      	beq.n	80084f4 <__gethex+0xfe>
 80084f2:	4252      	negs	r2, r2
 80084f4:	4414      	add	r4, r2
 80084f6:	f8ca 1000 	str.w	r1, [sl]
 80084fa:	b30d      	cbz	r5, 8008540 <__gethex+0x14a>
 80084fc:	f1bb 0f00 	cmp.w	fp, #0
 8008500:	bf0c      	ite	eq
 8008502:	2706      	moveq	r7, #6
 8008504:	2700      	movne	r7, #0
 8008506:	4638      	mov	r0, r7
 8008508:	b00b      	add	sp, #44	; 0x2c
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	f10b 0b01 	add.w	fp, fp, #1
 8008512:	e78a      	b.n	800842a <__gethex+0x34>
 8008514:	2500      	movs	r5, #0
 8008516:	462c      	mov	r4, r5
 8008518:	e7ae      	b.n	8008478 <__gethex+0x82>
 800851a:	463e      	mov	r6, r7
 800851c:	2501      	movs	r5, #1
 800851e:	e7c7      	b.n	80084b0 <__gethex+0xba>
 8008520:	4604      	mov	r4, r0
 8008522:	e7fb      	b.n	800851c <__gethex+0x126>
 8008524:	f04f 0900 	mov.w	r9, #0
 8008528:	1cb1      	adds	r1, r6, #2
 800852a:	e7ce      	b.n	80084ca <__gethex+0xd4>
 800852c:	f04f 0901 	mov.w	r9, #1
 8008530:	e7fa      	b.n	8008528 <__gethex+0x132>
 8008532:	230a      	movs	r3, #10
 8008534:	fb03 0202 	mla	r2, r3, r2, r0
 8008538:	3a10      	subs	r2, #16
 800853a:	e7cf      	b.n	80084dc <__gethex+0xe6>
 800853c:	4631      	mov	r1, r6
 800853e:	e7da      	b.n	80084f6 <__gethex+0x100>
 8008540:	1bf3      	subs	r3, r6, r7
 8008542:	3b01      	subs	r3, #1
 8008544:	4629      	mov	r1, r5
 8008546:	2b07      	cmp	r3, #7
 8008548:	dc49      	bgt.n	80085de <__gethex+0x1e8>
 800854a:	9802      	ldr	r0, [sp, #8]
 800854c:	f000 fa63 	bl	8008a16 <_Balloc>
 8008550:	9b01      	ldr	r3, [sp, #4]
 8008552:	f100 0914 	add.w	r9, r0, #20
 8008556:	f04f 0b00 	mov.w	fp, #0
 800855a:	f1c3 0301 	rsb	r3, r3, #1
 800855e:	4605      	mov	r5, r0
 8008560:	f8cd 9010 	str.w	r9, [sp, #16]
 8008564:	46da      	mov	sl, fp
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	42b7      	cmp	r7, r6
 800856a:	d33b      	bcc.n	80085e4 <__gethex+0x1ee>
 800856c:	9804      	ldr	r0, [sp, #16]
 800856e:	f840 ab04 	str.w	sl, [r0], #4
 8008572:	eba0 0009 	sub.w	r0, r0, r9
 8008576:	1080      	asrs	r0, r0, #2
 8008578:	6128      	str	r0, [r5, #16]
 800857a:	0147      	lsls	r7, r0, #5
 800857c:	4650      	mov	r0, sl
 800857e:	f000 fb0e 	bl	8008b9e <__hi0bits>
 8008582:	f8d8 6000 	ldr.w	r6, [r8]
 8008586:	1a3f      	subs	r7, r7, r0
 8008588:	42b7      	cmp	r7, r6
 800858a:	dd64      	ble.n	8008656 <__gethex+0x260>
 800858c:	1bbf      	subs	r7, r7, r6
 800858e:	4639      	mov	r1, r7
 8008590:	4628      	mov	r0, r5
 8008592:	f000 fe1d 	bl	80091d0 <__any_on>
 8008596:	4682      	mov	sl, r0
 8008598:	b178      	cbz	r0, 80085ba <__gethex+0x1c4>
 800859a:	1e7b      	subs	r3, r7, #1
 800859c:	1159      	asrs	r1, r3, #5
 800859e:	f003 021f 	and.w	r2, r3, #31
 80085a2:	f04f 0a01 	mov.w	sl, #1
 80085a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085aa:	fa0a f202 	lsl.w	r2, sl, r2
 80085ae:	420a      	tst	r2, r1
 80085b0:	d003      	beq.n	80085ba <__gethex+0x1c4>
 80085b2:	4553      	cmp	r3, sl
 80085b4:	dc46      	bgt.n	8008644 <__gethex+0x24e>
 80085b6:	f04f 0a02 	mov.w	sl, #2
 80085ba:	4639      	mov	r1, r7
 80085bc:	4628      	mov	r0, r5
 80085be:	f7ff fecb 	bl	8008358 <rshift>
 80085c2:	443c      	add	r4, r7
 80085c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	da52      	bge.n	8008672 <__gethex+0x27c>
 80085cc:	4629      	mov	r1, r5
 80085ce:	9802      	ldr	r0, [sp, #8]
 80085d0:	f000 fa55 	bl	8008a7e <_Bfree>
 80085d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085d6:	2300      	movs	r3, #0
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	27a3      	movs	r7, #163	; 0xa3
 80085dc:	e793      	b.n	8008506 <__gethex+0x110>
 80085de:	3101      	adds	r1, #1
 80085e0:	105b      	asrs	r3, r3, #1
 80085e2:	e7b0      	b.n	8008546 <__gethex+0x150>
 80085e4:	1e73      	subs	r3, r6, #1
 80085e6:	9305      	str	r3, [sp, #20]
 80085e8:	9a07      	ldr	r2, [sp, #28]
 80085ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d018      	beq.n	8008624 <__gethex+0x22e>
 80085f2:	f1bb 0f20 	cmp.w	fp, #32
 80085f6:	d107      	bne.n	8008608 <__gethex+0x212>
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	f8c3 a000 	str.w	sl, [r3]
 80085fe:	3304      	adds	r3, #4
 8008600:	f04f 0a00 	mov.w	sl, #0
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	46d3      	mov	fp, sl
 8008608:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800860c:	f7ff fede 	bl	80083cc <__hexdig_fun>
 8008610:	f000 000f 	and.w	r0, r0, #15
 8008614:	fa00 f00b 	lsl.w	r0, r0, fp
 8008618:	ea4a 0a00 	orr.w	sl, sl, r0
 800861c:	f10b 0b04 	add.w	fp, fp, #4
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	e00d      	b.n	8008640 <__gethex+0x24a>
 8008624:	9b05      	ldr	r3, [sp, #20]
 8008626:	9a08      	ldr	r2, [sp, #32]
 8008628:	4413      	add	r3, r2
 800862a:	42bb      	cmp	r3, r7
 800862c:	d3e1      	bcc.n	80085f2 <__gethex+0x1fc>
 800862e:	4618      	mov	r0, r3
 8008630:	9a01      	ldr	r2, [sp, #4]
 8008632:	9903      	ldr	r1, [sp, #12]
 8008634:	9309      	str	r3, [sp, #36]	; 0x24
 8008636:	f001 f805 	bl	8009644 <strncmp>
 800863a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863c:	2800      	cmp	r0, #0
 800863e:	d1d8      	bne.n	80085f2 <__gethex+0x1fc>
 8008640:	461e      	mov	r6, r3
 8008642:	e791      	b.n	8008568 <__gethex+0x172>
 8008644:	1eb9      	subs	r1, r7, #2
 8008646:	4628      	mov	r0, r5
 8008648:	f000 fdc2 	bl	80091d0 <__any_on>
 800864c:	2800      	cmp	r0, #0
 800864e:	d0b2      	beq.n	80085b6 <__gethex+0x1c0>
 8008650:	f04f 0a03 	mov.w	sl, #3
 8008654:	e7b1      	b.n	80085ba <__gethex+0x1c4>
 8008656:	da09      	bge.n	800866c <__gethex+0x276>
 8008658:	1bf7      	subs	r7, r6, r7
 800865a:	4629      	mov	r1, r5
 800865c:	463a      	mov	r2, r7
 800865e:	9802      	ldr	r0, [sp, #8]
 8008660:	f000 fbd8 	bl	8008e14 <__lshift>
 8008664:	1be4      	subs	r4, r4, r7
 8008666:	4605      	mov	r5, r0
 8008668:	f100 0914 	add.w	r9, r0, #20
 800866c:	f04f 0a00 	mov.w	sl, #0
 8008670:	e7a8      	b.n	80085c4 <__gethex+0x1ce>
 8008672:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008676:	42a0      	cmp	r0, r4
 8008678:	dd6a      	ble.n	8008750 <__gethex+0x35a>
 800867a:	1b04      	subs	r4, r0, r4
 800867c:	42a6      	cmp	r6, r4
 800867e:	dc2e      	bgt.n	80086de <__gethex+0x2e8>
 8008680:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d022      	beq.n	80086ce <__gethex+0x2d8>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d024      	beq.n	80086d6 <__gethex+0x2e0>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d115      	bne.n	80086bc <__gethex+0x2c6>
 8008690:	42a6      	cmp	r6, r4
 8008692:	d113      	bne.n	80086bc <__gethex+0x2c6>
 8008694:	2e01      	cmp	r6, #1
 8008696:	dc0b      	bgt.n	80086b0 <__gethex+0x2ba>
 8008698:	9a06      	ldr	r2, [sp, #24]
 800869a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	2301      	movs	r3, #1
 80086a2:	612b      	str	r3, [r5, #16]
 80086a4:	f8c9 3000 	str.w	r3, [r9]
 80086a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086aa:	2762      	movs	r7, #98	; 0x62
 80086ac:	601d      	str	r5, [r3, #0]
 80086ae:	e72a      	b.n	8008506 <__gethex+0x110>
 80086b0:	1e71      	subs	r1, r6, #1
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 fd8c 	bl	80091d0 <__any_on>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1ed      	bne.n	8008698 <__gethex+0x2a2>
 80086bc:	4629      	mov	r1, r5
 80086be:	9802      	ldr	r0, [sp, #8]
 80086c0:	f000 f9dd 	bl	8008a7e <_Bfree>
 80086c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086c6:	2300      	movs	r3, #0
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	2750      	movs	r7, #80	; 0x50
 80086cc:	e71b      	b.n	8008506 <__gethex+0x110>
 80086ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0e1      	beq.n	8008698 <__gethex+0x2a2>
 80086d4:	e7f2      	b.n	80086bc <__gethex+0x2c6>
 80086d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1dd      	bne.n	8008698 <__gethex+0x2a2>
 80086dc:	e7ee      	b.n	80086bc <__gethex+0x2c6>
 80086de:	1e67      	subs	r7, r4, #1
 80086e0:	f1ba 0f00 	cmp.w	sl, #0
 80086e4:	d131      	bne.n	800874a <__gethex+0x354>
 80086e6:	b127      	cbz	r7, 80086f2 <__gethex+0x2fc>
 80086e8:	4639      	mov	r1, r7
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 fd70 	bl	80091d0 <__any_on>
 80086f0:	4682      	mov	sl, r0
 80086f2:	117a      	asrs	r2, r7, #5
 80086f4:	2301      	movs	r3, #1
 80086f6:	f007 071f 	and.w	r7, r7, #31
 80086fa:	fa03 f707 	lsl.w	r7, r3, r7
 80086fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008702:	4621      	mov	r1, r4
 8008704:	421f      	tst	r7, r3
 8008706:	4628      	mov	r0, r5
 8008708:	bf18      	it	ne
 800870a:	f04a 0a02 	orrne.w	sl, sl, #2
 800870e:	1b36      	subs	r6, r6, r4
 8008710:	f7ff fe22 	bl	8008358 <rshift>
 8008714:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008718:	2702      	movs	r7, #2
 800871a:	f1ba 0f00 	cmp.w	sl, #0
 800871e:	d048      	beq.n	80087b2 <__gethex+0x3bc>
 8008720:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d015      	beq.n	8008754 <__gethex+0x35e>
 8008728:	2b03      	cmp	r3, #3
 800872a:	d017      	beq.n	800875c <__gethex+0x366>
 800872c:	2b01      	cmp	r3, #1
 800872e:	d109      	bne.n	8008744 <__gethex+0x34e>
 8008730:	f01a 0f02 	tst.w	sl, #2
 8008734:	d006      	beq.n	8008744 <__gethex+0x34e>
 8008736:	f8d9 3000 	ldr.w	r3, [r9]
 800873a:	ea4a 0a03 	orr.w	sl, sl, r3
 800873e:	f01a 0f01 	tst.w	sl, #1
 8008742:	d10e      	bne.n	8008762 <__gethex+0x36c>
 8008744:	f047 0710 	orr.w	r7, r7, #16
 8008748:	e033      	b.n	80087b2 <__gethex+0x3bc>
 800874a:	f04f 0a01 	mov.w	sl, #1
 800874e:	e7d0      	b.n	80086f2 <__gethex+0x2fc>
 8008750:	2701      	movs	r7, #1
 8008752:	e7e2      	b.n	800871a <__gethex+0x324>
 8008754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008756:	f1c3 0301 	rsb	r3, r3, #1
 800875a:	9315      	str	r3, [sp, #84]	; 0x54
 800875c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <__gethex+0x34e>
 8008762:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008766:	f105 0314 	add.w	r3, r5, #20
 800876a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800876e:	eb03 010a 	add.w	r1, r3, sl
 8008772:	f04f 0c00 	mov.w	ip, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f853 2b04 	ldr.w	r2, [r3], #4
 800877c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008780:	d01c      	beq.n	80087bc <__gethex+0x3c6>
 8008782:	3201      	adds	r2, #1
 8008784:	6002      	str	r2, [r0, #0]
 8008786:	2f02      	cmp	r7, #2
 8008788:	f105 0314 	add.w	r3, r5, #20
 800878c:	d138      	bne.n	8008800 <__gethex+0x40a>
 800878e:	f8d8 2000 	ldr.w	r2, [r8]
 8008792:	3a01      	subs	r2, #1
 8008794:	42b2      	cmp	r2, r6
 8008796:	d10a      	bne.n	80087ae <__gethex+0x3b8>
 8008798:	1171      	asrs	r1, r6, #5
 800879a:	2201      	movs	r2, #1
 800879c:	f006 061f 	and.w	r6, r6, #31
 80087a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087a4:	fa02 f606 	lsl.w	r6, r2, r6
 80087a8:	421e      	tst	r6, r3
 80087aa:	bf18      	it	ne
 80087ac:	4617      	movne	r7, r2
 80087ae:	f047 0720 	orr.w	r7, r7, #32
 80087b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087b4:	601d      	str	r5, [r3, #0]
 80087b6:	9b06      	ldr	r3, [sp, #24]
 80087b8:	601c      	str	r4, [r3, #0]
 80087ba:	e6a4      	b.n	8008506 <__gethex+0x110>
 80087bc:	4299      	cmp	r1, r3
 80087be:	f843 cc04 	str.w	ip, [r3, #-4]
 80087c2:	d8d8      	bhi.n	8008776 <__gethex+0x380>
 80087c4:	68ab      	ldr	r3, [r5, #8]
 80087c6:	4599      	cmp	r9, r3
 80087c8:	db12      	blt.n	80087f0 <__gethex+0x3fa>
 80087ca:	6869      	ldr	r1, [r5, #4]
 80087cc:	9802      	ldr	r0, [sp, #8]
 80087ce:	3101      	adds	r1, #1
 80087d0:	f000 f921 	bl	8008a16 <_Balloc>
 80087d4:	692a      	ldr	r2, [r5, #16]
 80087d6:	3202      	adds	r2, #2
 80087d8:	f105 010c 	add.w	r1, r5, #12
 80087dc:	4683      	mov	fp, r0
 80087de:	0092      	lsls	r2, r2, #2
 80087e0:	300c      	adds	r0, #12
 80087e2:	f000 f90d 	bl	8008a00 <memcpy>
 80087e6:	4629      	mov	r1, r5
 80087e8:	9802      	ldr	r0, [sp, #8]
 80087ea:	f000 f948 	bl	8008a7e <_Bfree>
 80087ee:	465d      	mov	r5, fp
 80087f0:	692b      	ldr	r3, [r5, #16]
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80087f8:	612a      	str	r2, [r5, #16]
 80087fa:	2201      	movs	r2, #1
 80087fc:	615a      	str	r2, [r3, #20]
 80087fe:	e7c2      	b.n	8008786 <__gethex+0x390>
 8008800:	692a      	ldr	r2, [r5, #16]
 8008802:	454a      	cmp	r2, r9
 8008804:	dd0b      	ble.n	800881e <__gethex+0x428>
 8008806:	2101      	movs	r1, #1
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fda5 	bl	8008358 <rshift>
 800880e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008812:	3401      	adds	r4, #1
 8008814:	42a3      	cmp	r3, r4
 8008816:	f6ff aed9 	blt.w	80085cc <__gethex+0x1d6>
 800881a:	2701      	movs	r7, #1
 800881c:	e7c7      	b.n	80087ae <__gethex+0x3b8>
 800881e:	f016 061f 	ands.w	r6, r6, #31
 8008822:	d0fa      	beq.n	800881a <__gethex+0x424>
 8008824:	449a      	add	sl, r3
 8008826:	f1c6 0620 	rsb	r6, r6, #32
 800882a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800882e:	f000 f9b6 	bl	8008b9e <__hi0bits>
 8008832:	42b0      	cmp	r0, r6
 8008834:	dbe7      	blt.n	8008806 <__gethex+0x410>
 8008836:	e7f0      	b.n	800881a <__gethex+0x424>

08008838 <L_shift>:
 8008838:	f1c2 0208 	rsb	r2, r2, #8
 800883c:	0092      	lsls	r2, r2, #2
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	f1c2 0620 	rsb	r6, r2, #32
 8008844:	6843      	ldr	r3, [r0, #4]
 8008846:	6804      	ldr	r4, [r0, #0]
 8008848:	fa03 f506 	lsl.w	r5, r3, r6
 800884c:	432c      	orrs	r4, r5
 800884e:	40d3      	lsrs	r3, r2
 8008850:	6004      	str	r4, [r0, #0]
 8008852:	f840 3f04 	str.w	r3, [r0, #4]!
 8008856:	4288      	cmp	r0, r1
 8008858:	d3f4      	bcc.n	8008844 <L_shift+0xc>
 800885a:	bd70      	pop	{r4, r5, r6, pc}

0800885c <__match>:
 800885c:	b530      	push	{r4, r5, lr}
 800885e:	6803      	ldr	r3, [r0, #0]
 8008860:	3301      	adds	r3, #1
 8008862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008866:	b914      	cbnz	r4, 800886e <__match+0x12>
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	2001      	movs	r0, #1
 800886c:	bd30      	pop	{r4, r5, pc}
 800886e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008872:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008876:	2d19      	cmp	r5, #25
 8008878:	bf98      	it	ls
 800887a:	3220      	addls	r2, #32
 800887c:	42a2      	cmp	r2, r4
 800887e:	d0f0      	beq.n	8008862 <__match+0x6>
 8008880:	2000      	movs	r0, #0
 8008882:	e7f3      	b.n	800886c <__match+0x10>

08008884 <__hexnan>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	680b      	ldr	r3, [r1, #0]
 800888a:	6801      	ldr	r1, [r0, #0]
 800888c:	115f      	asrs	r7, r3, #5
 800888e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008892:	f013 031f 	ands.w	r3, r3, #31
 8008896:	b087      	sub	sp, #28
 8008898:	bf18      	it	ne
 800889a:	3704      	addne	r7, #4
 800889c:	2500      	movs	r5, #0
 800889e:	1f3e      	subs	r6, r7, #4
 80088a0:	4682      	mov	sl, r0
 80088a2:	4690      	mov	r8, r2
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	f847 5c04 	str.w	r5, [r7, #-4]
 80088aa:	46b1      	mov	r9, r6
 80088ac:	4634      	mov	r4, r6
 80088ae:	9502      	str	r5, [sp, #8]
 80088b0:	46ab      	mov	fp, r5
 80088b2:	784a      	ldrb	r2, [r1, #1]
 80088b4:	1c4b      	adds	r3, r1, #1
 80088b6:	9303      	str	r3, [sp, #12]
 80088b8:	b342      	cbz	r2, 800890c <__hexnan+0x88>
 80088ba:	4610      	mov	r0, r2
 80088bc:	9105      	str	r1, [sp, #20]
 80088be:	9204      	str	r2, [sp, #16]
 80088c0:	f7ff fd84 	bl	80083cc <__hexdig_fun>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d143      	bne.n	8008950 <__hexnan+0xcc>
 80088c8:	9a04      	ldr	r2, [sp, #16]
 80088ca:	9905      	ldr	r1, [sp, #20]
 80088cc:	2a20      	cmp	r2, #32
 80088ce:	d818      	bhi.n	8008902 <__hexnan+0x7e>
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	459b      	cmp	fp, r3
 80088d4:	dd13      	ble.n	80088fe <__hexnan+0x7a>
 80088d6:	454c      	cmp	r4, r9
 80088d8:	d206      	bcs.n	80088e8 <__hexnan+0x64>
 80088da:	2d07      	cmp	r5, #7
 80088dc:	dc04      	bgt.n	80088e8 <__hexnan+0x64>
 80088de:	462a      	mov	r2, r5
 80088e0:	4649      	mov	r1, r9
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff ffa8 	bl	8008838 <L_shift>
 80088e8:	4544      	cmp	r4, r8
 80088ea:	d944      	bls.n	8008976 <__hexnan+0xf2>
 80088ec:	2300      	movs	r3, #0
 80088ee:	f1a4 0904 	sub.w	r9, r4, #4
 80088f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80088f6:	f8cd b008 	str.w	fp, [sp, #8]
 80088fa:	464c      	mov	r4, r9
 80088fc:	461d      	mov	r5, r3
 80088fe:	9903      	ldr	r1, [sp, #12]
 8008900:	e7d7      	b.n	80088b2 <__hexnan+0x2e>
 8008902:	2a29      	cmp	r2, #41	; 0x29
 8008904:	d14a      	bne.n	800899c <__hexnan+0x118>
 8008906:	3102      	adds	r1, #2
 8008908:	f8ca 1000 	str.w	r1, [sl]
 800890c:	f1bb 0f00 	cmp.w	fp, #0
 8008910:	d044      	beq.n	800899c <__hexnan+0x118>
 8008912:	454c      	cmp	r4, r9
 8008914:	d206      	bcs.n	8008924 <__hexnan+0xa0>
 8008916:	2d07      	cmp	r5, #7
 8008918:	dc04      	bgt.n	8008924 <__hexnan+0xa0>
 800891a:	462a      	mov	r2, r5
 800891c:	4649      	mov	r1, r9
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff ff8a 	bl	8008838 <L_shift>
 8008924:	4544      	cmp	r4, r8
 8008926:	d928      	bls.n	800897a <__hexnan+0xf6>
 8008928:	4643      	mov	r3, r8
 800892a:	f854 2b04 	ldr.w	r2, [r4], #4
 800892e:	f843 2b04 	str.w	r2, [r3], #4
 8008932:	42a6      	cmp	r6, r4
 8008934:	d2f9      	bcs.n	800892a <__hexnan+0xa6>
 8008936:	2200      	movs	r2, #0
 8008938:	f843 2b04 	str.w	r2, [r3], #4
 800893c:	429e      	cmp	r6, r3
 800893e:	d2fb      	bcs.n	8008938 <__hexnan+0xb4>
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	b91b      	cbnz	r3, 800894c <__hexnan+0xc8>
 8008944:	4546      	cmp	r6, r8
 8008946:	d127      	bne.n	8008998 <__hexnan+0x114>
 8008948:	2301      	movs	r3, #1
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	2005      	movs	r0, #5
 800894e:	e026      	b.n	800899e <__hexnan+0x11a>
 8008950:	3501      	adds	r5, #1
 8008952:	2d08      	cmp	r5, #8
 8008954:	f10b 0b01 	add.w	fp, fp, #1
 8008958:	dd06      	ble.n	8008968 <__hexnan+0xe4>
 800895a:	4544      	cmp	r4, r8
 800895c:	d9cf      	bls.n	80088fe <__hexnan+0x7a>
 800895e:	2300      	movs	r3, #0
 8008960:	f844 3c04 	str.w	r3, [r4, #-4]
 8008964:	2501      	movs	r5, #1
 8008966:	3c04      	subs	r4, #4
 8008968:	6822      	ldr	r2, [r4, #0]
 800896a:	f000 000f 	and.w	r0, r0, #15
 800896e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008972:	6020      	str	r0, [r4, #0]
 8008974:	e7c3      	b.n	80088fe <__hexnan+0x7a>
 8008976:	2508      	movs	r5, #8
 8008978:	e7c1      	b.n	80088fe <__hexnan+0x7a>
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0df      	beq.n	8008940 <__hexnan+0xbc>
 8008980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008984:	f1c3 0320 	rsb	r3, r3, #32
 8008988:	fa22 f303 	lsr.w	r3, r2, r3
 800898c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008990:	401a      	ands	r2, r3
 8008992:	f847 2c04 	str.w	r2, [r7, #-4]
 8008996:	e7d3      	b.n	8008940 <__hexnan+0xbc>
 8008998:	3e04      	subs	r6, #4
 800899a:	e7d1      	b.n	8008940 <__hexnan+0xbc>
 800899c:	2004      	movs	r0, #4
 800899e:	b007      	add	sp, #28
 80089a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089a4 <__locale_ctype_ptr_l>:
 80089a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80089a8:	4770      	bx	lr

080089aa <__localeconv_l>:
 80089aa:	30f0      	adds	r0, #240	; 0xf0
 80089ac:	4770      	bx	lr
	...

080089b0 <_localeconv_r>:
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <_localeconv_r+0x14>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a18      	ldr	r0, [r3, #32]
 80089b6:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <_localeconv_r+0x18>)
 80089b8:	2800      	cmp	r0, #0
 80089ba:	bf08      	it	eq
 80089bc:	4618      	moveq	r0, r3
 80089be:	30f0      	adds	r0, #240	; 0xf0
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	2000000c 	.word	0x2000000c
 80089c8:	20000070 	.word	0x20000070

080089cc <malloc>:
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <malloc+0xc>)
 80089ce:	4601      	mov	r1, r0
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	f000 bc7b 	b.w	80092cc <_malloc_r>
 80089d6:	bf00      	nop
 80089d8:	2000000c 	.word	0x2000000c

080089dc <__ascii_mbtowc>:
 80089dc:	b082      	sub	sp, #8
 80089de:	b901      	cbnz	r1, 80089e2 <__ascii_mbtowc+0x6>
 80089e0:	a901      	add	r1, sp, #4
 80089e2:	b142      	cbz	r2, 80089f6 <__ascii_mbtowc+0x1a>
 80089e4:	b14b      	cbz	r3, 80089fa <__ascii_mbtowc+0x1e>
 80089e6:	7813      	ldrb	r3, [r2, #0]
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	1c10      	adds	r0, r2, #0
 80089ee:	bf18      	it	ne
 80089f0:	2001      	movne	r0, #1
 80089f2:	b002      	add	sp, #8
 80089f4:	4770      	bx	lr
 80089f6:	4610      	mov	r0, r2
 80089f8:	e7fb      	b.n	80089f2 <__ascii_mbtowc+0x16>
 80089fa:	f06f 0001 	mvn.w	r0, #1
 80089fe:	e7f8      	b.n	80089f2 <__ascii_mbtowc+0x16>

08008a00 <memcpy>:
 8008a00:	b510      	push	{r4, lr}
 8008a02:	1e43      	subs	r3, r0, #1
 8008a04:	440a      	add	r2, r1
 8008a06:	4291      	cmp	r1, r2
 8008a08:	d100      	bne.n	8008a0c <memcpy+0xc>
 8008a0a:	bd10      	pop	{r4, pc}
 8008a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a14:	e7f7      	b.n	8008a06 <memcpy+0x6>

08008a16 <_Balloc>:
 8008a16:	b570      	push	{r4, r5, r6, lr}
 8008a18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	460e      	mov	r6, r1
 8008a1e:	b93d      	cbnz	r5, 8008a30 <_Balloc+0x1a>
 8008a20:	2010      	movs	r0, #16
 8008a22:	f7ff ffd3 	bl	80089cc <malloc>
 8008a26:	6260      	str	r0, [r4, #36]	; 0x24
 8008a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a2c:	6005      	str	r5, [r0, #0]
 8008a2e:	60c5      	str	r5, [r0, #12]
 8008a30:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008a32:	68eb      	ldr	r3, [r5, #12]
 8008a34:	b183      	cbz	r3, 8008a58 <_Balloc+0x42>
 8008a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008a3e:	b9b8      	cbnz	r0, 8008a70 <_Balloc+0x5a>
 8008a40:	2101      	movs	r1, #1
 8008a42:	fa01 f506 	lsl.w	r5, r1, r6
 8008a46:	1d6a      	adds	r2, r5, #5
 8008a48:	0092      	lsls	r2, r2, #2
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fbe1 	bl	8009212 <_calloc_r>
 8008a50:	b160      	cbz	r0, 8008a6c <_Balloc+0x56>
 8008a52:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008a56:	e00e      	b.n	8008a76 <_Balloc+0x60>
 8008a58:	2221      	movs	r2, #33	; 0x21
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fbd8 	bl	8009212 <_calloc_r>
 8008a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a64:	60e8      	str	r0, [r5, #12]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e4      	bne.n	8008a36 <_Balloc+0x20>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	6802      	ldr	r2, [r0, #0]
 8008a72:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008a76:	2300      	movs	r3, #0
 8008a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a7c:	e7f7      	b.n	8008a6e <_Balloc+0x58>

08008a7e <_Bfree>:
 8008a7e:	b570      	push	{r4, r5, r6, lr}
 8008a80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a82:	4606      	mov	r6, r0
 8008a84:	460d      	mov	r5, r1
 8008a86:	b93c      	cbnz	r4, 8008a98 <_Bfree+0x1a>
 8008a88:	2010      	movs	r0, #16
 8008a8a:	f7ff ff9f 	bl	80089cc <malloc>
 8008a8e:	6270      	str	r0, [r6, #36]	; 0x24
 8008a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a94:	6004      	str	r4, [r0, #0]
 8008a96:	60c4      	str	r4, [r0, #12]
 8008a98:	b13d      	cbz	r5, 8008aaa <_Bfree+0x2c>
 8008a9a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a9c:	686a      	ldr	r2, [r5, #4]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008aa4:	6029      	str	r1, [r5, #0]
 8008aa6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}

08008aac <__multadd>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	690d      	ldr	r5, [r1, #16]
 8008ab2:	461f      	mov	r7, r3
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	f101 0c14 	add.w	ip, r1, #20
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8dc 0000 	ldr.w	r0, [ip]
 8008ac2:	b281      	uxth	r1, r0
 8008ac4:	fb02 7101 	mla	r1, r2, r1, r7
 8008ac8:	0c0f      	lsrs	r7, r1, #16
 8008aca:	0c00      	lsrs	r0, r0, #16
 8008acc:	fb02 7000 	mla	r0, r2, r0, r7
 8008ad0:	b289      	uxth	r1, r1
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008ade:	f84c 1b04 	str.w	r1, [ip], #4
 8008ae2:	dcec      	bgt.n	8008abe <__multadd+0x12>
 8008ae4:	b1d7      	cbz	r7, 8008b1c <__multadd+0x70>
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	dc12      	bgt.n	8008b12 <__multadd+0x66>
 8008aec:	6861      	ldr	r1, [r4, #4]
 8008aee:	4630      	mov	r0, r6
 8008af0:	3101      	adds	r1, #1
 8008af2:	f7ff ff90 	bl	8008a16 <_Balloc>
 8008af6:	6922      	ldr	r2, [r4, #16]
 8008af8:	3202      	adds	r2, #2
 8008afa:	f104 010c 	add.w	r1, r4, #12
 8008afe:	4680      	mov	r8, r0
 8008b00:	0092      	lsls	r2, r2, #2
 8008b02:	300c      	adds	r0, #12
 8008b04:	f7ff ff7c 	bl	8008a00 <memcpy>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ffb7 	bl	8008a7e <_Bfree>
 8008b10:	4644      	mov	r4, r8
 8008b12:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b16:	3501      	adds	r5, #1
 8008b18:	615f      	str	r7, [r3, #20]
 8008b1a:	6125      	str	r5, [r4, #16]
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b22 <__s2b>:
 8008b22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	4615      	mov	r5, r2
 8008b2a:	461f      	mov	r7, r3
 8008b2c:	2209      	movs	r2, #9
 8008b2e:	3308      	adds	r3, #8
 8008b30:	4606      	mov	r6, r0
 8008b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b36:	2100      	movs	r1, #0
 8008b38:	2201      	movs	r2, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	db20      	blt.n	8008b80 <__s2b+0x5e>
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ff69 	bl	8008a16 <_Balloc>
 8008b44:	9b08      	ldr	r3, [sp, #32]
 8008b46:	6143      	str	r3, [r0, #20]
 8008b48:	2d09      	cmp	r5, #9
 8008b4a:	f04f 0301 	mov.w	r3, #1
 8008b4e:	6103      	str	r3, [r0, #16]
 8008b50:	dd19      	ble.n	8008b86 <__s2b+0x64>
 8008b52:	f104 0809 	add.w	r8, r4, #9
 8008b56:	46c1      	mov	r9, r8
 8008b58:	442c      	add	r4, r5
 8008b5a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008b5e:	4601      	mov	r1, r0
 8008b60:	3b30      	subs	r3, #48	; 0x30
 8008b62:	220a      	movs	r2, #10
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7ff ffa1 	bl	8008aac <__multadd>
 8008b6a:	45a1      	cmp	r9, r4
 8008b6c:	d1f5      	bne.n	8008b5a <__s2b+0x38>
 8008b6e:	eb08 0405 	add.w	r4, r8, r5
 8008b72:	3c08      	subs	r4, #8
 8008b74:	1b2d      	subs	r5, r5, r4
 8008b76:	1963      	adds	r3, r4, r5
 8008b78:	42bb      	cmp	r3, r7
 8008b7a:	db07      	blt.n	8008b8c <__s2b+0x6a>
 8008b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b80:	0052      	lsls	r2, r2, #1
 8008b82:	3101      	adds	r1, #1
 8008b84:	e7d9      	b.n	8008b3a <__s2b+0x18>
 8008b86:	340a      	adds	r4, #10
 8008b88:	2509      	movs	r5, #9
 8008b8a:	e7f3      	b.n	8008b74 <__s2b+0x52>
 8008b8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b90:	4601      	mov	r1, r0
 8008b92:	3b30      	subs	r3, #48	; 0x30
 8008b94:	220a      	movs	r2, #10
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ff88 	bl	8008aac <__multadd>
 8008b9c:	e7eb      	b.n	8008b76 <__s2b+0x54>

08008b9e <__hi0bits>:
 8008b9e:	0c02      	lsrs	r2, r0, #16
 8008ba0:	0412      	lsls	r2, r2, #16
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	b9b2      	cbnz	r2, 8008bd4 <__hi0bits+0x36>
 8008ba6:	0403      	lsls	r3, r0, #16
 8008ba8:	2010      	movs	r0, #16
 8008baa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008bae:	bf04      	itt	eq
 8008bb0:	021b      	lsleq	r3, r3, #8
 8008bb2:	3008      	addeq	r0, #8
 8008bb4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008bb8:	bf04      	itt	eq
 8008bba:	011b      	lsleq	r3, r3, #4
 8008bbc:	3004      	addeq	r0, #4
 8008bbe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008bc2:	bf04      	itt	eq
 8008bc4:	009b      	lsleq	r3, r3, #2
 8008bc6:	3002      	addeq	r0, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	db06      	blt.n	8008bda <__hi0bits+0x3c>
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	d503      	bpl.n	8008bd8 <__hi0bits+0x3a>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	4770      	bx	lr
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e7e8      	b.n	8008baa <__hi0bits+0xc>
 8008bd8:	2020      	movs	r0, #32
 8008bda:	4770      	bx	lr

08008bdc <__lo0bits>:
 8008bdc:	6803      	ldr	r3, [r0, #0]
 8008bde:	f013 0207 	ands.w	r2, r3, #7
 8008be2:	4601      	mov	r1, r0
 8008be4:	d00b      	beq.n	8008bfe <__lo0bits+0x22>
 8008be6:	07da      	lsls	r2, r3, #31
 8008be8:	d423      	bmi.n	8008c32 <__lo0bits+0x56>
 8008bea:	0798      	lsls	r0, r3, #30
 8008bec:	bf49      	itett	mi
 8008bee:	085b      	lsrmi	r3, r3, #1
 8008bf0:	089b      	lsrpl	r3, r3, #2
 8008bf2:	2001      	movmi	r0, #1
 8008bf4:	600b      	strmi	r3, [r1, #0]
 8008bf6:	bf5c      	itt	pl
 8008bf8:	600b      	strpl	r3, [r1, #0]
 8008bfa:	2002      	movpl	r0, #2
 8008bfc:	4770      	bx	lr
 8008bfe:	b298      	uxth	r0, r3
 8008c00:	b9a8      	cbnz	r0, 8008c2e <__lo0bits+0x52>
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	2010      	movs	r0, #16
 8008c06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c0a:	bf04      	itt	eq
 8008c0c:	0a1b      	lsreq	r3, r3, #8
 8008c0e:	3008      	addeq	r0, #8
 8008c10:	071a      	lsls	r2, r3, #28
 8008c12:	bf04      	itt	eq
 8008c14:	091b      	lsreq	r3, r3, #4
 8008c16:	3004      	addeq	r0, #4
 8008c18:	079a      	lsls	r2, r3, #30
 8008c1a:	bf04      	itt	eq
 8008c1c:	089b      	lsreq	r3, r3, #2
 8008c1e:	3002      	addeq	r0, #2
 8008c20:	07da      	lsls	r2, r3, #31
 8008c22:	d402      	bmi.n	8008c2a <__lo0bits+0x4e>
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	d006      	beq.n	8008c36 <__lo0bits+0x5a>
 8008c28:	3001      	adds	r0, #1
 8008c2a:	600b      	str	r3, [r1, #0]
 8008c2c:	4770      	bx	lr
 8008c2e:	4610      	mov	r0, r2
 8008c30:	e7e9      	b.n	8008c06 <__lo0bits+0x2a>
 8008c32:	2000      	movs	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	2020      	movs	r0, #32
 8008c38:	4770      	bx	lr

08008c3a <__i2b>:
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	2101      	movs	r1, #1
 8008c40:	f7ff fee9 	bl	8008a16 <_Balloc>
 8008c44:	2201      	movs	r2, #1
 8008c46:	6144      	str	r4, [r0, #20]
 8008c48:	6102      	str	r2, [r0, #16]
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <__multiply>:
 8008c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	4614      	mov	r4, r2
 8008c52:	690a      	ldr	r2, [r1, #16]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	bfb8      	it	lt
 8008c5a:	460b      	movlt	r3, r1
 8008c5c:	4688      	mov	r8, r1
 8008c5e:	bfbc      	itt	lt
 8008c60:	46a0      	movlt	r8, r4
 8008c62:	461c      	movlt	r4, r3
 8008c64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c68:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c74:	eb07 0609 	add.w	r6, r7, r9
 8008c78:	42b3      	cmp	r3, r6
 8008c7a:	bfb8      	it	lt
 8008c7c:	3101      	addlt	r1, #1
 8008c7e:	f7ff feca 	bl	8008a16 <_Balloc>
 8008c82:	f100 0514 	add.w	r5, r0, #20
 8008c86:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4573      	cmp	r3, lr
 8008c90:	d316      	bcc.n	8008cc0 <__multiply+0x74>
 8008c92:	f104 0214 	add.w	r2, r4, #20
 8008c96:	f108 0114 	add.w	r1, r8, #20
 8008c9a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008c9e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	9b00      	ldr	r3, [sp, #0]
 8008ca6:	9201      	str	r2, [sp, #4]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d80c      	bhi.n	8008cc6 <__multiply+0x7a>
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	dd03      	ble.n	8008cb8 <__multiply+0x6c>
 8008cb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d05d      	beq.n	8008d74 <__multiply+0x128>
 8008cb8:	6106      	str	r6, [r0, #16]
 8008cba:	b003      	add	sp, #12
 8008cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc0:	f843 2b04 	str.w	r2, [r3], #4
 8008cc4:	e7e3      	b.n	8008c8e <__multiply+0x42>
 8008cc6:	f8b2 b000 	ldrh.w	fp, [r2]
 8008cca:	f1bb 0f00 	cmp.w	fp, #0
 8008cce:	d023      	beq.n	8008d18 <__multiply+0xcc>
 8008cd0:	4689      	mov	r9, r1
 8008cd2:	46ac      	mov	ip, r5
 8008cd4:	f04f 0800 	mov.w	r8, #0
 8008cd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8008cdc:	f8dc a000 	ldr.w	sl, [ip]
 8008ce0:	b2a3      	uxth	r3, r4
 8008ce2:	fa1f fa8a 	uxth.w	sl, sl
 8008ce6:	fb0b a303 	mla	r3, fp, r3, sl
 8008cea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008cee:	f8dc 4000 	ldr.w	r4, [ip]
 8008cf2:	4443      	add	r3, r8
 8008cf4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008cf8:	fb0b 840a 	mla	r4, fp, sl, r8
 8008cfc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008d00:	46e2      	mov	sl, ip
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d08:	454f      	cmp	r7, r9
 8008d0a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d0e:	f84a 3b04 	str.w	r3, [sl], #4
 8008d12:	d82b      	bhi.n	8008d6c <__multiply+0x120>
 8008d14:	f8cc 8004 	str.w	r8, [ip, #4]
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008d1e:	3204      	adds	r2, #4
 8008d20:	f1ba 0f00 	cmp.w	sl, #0
 8008d24:	d020      	beq.n	8008d68 <__multiply+0x11c>
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	4689      	mov	r9, r1
 8008d2a:	46a8      	mov	r8, r5
 8008d2c:	f04f 0b00 	mov.w	fp, #0
 8008d30:	f8b9 c000 	ldrh.w	ip, [r9]
 8008d34:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008d38:	fb0a 440c 	mla	r4, sl, ip, r4
 8008d3c:	445c      	add	r4, fp
 8008d3e:	46c4      	mov	ip, r8
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d46:	f84c 3b04 	str.w	r3, [ip], #4
 8008d4a:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d4e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008d52:	0c1b      	lsrs	r3, r3, #16
 8008d54:	fb0a b303 	mla	r3, sl, r3, fp
 8008d58:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008d5c:	454f      	cmp	r7, r9
 8008d5e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008d62:	d805      	bhi.n	8008d70 <__multiply+0x124>
 8008d64:	f8c8 3004 	str.w	r3, [r8, #4]
 8008d68:	3504      	adds	r5, #4
 8008d6a:	e79b      	b.n	8008ca4 <__multiply+0x58>
 8008d6c:	46d4      	mov	ip, sl
 8008d6e:	e7b3      	b.n	8008cd8 <__multiply+0x8c>
 8008d70:	46e0      	mov	r8, ip
 8008d72:	e7dd      	b.n	8008d30 <__multiply+0xe4>
 8008d74:	3e01      	subs	r6, #1
 8008d76:	e799      	b.n	8008cac <__multiply+0x60>

08008d78 <__pow5mult>:
 8008d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d7c:	4615      	mov	r5, r2
 8008d7e:	f012 0203 	ands.w	r2, r2, #3
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	d007      	beq.n	8008d98 <__pow5mult+0x20>
 8008d88:	3a01      	subs	r2, #1
 8008d8a:	4c21      	ldr	r4, [pc, #132]	; (8008e10 <__pow5mult+0x98>)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d92:	f7ff fe8b 	bl	8008aac <__multadd>
 8008d96:	4607      	mov	r7, r0
 8008d98:	10ad      	asrs	r5, r5, #2
 8008d9a:	d035      	beq.n	8008e08 <__pow5mult+0x90>
 8008d9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d9e:	b93c      	cbnz	r4, 8008db0 <__pow5mult+0x38>
 8008da0:	2010      	movs	r0, #16
 8008da2:	f7ff fe13 	bl	80089cc <malloc>
 8008da6:	6270      	str	r0, [r6, #36]	; 0x24
 8008da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dac:	6004      	str	r4, [r0, #0]
 8008dae:	60c4      	str	r4, [r0, #12]
 8008db0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008db8:	b94c      	cbnz	r4, 8008dce <__pow5mult+0x56>
 8008dba:	f240 2171 	movw	r1, #625	; 0x271
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ff3b 	bl	8008c3a <__i2b>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dca:	4604      	mov	r4, r0
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	f04f 0800 	mov.w	r8, #0
 8008dd2:	07eb      	lsls	r3, r5, #31
 8008dd4:	d50a      	bpl.n	8008dec <__pow5mult+0x74>
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ff36 	bl	8008c4c <__multiply>
 8008de0:	4639      	mov	r1, r7
 8008de2:	4681      	mov	r9, r0
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff fe4a 	bl	8008a7e <_Bfree>
 8008dea:	464f      	mov	r7, r9
 8008dec:	106d      	asrs	r5, r5, #1
 8008dee:	d00b      	beq.n	8008e08 <__pow5mult+0x90>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	b938      	cbnz	r0, 8008e04 <__pow5mult+0x8c>
 8008df4:	4622      	mov	r2, r4
 8008df6:	4621      	mov	r1, r4
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7ff ff27 	bl	8008c4c <__multiply>
 8008dfe:	6020      	str	r0, [r4, #0]
 8008e00:	f8c0 8000 	str.w	r8, [r0]
 8008e04:	4604      	mov	r4, r0
 8008e06:	e7e4      	b.n	8008dd2 <__pow5mult+0x5a>
 8008e08:	4638      	mov	r0, r7
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	bf00      	nop
 8008e10:	08009938 	.word	0x08009938

08008e14 <__lshift>:
 8008e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e18:	460c      	mov	r4, r1
 8008e1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	6849      	ldr	r1, [r1, #4]
 8008e22:	eb0a 0903 	add.w	r9, sl, r3
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	4607      	mov	r7, r0
 8008e2a:	4616      	mov	r6, r2
 8008e2c:	f109 0501 	add.w	r5, r9, #1
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	db32      	blt.n	8008e9a <__lshift+0x86>
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff fdee 	bl	8008a16 <_Balloc>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	f100 0114 	add.w	r1, r0, #20
 8008e42:	461a      	mov	r2, r3
 8008e44:	4553      	cmp	r3, sl
 8008e46:	db2b      	blt.n	8008ea0 <__lshift+0x8c>
 8008e48:	6920      	ldr	r0, [r4, #16]
 8008e4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e4e:	f104 0314 	add.w	r3, r4, #20
 8008e52:	f016 021f 	ands.w	r2, r6, #31
 8008e56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e5e:	d025      	beq.n	8008eac <__lshift+0x98>
 8008e60:	f1c2 0e20 	rsb	lr, r2, #32
 8008e64:	2000      	movs	r0, #0
 8008e66:	681e      	ldr	r6, [r3, #0]
 8008e68:	468a      	mov	sl, r1
 8008e6a:	4096      	lsls	r6, r2
 8008e6c:	4330      	orrs	r0, r6
 8008e6e:	f84a 0b04 	str.w	r0, [sl], #4
 8008e72:	f853 0b04 	ldr.w	r0, [r3], #4
 8008e76:	459c      	cmp	ip, r3
 8008e78:	fa20 f00e 	lsr.w	r0, r0, lr
 8008e7c:	d814      	bhi.n	8008ea8 <__lshift+0x94>
 8008e7e:	6048      	str	r0, [r1, #4]
 8008e80:	b108      	cbz	r0, 8008e86 <__lshift+0x72>
 8008e82:	f109 0502 	add.w	r5, r9, #2
 8008e86:	3d01      	subs	r5, #1
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f8c8 5010 	str.w	r5, [r8, #16]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f7ff fdf5 	bl	8008a7e <_Bfree>
 8008e94:	4640      	mov	r0, r8
 8008e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9a:	3101      	adds	r1, #1
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	e7c7      	b.n	8008e30 <__lshift+0x1c>
 8008ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	e7cd      	b.n	8008e44 <__lshift+0x30>
 8008ea8:	4651      	mov	r1, sl
 8008eaa:	e7dc      	b.n	8008e66 <__lshift+0x52>
 8008eac:	3904      	subs	r1, #4
 8008eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eb6:	459c      	cmp	ip, r3
 8008eb8:	d8f9      	bhi.n	8008eae <__lshift+0x9a>
 8008eba:	e7e4      	b.n	8008e86 <__lshift+0x72>

08008ebc <__mcmp>:
 8008ebc:	6903      	ldr	r3, [r0, #16]
 8008ebe:	690a      	ldr	r2, [r1, #16]
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	b530      	push	{r4, r5, lr}
 8008ec4:	d10c      	bne.n	8008ee0 <__mcmp+0x24>
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	3014      	adds	r0, #20
 8008eca:	3114      	adds	r1, #20
 8008ecc:	1884      	adds	r4, r0, r2
 8008ece:	4411      	add	r1, r2
 8008ed0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ed8:	4295      	cmp	r5, r2
 8008eda:	d003      	beq.n	8008ee4 <__mcmp+0x28>
 8008edc:	d305      	bcc.n	8008eea <__mcmp+0x2e>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	bd30      	pop	{r4, r5, pc}
 8008ee4:	42a0      	cmp	r0, r4
 8008ee6:	d3f3      	bcc.n	8008ed0 <__mcmp+0x14>
 8008ee8:	e7fa      	b.n	8008ee0 <__mcmp+0x24>
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eee:	e7f7      	b.n	8008ee0 <__mcmp+0x24>

08008ef0 <__mdiff>:
 8008ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4628      	mov	r0, r5
 8008efc:	4614      	mov	r4, r2
 8008efe:	f7ff ffdd 	bl	8008ebc <__mcmp>
 8008f02:	1e06      	subs	r6, r0, #0
 8008f04:	d108      	bne.n	8008f18 <__mdiff+0x28>
 8008f06:	4631      	mov	r1, r6
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff fd84 	bl	8008a16 <_Balloc>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	bfa4      	itt	ge
 8008f1a:	4623      	movge	r3, r4
 8008f1c:	462c      	movge	r4, r5
 8008f1e:	4638      	mov	r0, r7
 8008f20:	6861      	ldr	r1, [r4, #4]
 8008f22:	bfa6      	itte	ge
 8008f24:	461d      	movge	r5, r3
 8008f26:	2600      	movge	r6, #0
 8008f28:	2601      	movlt	r6, #1
 8008f2a:	f7ff fd74 	bl	8008a16 <_Balloc>
 8008f2e:	692b      	ldr	r3, [r5, #16]
 8008f30:	60c6      	str	r6, [r0, #12]
 8008f32:	6926      	ldr	r6, [r4, #16]
 8008f34:	f105 0914 	add.w	r9, r5, #20
 8008f38:	f104 0214 	add.w	r2, r4, #20
 8008f3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008f40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008f44:	f100 0514 	add.w	r5, r0, #20
 8008f48:	f04f 0e00 	mov.w	lr, #0
 8008f4c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008f50:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f54:	fa1e f18a 	uxtah	r1, lr, sl
 8008f58:	b2a3      	uxth	r3, r4
 8008f5a:	1ac9      	subs	r1, r1, r3
 8008f5c:	0c23      	lsrs	r3, r4, #16
 8008f5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008f62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008f66:	b289      	uxth	r1, r1
 8008f68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008f6c:	45c8      	cmp	r8, r9
 8008f6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008f72:	4694      	mov	ip, r2
 8008f74:	f845 3b04 	str.w	r3, [r5], #4
 8008f78:	d8e8      	bhi.n	8008f4c <__mdiff+0x5c>
 8008f7a:	45bc      	cmp	ip, r7
 8008f7c:	d304      	bcc.n	8008f88 <__mdiff+0x98>
 8008f7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008f82:	b183      	cbz	r3, 8008fa6 <__mdiff+0xb6>
 8008f84:	6106      	str	r6, [r0, #16]
 8008f86:	e7c5      	b.n	8008f14 <__mdiff+0x24>
 8008f88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f8c:	fa1e f381 	uxtah	r3, lr, r1
 8008f90:	141a      	asrs	r2, r3, #16
 8008f92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008fa0:	f845 3b04 	str.w	r3, [r5], #4
 8008fa4:	e7e9      	b.n	8008f7a <__mdiff+0x8a>
 8008fa6:	3e01      	subs	r6, #1
 8008fa8:	e7e9      	b.n	8008f7e <__mdiff+0x8e>
	...

08008fac <__ulp>:
 8008fac:	4b12      	ldr	r3, [pc, #72]	; (8008ff8 <__ulp+0x4c>)
 8008fae:	ee10 2a90 	vmov	r2, s1
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	dd04      	ble.n	8008fc6 <__ulp+0x1a>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	ec41 0b10 	vmov	d0, r0, r1
 8008fc4:	4770      	bx	lr
 8008fc6:	425b      	negs	r3, r3
 8008fc8:	151b      	asrs	r3, r3, #20
 8008fca:	2b13      	cmp	r3, #19
 8008fcc:	f04f 0000 	mov.w	r0, #0
 8008fd0:	f04f 0100 	mov.w	r1, #0
 8008fd4:	dc04      	bgt.n	8008fe0 <__ulp+0x34>
 8008fd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008fda:	fa42 f103 	asr.w	r1, r2, r3
 8008fde:	e7ef      	b.n	8008fc0 <__ulp+0x14>
 8008fe0:	3b14      	subs	r3, #20
 8008fe2:	2b1e      	cmp	r3, #30
 8008fe4:	f04f 0201 	mov.w	r2, #1
 8008fe8:	bfda      	itte	le
 8008fea:	f1c3 031f 	rsble	r3, r3, #31
 8008fee:	fa02 f303 	lslle.w	r3, r2, r3
 8008ff2:	4613      	movgt	r3, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	e7e3      	b.n	8008fc0 <__ulp+0x14>
 8008ff8:	7ff00000 	.word	0x7ff00000

08008ffc <__b2d>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	6905      	ldr	r5, [r0, #16]
 8009000:	f100 0714 	add.w	r7, r0, #20
 8009004:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009008:	1f2e      	subs	r6, r5, #4
 800900a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff fdc5 	bl	8008b9e <__hi0bits>
 8009014:	f1c0 0320 	rsb	r3, r0, #32
 8009018:	280a      	cmp	r0, #10
 800901a:	600b      	str	r3, [r1, #0]
 800901c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009094 <__b2d+0x98>
 8009020:	dc14      	bgt.n	800904c <__b2d+0x50>
 8009022:	f1c0 0e0b 	rsb	lr, r0, #11
 8009026:	fa24 f10e 	lsr.w	r1, r4, lr
 800902a:	42b7      	cmp	r7, r6
 800902c:	ea41 030c 	orr.w	r3, r1, ip
 8009030:	bf34      	ite	cc
 8009032:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009036:	2100      	movcs	r1, #0
 8009038:	3015      	adds	r0, #21
 800903a:	fa04 f000 	lsl.w	r0, r4, r0
 800903e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009042:	ea40 0201 	orr.w	r2, r0, r1
 8009046:	ec43 2b10 	vmov	d0, r2, r3
 800904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800904c:	42b7      	cmp	r7, r6
 800904e:	bf3a      	itte	cc
 8009050:	f1a5 0608 	subcc.w	r6, r5, #8
 8009054:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009058:	2100      	movcs	r1, #0
 800905a:	380b      	subs	r0, #11
 800905c:	d015      	beq.n	800908a <__b2d+0x8e>
 800905e:	4084      	lsls	r4, r0
 8009060:	f1c0 0520 	rsb	r5, r0, #32
 8009064:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009068:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800906c:	42be      	cmp	r6, r7
 800906e:	fa21 fc05 	lsr.w	ip, r1, r5
 8009072:	ea44 030c 	orr.w	r3, r4, ip
 8009076:	bf8c      	ite	hi
 8009078:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800907c:	2400      	movls	r4, #0
 800907e:	fa01 f000 	lsl.w	r0, r1, r0
 8009082:	40ec      	lsrs	r4, r5
 8009084:	ea40 0204 	orr.w	r2, r0, r4
 8009088:	e7dd      	b.n	8009046 <__b2d+0x4a>
 800908a:	ea44 030c 	orr.w	r3, r4, ip
 800908e:	460a      	mov	r2, r1
 8009090:	e7d9      	b.n	8009046 <__b2d+0x4a>
 8009092:	bf00      	nop
 8009094:	3ff00000 	.word	0x3ff00000

08009098 <__d2b>:
 8009098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800909c:	460e      	mov	r6, r1
 800909e:	2101      	movs	r1, #1
 80090a0:	ec59 8b10 	vmov	r8, r9, d0
 80090a4:	4615      	mov	r5, r2
 80090a6:	f7ff fcb6 	bl	8008a16 <_Balloc>
 80090aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80090ae:	4607      	mov	r7, r0
 80090b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090b4:	bb34      	cbnz	r4, 8009104 <__d2b+0x6c>
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	f1b8 0300 	subs.w	r3, r8, #0
 80090bc:	d027      	beq.n	800910e <__d2b+0x76>
 80090be:	a802      	add	r0, sp, #8
 80090c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80090c4:	f7ff fd8a 	bl	8008bdc <__lo0bits>
 80090c8:	9900      	ldr	r1, [sp, #0]
 80090ca:	b1f0      	cbz	r0, 800910a <__d2b+0x72>
 80090cc:	9a01      	ldr	r2, [sp, #4]
 80090ce:	f1c0 0320 	rsb	r3, r0, #32
 80090d2:	fa02 f303 	lsl.w	r3, r2, r3
 80090d6:	430b      	orrs	r3, r1
 80090d8:	40c2      	lsrs	r2, r0
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	9201      	str	r2, [sp, #4]
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bf14      	ite	ne
 80090e6:	2102      	movne	r1, #2
 80090e8:	2101      	moveq	r1, #1
 80090ea:	6139      	str	r1, [r7, #16]
 80090ec:	b1c4      	cbz	r4, 8009120 <__d2b+0x88>
 80090ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090f2:	4404      	add	r4, r0
 80090f4:	6034      	str	r4, [r6, #0]
 80090f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090fa:	6028      	str	r0, [r5, #0]
 80090fc:	4638      	mov	r0, r7
 80090fe:	b003      	add	sp, #12
 8009100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009108:	e7d5      	b.n	80090b6 <__d2b+0x1e>
 800910a:	6179      	str	r1, [r7, #20]
 800910c:	e7e7      	b.n	80090de <__d2b+0x46>
 800910e:	a801      	add	r0, sp, #4
 8009110:	f7ff fd64 	bl	8008bdc <__lo0bits>
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	2101      	movs	r1, #1
 800911a:	6139      	str	r1, [r7, #16]
 800911c:	3020      	adds	r0, #32
 800911e:	e7e5      	b.n	80090ec <__d2b+0x54>
 8009120:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009124:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009128:	6030      	str	r0, [r6, #0]
 800912a:	6918      	ldr	r0, [r3, #16]
 800912c:	f7ff fd37 	bl	8008b9e <__hi0bits>
 8009130:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009134:	e7e1      	b.n	80090fa <__d2b+0x62>

08009136 <__ratio>:
 8009136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	4688      	mov	r8, r1
 800913c:	4669      	mov	r1, sp
 800913e:	4681      	mov	r9, r0
 8009140:	f7ff ff5c 	bl	8008ffc <__b2d>
 8009144:	a901      	add	r1, sp, #4
 8009146:	4640      	mov	r0, r8
 8009148:	ec57 6b10 	vmov	r6, r7, d0
 800914c:	f7ff ff56 	bl	8008ffc <__b2d>
 8009150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009154:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009158:	eba3 0c02 	sub.w	ip, r3, r2
 800915c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009166:	ec5b ab10 	vmov	sl, fp, d0
 800916a:	2b00      	cmp	r3, #0
 800916c:	bfce      	itee	gt
 800916e:	463a      	movgt	r2, r7
 8009170:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009174:	465a      	movle	r2, fp
 8009176:	4659      	mov	r1, fp
 8009178:	463d      	mov	r5, r7
 800917a:	bfd4      	ite	le
 800917c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009180:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009184:	4630      	mov	r0, r6
 8009186:	ee10 2a10 	vmov	r2, s0
 800918a:	460b      	mov	r3, r1
 800918c:	4629      	mov	r1, r5
 800918e:	f7f7 fb5d 	bl	800084c <__aeabi_ddiv>
 8009192:	ec41 0b10 	vmov	d0, r0, r1
 8009196:	b003      	add	sp, #12
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800919c <__copybits>:
 800919c:	3901      	subs	r1, #1
 800919e:	b510      	push	{r4, lr}
 80091a0:	1149      	asrs	r1, r1, #5
 80091a2:	6914      	ldr	r4, [r2, #16]
 80091a4:	3101      	adds	r1, #1
 80091a6:	f102 0314 	add.w	r3, r2, #20
 80091aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	4602      	mov	r2, r0
 80091b6:	d303      	bcc.n	80091c0 <__copybits+0x24>
 80091b8:	2300      	movs	r3, #0
 80091ba:	428a      	cmp	r2, r1
 80091bc:	d305      	bcc.n	80091ca <__copybits+0x2e>
 80091be:	bd10      	pop	{r4, pc}
 80091c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c4:	f840 2b04 	str.w	r2, [r0], #4
 80091c8:	e7f3      	b.n	80091b2 <__copybits+0x16>
 80091ca:	f842 3b04 	str.w	r3, [r2], #4
 80091ce:	e7f4      	b.n	80091ba <__copybits+0x1e>

080091d0 <__any_on>:
 80091d0:	f100 0214 	add.w	r2, r0, #20
 80091d4:	6900      	ldr	r0, [r0, #16]
 80091d6:	114b      	asrs	r3, r1, #5
 80091d8:	4298      	cmp	r0, r3
 80091da:	b510      	push	{r4, lr}
 80091dc:	db11      	blt.n	8009202 <__any_on+0x32>
 80091de:	dd0a      	ble.n	80091f6 <__any_on+0x26>
 80091e0:	f011 011f 	ands.w	r1, r1, #31
 80091e4:	d007      	beq.n	80091f6 <__any_on+0x26>
 80091e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091ea:	fa24 f001 	lsr.w	r0, r4, r1
 80091ee:	fa00 f101 	lsl.w	r1, r0, r1
 80091f2:	428c      	cmp	r4, r1
 80091f4:	d10b      	bne.n	800920e <__any_on+0x3e>
 80091f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d803      	bhi.n	8009206 <__any_on+0x36>
 80091fe:	2000      	movs	r0, #0
 8009200:	bd10      	pop	{r4, pc}
 8009202:	4603      	mov	r3, r0
 8009204:	e7f7      	b.n	80091f6 <__any_on+0x26>
 8009206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800920a:	2900      	cmp	r1, #0
 800920c:	d0f5      	beq.n	80091fa <__any_on+0x2a>
 800920e:	2001      	movs	r0, #1
 8009210:	e7f6      	b.n	8009200 <__any_on+0x30>

08009212 <_calloc_r>:
 8009212:	b538      	push	{r3, r4, r5, lr}
 8009214:	fb02 f401 	mul.w	r4, r2, r1
 8009218:	4621      	mov	r1, r4
 800921a:	f000 f857 	bl	80092cc <_malloc_r>
 800921e:	4605      	mov	r5, r0
 8009220:	b118      	cbz	r0, 800922a <_calloc_r+0x18>
 8009222:	4622      	mov	r2, r4
 8009224:	2100      	movs	r1, #0
 8009226:	f7fc fd37 	bl	8005c98 <memset>
 800922a:	4628      	mov	r0, r5
 800922c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009230 <_free_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4605      	mov	r5, r0
 8009234:	2900      	cmp	r1, #0
 8009236:	d045      	beq.n	80092c4 <_free_r+0x94>
 8009238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923c:	1f0c      	subs	r4, r1, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfb8      	it	lt
 8009242:	18e4      	addlt	r4, r4, r3
 8009244:	f000 fa36 	bl	80096b4 <__malloc_lock>
 8009248:	4a1f      	ldr	r2, [pc, #124]	; (80092c8 <_free_r+0x98>)
 800924a:	6813      	ldr	r3, [r2, #0]
 800924c:	4610      	mov	r0, r2
 800924e:	b933      	cbnz	r3, 800925e <_free_r+0x2e>
 8009250:	6063      	str	r3, [r4, #4]
 8009252:	6014      	str	r4, [r2, #0]
 8009254:	4628      	mov	r0, r5
 8009256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925a:	f000 ba2c 	b.w	80096b6 <__malloc_unlock>
 800925e:	42a3      	cmp	r3, r4
 8009260:	d90c      	bls.n	800927c <_free_r+0x4c>
 8009262:	6821      	ldr	r1, [r4, #0]
 8009264:	1862      	adds	r2, r4, r1
 8009266:	4293      	cmp	r3, r2
 8009268:	bf04      	itt	eq
 800926a:	681a      	ldreq	r2, [r3, #0]
 800926c:	685b      	ldreq	r3, [r3, #4]
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	bf04      	itt	eq
 8009272:	1852      	addeq	r2, r2, r1
 8009274:	6022      	streq	r2, [r4, #0]
 8009276:	6004      	str	r4, [r0, #0]
 8009278:	e7ec      	b.n	8009254 <_free_r+0x24>
 800927a:	4613      	mov	r3, r2
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	b10a      	cbz	r2, 8009284 <_free_r+0x54>
 8009280:	42a2      	cmp	r2, r4
 8009282:	d9fa      	bls.n	800927a <_free_r+0x4a>
 8009284:	6819      	ldr	r1, [r3, #0]
 8009286:	1858      	adds	r0, r3, r1
 8009288:	42a0      	cmp	r0, r4
 800928a:	d10b      	bne.n	80092a4 <_free_r+0x74>
 800928c:	6820      	ldr	r0, [r4, #0]
 800928e:	4401      	add	r1, r0
 8009290:	1858      	adds	r0, r3, r1
 8009292:	4282      	cmp	r2, r0
 8009294:	6019      	str	r1, [r3, #0]
 8009296:	d1dd      	bne.n	8009254 <_free_r+0x24>
 8009298:	6810      	ldr	r0, [r2, #0]
 800929a:	6852      	ldr	r2, [r2, #4]
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	4401      	add	r1, r0
 80092a0:	6019      	str	r1, [r3, #0]
 80092a2:	e7d7      	b.n	8009254 <_free_r+0x24>
 80092a4:	d902      	bls.n	80092ac <_free_r+0x7c>
 80092a6:	230c      	movs	r3, #12
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	e7d3      	b.n	8009254 <_free_r+0x24>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	1821      	adds	r1, r4, r0
 80092b0:	428a      	cmp	r2, r1
 80092b2:	bf04      	itt	eq
 80092b4:	6811      	ldreq	r1, [r2, #0]
 80092b6:	6852      	ldreq	r2, [r2, #4]
 80092b8:	6062      	str	r2, [r4, #4]
 80092ba:	bf04      	itt	eq
 80092bc:	1809      	addeq	r1, r1, r0
 80092be:	6021      	streq	r1, [r4, #0]
 80092c0:	605c      	str	r4, [r3, #4]
 80092c2:	e7c7      	b.n	8009254 <_free_r+0x24>
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	200001fc 	.word	0x200001fc

080092cc <_malloc_r>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	1ccd      	adds	r5, r1, #3
 80092d0:	f025 0503 	bic.w	r5, r5, #3
 80092d4:	3508      	adds	r5, #8
 80092d6:	2d0c      	cmp	r5, #12
 80092d8:	bf38      	it	cc
 80092da:	250c      	movcc	r5, #12
 80092dc:	2d00      	cmp	r5, #0
 80092de:	4606      	mov	r6, r0
 80092e0:	db01      	blt.n	80092e6 <_malloc_r+0x1a>
 80092e2:	42a9      	cmp	r1, r5
 80092e4:	d903      	bls.n	80092ee <_malloc_r+0x22>
 80092e6:	230c      	movs	r3, #12
 80092e8:	6033      	str	r3, [r6, #0]
 80092ea:	2000      	movs	r0, #0
 80092ec:	bd70      	pop	{r4, r5, r6, pc}
 80092ee:	f000 f9e1 	bl	80096b4 <__malloc_lock>
 80092f2:	4a21      	ldr	r2, [pc, #132]	; (8009378 <_malloc_r+0xac>)
 80092f4:	6814      	ldr	r4, [r2, #0]
 80092f6:	4621      	mov	r1, r4
 80092f8:	b991      	cbnz	r1, 8009320 <_malloc_r+0x54>
 80092fa:	4c20      	ldr	r4, [pc, #128]	; (800937c <_malloc_r+0xb0>)
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	b91b      	cbnz	r3, 8009308 <_malloc_r+0x3c>
 8009300:	4630      	mov	r0, r6
 8009302:	f000 f98f 	bl	8009624 <_sbrk_r>
 8009306:	6020      	str	r0, [r4, #0]
 8009308:	4629      	mov	r1, r5
 800930a:	4630      	mov	r0, r6
 800930c:	f000 f98a 	bl	8009624 <_sbrk_r>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d124      	bne.n	800935e <_malloc_r+0x92>
 8009314:	230c      	movs	r3, #12
 8009316:	6033      	str	r3, [r6, #0]
 8009318:	4630      	mov	r0, r6
 800931a:	f000 f9cc 	bl	80096b6 <__malloc_unlock>
 800931e:	e7e4      	b.n	80092ea <_malloc_r+0x1e>
 8009320:	680b      	ldr	r3, [r1, #0]
 8009322:	1b5b      	subs	r3, r3, r5
 8009324:	d418      	bmi.n	8009358 <_malloc_r+0x8c>
 8009326:	2b0b      	cmp	r3, #11
 8009328:	d90f      	bls.n	800934a <_malloc_r+0x7e>
 800932a:	600b      	str	r3, [r1, #0]
 800932c:	50cd      	str	r5, [r1, r3]
 800932e:	18cc      	adds	r4, r1, r3
 8009330:	4630      	mov	r0, r6
 8009332:	f000 f9c0 	bl	80096b6 <__malloc_unlock>
 8009336:	f104 000b 	add.w	r0, r4, #11
 800933a:	1d23      	adds	r3, r4, #4
 800933c:	f020 0007 	bic.w	r0, r0, #7
 8009340:	1ac3      	subs	r3, r0, r3
 8009342:	d0d3      	beq.n	80092ec <_malloc_r+0x20>
 8009344:	425a      	negs	r2, r3
 8009346:	50e2      	str	r2, [r4, r3]
 8009348:	e7d0      	b.n	80092ec <_malloc_r+0x20>
 800934a:	428c      	cmp	r4, r1
 800934c:	684b      	ldr	r3, [r1, #4]
 800934e:	bf16      	itet	ne
 8009350:	6063      	strne	r3, [r4, #4]
 8009352:	6013      	streq	r3, [r2, #0]
 8009354:	460c      	movne	r4, r1
 8009356:	e7eb      	b.n	8009330 <_malloc_r+0x64>
 8009358:	460c      	mov	r4, r1
 800935a:	6849      	ldr	r1, [r1, #4]
 800935c:	e7cc      	b.n	80092f8 <_malloc_r+0x2c>
 800935e:	1cc4      	adds	r4, r0, #3
 8009360:	f024 0403 	bic.w	r4, r4, #3
 8009364:	42a0      	cmp	r0, r4
 8009366:	d005      	beq.n	8009374 <_malloc_r+0xa8>
 8009368:	1a21      	subs	r1, r4, r0
 800936a:	4630      	mov	r0, r6
 800936c:	f000 f95a 	bl	8009624 <_sbrk_r>
 8009370:	3001      	adds	r0, #1
 8009372:	d0cf      	beq.n	8009314 <_malloc_r+0x48>
 8009374:	6025      	str	r5, [r4, #0]
 8009376:	e7db      	b.n	8009330 <_malloc_r+0x64>
 8009378:	200001fc 	.word	0x200001fc
 800937c:	20000200 	.word	0x20000200

08009380 <__ssputs_r>:
 8009380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	688e      	ldr	r6, [r1, #8]
 8009386:	429e      	cmp	r6, r3
 8009388:	4682      	mov	sl, r0
 800938a:	460c      	mov	r4, r1
 800938c:	4690      	mov	r8, r2
 800938e:	4699      	mov	r9, r3
 8009390:	d837      	bhi.n	8009402 <__ssputs_r+0x82>
 8009392:	898a      	ldrh	r2, [r1, #12]
 8009394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009398:	d031      	beq.n	80093fe <__ssputs_r+0x7e>
 800939a:	6825      	ldr	r5, [r4, #0]
 800939c:	6909      	ldr	r1, [r1, #16]
 800939e:	1a6f      	subs	r7, r5, r1
 80093a0:	6965      	ldr	r5, [r4, #20]
 80093a2:	2302      	movs	r3, #2
 80093a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80093ac:	f109 0301 	add.w	r3, r9, #1
 80093b0:	443b      	add	r3, r7
 80093b2:	429d      	cmp	r5, r3
 80093b4:	bf38      	it	cc
 80093b6:	461d      	movcc	r5, r3
 80093b8:	0553      	lsls	r3, r2, #21
 80093ba:	d530      	bpl.n	800941e <__ssputs_r+0x9e>
 80093bc:	4629      	mov	r1, r5
 80093be:	f7ff ff85 	bl	80092cc <_malloc_r>
 80093c2:	4606      	mov	r6, r0
 80093c4:	b950      	cbnz	r0, 80093dc <__ssputs_r+0x5c>
 80093c6:	230c      	movs	r3, #12
 80093c8:	f8ca 3000 	str.w	r3, [sl]
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d2:	81a3      	strh	r3, [r4, #12]
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093dc:	463a      	mov	r2, r7
 80093de:	6921      	ldr	r1, [r4, #16]
 80093e0:	f7ff fb0e 	bl	8008a00 <memcpy>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	6126      	str	r6, [r4, #16]
 80093f2:	6165      	str	r5, [r4, #20]
 80093f4:	443e      	add	r6, r7
 80093f6:	1bed      	subs	r5, r5, r7
 80093f8:	6026      	str	r6, [r4, #0]
 80093fa:	60a5      	str	r5, [r4, #8]
 80093fc:	464e      	mov	r6, r9
 80093fe:	454e      	cmp	r6, r9
 8009400:	d900      	bls.n	8009404 <__ssputs_r+0x84>
 8009402:	464e      	mov	r6, r9
 8009404:	4632      	mov	r2, r6
 8009406:	4641      	mov	r1, r8
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	f000 f93a 	bl	8009682 <memmove>
 800940e:	68a3      	ldr	r3, [r4, #8]
 8009410:	1b9b      	subs	r3, r3, r6
 8009412:	60a3      	str	r3, [r4, #8]
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	441e      	add	r6, r3
 8009418:	6026      	str	r6, [r4, #0]
 800941a:	2000      	movs	r0, #0
 800941c:	e7dc      	b.n	80093d8 <__ssputs_r+0x58>
 800941e:	462a      	mov	r2, r5
 8009420:	f000 f94a 	bl	80096b8 <_realloc_r>
 8009424:	4606      	mov	r6, r0
 8009426:	2800      	cmp	r0, #0
 8009428:	d1e2      	bne.n	80093f0 <__ssputs_r+0x70>
 800942a:	6921      	ldr	r1, [r4, #16]
 800942c:	4650      	mov	r0, sl
 800942e:	f7ff feff 	bl	8009230 <_free_r>
 8009432:	e7c8      	b.n	80093c6 <__ssputs_r+0x46>

08009434 <_svfiprintf_r>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	461d      	mov	r5, r3
 800943a:	898b      	ldrh	r3, [r1, #12]
 800943c:	061f      	lsls	r7, r3, #24
 800943e:	b09d      	sub	sp, #116	; 0x74
 8009440:	4680      	mov	r8, r0
 8009442:	460c      	mov	r4, r1
 8009444:	4616      	mov	r6, r2
 8009446:	d50f      	bpl.n	8009468 <_svfiprintf_r+0x34>
 8009448:	690b      	ldr	r3, [r1, #16]
 800944a:	b96b      	cbnz	r3, 8009468 <_svfiprintf_r+0x34>
 800944c:	2140      	movs	r1, #64	; 0x40
 800944e:	f7ff ff3d 	bl	80092cc <_malloc_r>
 8009452:	6020      	str	r0, [r4, #0]
 8009454:	6120      	str	r0, [r4, #16]
 8009456:	b928      	cbnz	r0, 8009464 <_svfiprintf_r+0x30>
 8009458:	230c      	movs	r3, #12
 800945a:	f8c8 3000 	str.w	r3, [r8]
 800945e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009462:	e0c8      	b.n	80095f6 <_svfiprintf_r+0x1c2>
 8009464:	2340      	movs	r3, #64	; 0x40
 8009466:	6163      	str	r3, [r4, #20]
 8009468:	2300      	movs	r3, #0
 800946a:	9309      	str	r3, [sp, #36]	; 0x24
 800946c:	2320      	movs	r3, #32
 800946e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009472:	2330      	movs	r3, #48	; 0x30
 8009474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009478:	9503      	str	r5, [sp, #12]
 800947a:	f04f 0b01 	mov.w	fp, #1
 800947e:	4637      	mov	r7, r6
 8009480:	463d      	mov	r5, r7
 8009482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009486:	b10b      	cbz	r3, 800948c <_svfiprintf_r+0x58>
 8009488:	2b25      	cmp	r3, #37	; 0x25
 800948a:	d13e      	bne.n	800950a <_svfiprintf_r+0xd6>
 800948c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009490:	d00b      	beq.n	80094aa <_svfiprintf_r+0x76>
 8009492:	4653      	mov	r3, sl
 8009494:	4632      	mov	r2, r6
 8009496:	4621      	mov	r1, r4
 8009498:	4640      	mov	r0, r8
 800949a:	f7ff ff71 	bl	8009380 <__ssputs_r>
 800949e:	3001      	adds	r0, #1
 80094a0:	f000 80a4 	beq.w	80095ec <_svfiprintf_r+0x1b8>
 80094a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a6:	4453      	add	r3, sl
 80094a8:	9309      	str	r3, [sp, #36]	; 0x24
 80094aa:	783b      	ldrb	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 809d 	beq.w	80095ec <_svfiprintf_r+0x1b8>
 80094b2:	2300      	movs	r3, #0
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c4:	931a      	str	r3, [sp, #104]	; 0x68
 80094c6:	462f      	mov	r7, r5
 80094c8:	2205      	movs	r2, #5
 80094ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80094ce:	4850      	ldr	r0, [pc, #320]	; (8009610 <_svfiprintf_r+0x1dc>)
 80094d0:	f7f6 fe86 	bl	80001e0 <memchr>
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	b9d0      	cbnz	r0, 800950e <_svfiprintf_r+0xda>
 80094d8:	06d9      	lsls	r1, r3, #27
 80094da:	bf44      	itt	mi
 80094dc:	2220      	movmi	r2, #32
 80094de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094e2:	071a      	lsls	r2, r3, #28
 80094e4:	bf44      	itt	mi
 80094e6:	222b      	movmi	r2, #43	; 0x2b
 80094e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094ec:	782a      	ldrb	r2, [r5, #0]
 80094ee:	2a2a      	cmp	r2, #42	; 0x2a
 80094f0:	d015      	beq.n	800951e <_svfiprintf_r+0xea>
 80094f2:	9a07      	ldr	r2, [sp, #28]
 80094f4:	462f      	mov	r7, r5
 80094f6:	2000      	movs	r0, #0
 80094f8:	250a      	movs	r5, #10
 80094fa:	4639      	mov	r1, r7
 80094fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009500:	3b30      	subs	r3, #48	; 0x30
 8009502:	2b09      	cmp	r3, #9
 8009504:	d94d      	bls.n	80095a2 <_svfiprintf_r+0x16e>
 8009506:	b1b8      	cbz	r0, 8009538 <_svfiprintf_r+0x104>
 8009508:	e00f      	b.n	800952a <_svfiprintf_r+0xf6>
 800950a:	462f      	mov	r7, r5
 800950c:	e7b8      	b.n	8009480 <_svfiprintf_r+0x4c>
 800950e:	4a40      	ldr	r2, [pc, #256]	; (8009610 <_svfiprintf_r+0x1dc>)
 8009510:	1a80      	subs	r0, r0, r2
 8009512:	fa0b f000 	lsl.w	r0, fp, r0
 8009516:	4318      	orrs	r0, r3
 8009518:	9004      	str	r0, [sp, #16]
 800951a:	463d      	mov	r5, r7
 800951c:	e7d3      	b.n	80094c6 <_svfiprintf_r+0x92>
 800951e:	9a03      	ldr	r2, [sp, #12]
 8009520:	1d11      	adds	r1, r2, #4
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	9103      	str	r1, [sp, #12]
 8009526:	2a00      	cmp	r2, #0
 8009528:	db01      	blt.n	800952e <_svfiprintf_r+0xfa>
 800952a:	9207      	str	r2, [sp, #28]
 800952c:	e004      	b.n	8009538 <_svfiprintf_r+0x104>
 800952e:	4252      	negs	r2, r2
 8009530:	f043 0302 	orr.w	r3, r3, #2
 8009534:	9207      	str	r2, [sp, #28]
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	783b      	ldrb	r3, [r7, #0]
 800953a:	2b2e      	cmp	r3, #46	; 0x2e
 800953c:	d10c      	bne.n	8009558 <_svfiprintf_r+0x124>
 800953e:	787b      	ldrb	r3, [r7, #1]
 8009540:	2b2a      	cmp	r3, #42	; 0x2a
 8009542:	d133      	bne.n	80095ac <_svfiprintf_r+0x178>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	9203      	str	r2, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfb8      	it	lt
 8009550:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009554:	3702      	adds	r7, #2
 8009556:	9305      	str	r3, [sp, #20]
 8009558:	4d2e      	ldr	r5, [pc, #184]	; (8009614 <_svfiprintf_r+0x1e0>)
 800955a:	7839      	ldrb	r1, [r7, #0]
 800955c:	2203      	movs	r2, #3
 800955e:	4628      	mov	r0, r5
 8009560:	f7f6 fe3e 	bl	80001e0 <memchr>
 8009564:	b138      	cbz	r0, 8009576 <_svfiprintf_r+0x142>
 8009566:	2340      	movs	r3, #64	; 0x40
 8009568:	1b40      	subs	r0, r0, r5
 800956a:	fa03 f000 	lsl.w	r0, r3, r0
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	4303      	orrs	r3, r0
 8009572:	3701      	adds	r7, #1
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	7839      	ldrb	r1, [r7, #0]
 8009578:	4827      	ldr	r0, [pc, #156]	; (8009618 <_svfiprintf_r+0x1e4>)
 800957a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800957e:	2206      	movs	r2, #6
 8009580:	1c7e      	adds	r6, r7, #1
 8009582:	f7f6 fe2d 	bl	80001e0 <memchr>
 8009586:	2800      	cmp	r0, #0
 8009588:	d038      	beq.n	80095fc <_svfiprintf_r+0x1c8>
 800958a:	4b24      	ldr	r3, [pc, #144]	; (800961c <_svfiprintf_r+0x1e8>)
 800958c:	bb13      	cbnz	r3, 80095d4 <_svfiprintf_r+0x1a0>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	3307      	adds	r3, #7
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	3308      	adds	r3, #8
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959c:	444b      	add	r3, r9
 800959e:	9309      	str	r3, [sp, #36]	; 0x24
 80095a0:	e76d      	b.n	800947e <_svfiprintf_r+0x4a>
 80095a2:	fb05 3202 	mla	r2, r5, r2, r3
 80095a6:	2001      	movs	r0, #1
 80095a8:	460f      	mov	r7, r1
 80095aa:	e7a6      	b.n	80094fa <_svfiprintf_r+0xc6>
 80095ac:	2300      	movs	r3, #0
 80095ae:	3701      	adds	r7, #1
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	4619      	mov	r1, r3
 80095b4:	250a      	movs	r5, #10
 80095b6:	4638      	mov	r0, r7
 80095b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095bc:	3a30      	subs	r2, #48	; 0x30
 80095be:	2a09      	cmp	r2, #9
 80095c0:	d903      	bls.n	80095ca <_svfiprintf_r+0x196>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0c8      	beq.n	8009558 <_svfiprintf_r+0x124>
 80095c6:	9105      	str	r1, [sp, #20]
 80095c8:	e7c6      	b.n	8009558 <_svfiprintf_r+0x124>
 80095ca:	fb05 2101 	mla	r1, r5, r1, r2
 80095ce:	2301      	movs	r3, #1
 80095d0:	4607      	mov	r7, r0
 80095d2:	e7f0      	b.n	80095b6 <_svfiprintf_r+0x182>
 80095d4:	ab03      	add	r3, sp, #12
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4622      	mov	r2, r4
 80095da:	4b11      	ldr	r3, [pc, #68]	; (8009620 <_svfiprintf_r+0x1ec>)
 80095dc:	a904      	add	r1, sp, #16
 80095de:	4640      	mov	r0, r8
 80095e0:	f7fc fbf6 	bl	8005dd0 <_printf_float>
 80095e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80095e8:	4681      	mov	r9, r0
 80095ea:	d1d6      	bne.n	800959a <_svfiprintf_r+0x166>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	065b      	lsls	r3, r3, #25
 80095f0:	f53f af35 	bmi.w	800945e <_svfiprintf_r+0x2a>
 80095f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095f6:	b01d      	add	sp, #116	; 0x74
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fc:	ab03      	add	r3, sp, #12
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	4622      	mov	r2, r4
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <_svfiprintf_r+0x1ec>)
 8009604:	a904      	add	r1, sp, #16
 8009606:	4640      	mov	r0, r8
 8009608:	f7fc fe98 	bl	800633c <_printf_i>
 800960c:	e7ea      	b.n	80095e4 <_svfiprintf_r+0x1b0>
 800960e:	bf00      	nop
 8009610:	08009944 	.word	0x08009944
 8009614:	0800994a 	.word	0x0800994a
 8009618:	0800994e 	.word	0x0800994e
 800961c:	08005dd1 	.word	0x08005dd1
 8009620:	08009381 	.word	0x08009381

08009624 <_sbrk_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4c06      	ldr	r4, [pc, #24]	; (8009640 <_sbrk_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4605      	mov	r5, r0
 800962c:	4608      	mov	r0, r1
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	f7f8 f858 	bl	80016e4 <_sbrk>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_sbrk_r+0x1a>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	b103      	cbz	r3, 800963e <_sbrk_r+0x1a>
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	200003b0 	.word	0x200003b0

08009644 <strncmp>:
 8009644:	b510      	push	{r4, lr}
 8009646:	b16a      	cbz	r2, 8009664 <strncmp+0x20>
 8009648:	3901      	subs	r1, #1
 800964a:	1884      	adds	r4, r0, r2
 800964c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009650:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009654:	4293      	cmp	r3, r2
 8009656:	d103      	bne.n	8009660 <strncmp+0x1c>
 8009658:	42a0      	cmp	r0, r4
 800965a:	d001      	beq.n	8009660 <strncmp+0x1c>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f5      	bne.n	800964c <strncmp+0x8>
 8009660:	1a98      	subs	r0, r3, r2
 8009662:	bd10      	pop	{r4, pc}
 8009664:	4610      	mov	r0, r2
 8009666:	e7fc      	b.n	8009662 <strncmp+0x1e>

08009668 <__ascii_wctomb>:
 8009668:	b149      	cbz	r1, 800967e <__ascii_wctomb+0x16>
 800966a:	2aff      	cmp	r2, #255	; 0xff
 800966c:	bf85      	ittet	hi
 800966e:	238a      	movhi	r3, #138	; 0x8a
 8009670:	6003      	strhi	r3, [r0, #0]
 8009672:	700a      	strbls	r2, [r1, #0]
 8009674:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009678:	bf98      	it	ls
 800967a:	2001      	movls	r0, #1
 800967c:	4770      	bx	lr
 800967e:	4608      	mov	r0, r1
 8009680:	4770      	bx	lr

08009682 <memmove>:
 8009682:	4288      	cmp	r0, r1
 8009684:	b510      	push	{r4, lr}
 8009686:	eb01 0302 	add.w	r3, r1, r2
 800968a:	d807      	bhi.n	800969c <memmove+0x1a>
 800968c:	1e42      	subs	r2, r0, #1
 800968e:	4299      	cmp	r1, r3
 8009690:	d00a      	beq.n	80096a8 <memmove+0x26>
 8009692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009696:	f802 4f01 	strb.w	r4, [r2, #1]!
 800969a:	e7f8      	b.n	800968e <memmove+0xc>
 800969c:	4283      	cmp	r3, r0
 800969e:	d9f5      	bls.n	800968c <memmove+0xa>
 80096a0:	1881      	adds	r1, r0, r2
 80096a2:	1ad2      	subs	r2, r2, r3
 80096a4:	42d3      	cmn	r3, r2
 80096a6:	d100      	bne.n	80096aa <memmove+0x28>
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80096b2:	e7f7      	b.n	80096a4 <memmove+0x22>

080096b4 <__malloc_lock>:
 80096b4:	4770      	bx	lr

080096b6 <__malloc_unlock>:
 80096b6:	4770      	bx	lr

080096b8 <_realloc_r>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	4607      	mov	r7, r0
 80096bc:	4614      	mov	r4, r2
 80096be:	460e      	mov	r6, r1
 80096c0:	b921      	cbnz	r1, 80096cc <_realloc_r+0x14>
 80096c2:	4611      	mov	r1, r2
 80096c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096c8:	f7ff be00 	b.w	80092cc <_malloc_r>
 80096cc:	b922      	cbnz	r2, 80096d8 <_realloc_r+0x20>
 80096ce:	f7ff fdaf 	bl	8009230 <_free_r>
 80096d2:	4625      	mov	r5, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d8:	f000 f814 	bl	8009704 <_malloc_usable_size_r>
 80096dc:	42a0      	cmp	r0, r4
 80096de:	d20f      	bcs.n	8009700 <_realloc_r+0x48>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4638      	mov	r0, r7
 80096e4:	f7ff fdf2 	bl	80092cc <_malloc_r>
 80096e8:	4605      	mov	r5, r0
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d0f2      	beq.n	80096d4 <_realloc_r+0x1c>
 80096ee:	4631      	mov	r1, r6
 80096f0:	4622      	mov	r2, r4
 80096f2:	f7ff f985 	bl	8008a00 <memcpy>
 80096f6:	4631      	mov	r1, r6
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff fd99 	bl	8009230 <_free_r>
 80096fe:	e7e9      	b.n	80096d4 <_realloc_r+0x1c>
 8009700:	4635      	mov	r5, r6
 8009702:	e7e7      	b.n	80096d4 <_realloc_r+0x1c>

08009704 <_malloc_usable_size_r>:
 8009704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009708:	1f18      	subs	r0, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbc      	itt	lt
 800970e:	580b      	ldrlt	r3, [r1, r0]
 8009710:	18c0      	addlt	r0, r0, r3
 8009712:	4770      	bx	lr

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
